//
// Created by 98max on 4/15/2023.
//

#include <gui/font.h>

using namespace maxOS;
using namespace maxOS::gui;
using namespace maxOS::common;


Font::Font() {

    fontSize = 8;   //TODO: Use this

    isBold = false;
    isItalic = false;
    isUnderlined = false;
    isStrikethrough = false;

}

Font::~Font() {

}

/**
 * @details Write the entire text to the screen
 * @param x The x coordinate of the text
 * @param y The y coordinate of the text
 * @param context The graphics context to draw the text on
 * @param text The text to draw
 */
void Font::drawText(int32_t x, int32_t y, Colour foregroundColour, Colour backgroundColour, GraphicsContext *context, string text) {

    // Calculate the rectangle of the text
    int32_t top = 0;
    int32_t left = 0;
    uint32_t width = getTextWidth(text);
    uint32_t height = getTextHeight(text);

    // Create the rectangle
    Rectangle<int> textArea(left, top, width, height);

    // Draw the text
    drawText(x, y, foregroundColour, backgroundColour, context, text, textArea);
}


/**
 * @details Write the entire text to the screen
 * @param x The x coordinate of the text
 * @param y The y coordinate of the text
 * @param context The graphics context to draw the text on
 * @param text The text to draw
 * @param limitArea The area of the text to draw
 */
void Font::drawText(int32_t x, int32_t y, Colour foregroundColour, Colour backgroundColour, GraphicsContext *context, string text,  Rectangle<int> limitArea) {

    uint8_t font8x8[2048];  // Declare an array to hold the font data
    getFont8x8(font8x8);    // Get the font data

    // Convert the colours
    uint32_t foreground = context->colourToInt(foregroundColour);
    uint32_t background = context->colourToInt(backgroundColour);

    // Ensure the area is within the actual area of the text
    if (limitArea.top < 0) {

        // Move the area down to fake the desired top and set the top to 0
        limitArea.height += limitArea.top;
        limitArea.top = 0;
    }

    if (limitArea.left < 0) {

        // Move the area right to fake the desired left and set the left to 0
        limitArea.width += limitArea.left;
        limitArea.left = 0;
    }

    if (limitArea.top + limitArea.height > getTextHeight(text)) {

        // Set the height to the maximum height
        limitArea.height = getTextHeight(text) - limitArea.top;
    }

    if (limitArea.left + limitArea.width > getTextWidth(text)) {

        // Set the width to the maximum width
        limitArea.width = getTextWidth(text) - limitArea.left;
    }

    // Calculate limits
    int32_t xLimit = limitArea.left + limitArea.width;
    int32_t yLimit = limitArea.top + limitArea.height;


    // Draw the text from top to bottom
    for (int yBitMapOffset = limitArea.top; yBitMapOffset <yLimit; yBitMapOffset++){

        for (int xBitMapOffset = limitArea.left; xBitMapOffset < xLimit; ++xBitMapOffset) {

            // If the y is the middle then add a strikethrough
            if (isStrikethrough && yBitMapOffset == yLimit / 2) {

                // Draw the pixel
                context -> putPixel(x + xBitMapOffset, y + yBitMapOffset, foreground);
                continue;
            }

            // If the y is the bottom then add an underline
            if (isUnderlined && yBitMapOffset == yLimit - 1) {

                // Draw the pixel
                context -> putPixel(x + xBitMapOffset, y + yBitMapOffset, foreground);
                continue;
            }

            //TODO: Bold, Italic

            // Get the character
            uint8_t character = text[xBitMapOffset/8];       // Divide by 8 as each character is 8 pixels wide.

           // Check if this pixel  is set or not
           bool set = font8x8[(uint16_t)character * 8 + yBitMapOffset] & (128 >> (xBitMapOffset % 8));

           // Draw the pixel
           context -> putPixel(x + xBitMapOffset, y + yBitMapOffset, set ? foreground : background);

        }
    }
}

/**
 * @details Get the height of the text
 * @param text The text to get the height of
 * @return The height of the text
 */
uint32_t Font::getTextHeight(string text) {

    return 8;

}

/**
 * @details Get the width of the text
 * @param text The text to get the width of
 * @return The width of the text
 */
uint32_t Font::getTextWidth(string text) {
    uint32_t length = 0;
    for(char* c = (char*)text; *c != '\0'; ++c)
        length++;
    return length*8;
}

void Font::getFont8x8(uint8_t (&font8x8)[2048]) {

}


AmigaFont::AmigaFont() {


}

AmigaFont::~AmigaFont() {


}

void AmigaFont::getFont8x8(uint8_t (&font8x8)[2048]) { uint8_t fontData[2048] =  {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x99, 0x81, 0x7E,
            0x7E, 0xFF, 0xDB, 0xFF, 0xC3, 0xE7, 0xFF, 0x7E,
            0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00,
            0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00,
            0x38, 0x7C, 0x38, 0xFE, 0xFE, 0x92, 0x10, 0x7C,
            0x00, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x7C,
            0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00,
            0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF,
            0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00,
            0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF,
            0x0F, 0x07, 0x0F, 0x7D, 0xCC, 0xCC, 0xCC, 0x78,
            0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18,
            0x3F, 0x33, 0x3F, 0x30, 0x30, 0x70, 0xF0, 0xE0,
            0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0,
            0x99, 0x5A, 0x3C, 0xE7, 0xE7, 0x3C, 0x5A, 0x99,
            0x80, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0x80, 0x00,
            0x02, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x02, 0x00,
            0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18,
            0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
            0x7F, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x00,
            0x3E, 0x63, 0x38, 0x6C, 0x6C, 0x38, 0x86, 0xFC,
            0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00,
            0x18, 0x3C, 0x7E, 0x18, 0x7E, 0x3C, 0x18, 0xFF,
            0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00,
            0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00,
            0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00,
            0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00,
            0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00,
            0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00,
            0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00,
            0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00,
            0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00,
            0x18, 0x7E, 0xC0, 0x7C, 0x06, 0xFC, 0x18, 0x00,
            0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00,
            0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00,
            0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
            0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
            0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00,
            0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30,
            0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
            0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00,
            0x7C, 0xCE, 0xDE, 0xF6, 0xE6, 0xC6, 0x7C, 0x00,
            0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00,
            0x78, 0xCC, 0x0C, 0x38, 0x60, 0xCC, 0xFC, 0x00,
            0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00,
            0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00,
            0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00,
            0x38, 0x60, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00,
            0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00,
            0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00,
            0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0x18, 0x70, 0x00,
            0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00,
            0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30,
            0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00,
            0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00,
            0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00,
            0x3C, 0x66, 0x0C, 0x18, 0x18, 0x00, 0x18, 0x00,
            0x7C, 0xC6, 0xDE, 0xDE, 0xDC, 0xC0, 0x7C, 0x00,
            0x30, 0x78, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0x00,
            0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00,
            0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00,
            0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00,
            0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00,
            0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00,
            0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3A, 0x00,
            0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00,
            0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00,
            0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00,
            0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00,
            0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00,
            0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00,
            0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00,
            0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00,
            0x7C, 0xC6, 0xC6, 0xC6, 0xD6, 0x7C, 0x0E, 0x00,
            0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00,
            0x7C, 0xC6, 0xE0, 0x78, 0x0E, 0xC6, 0x7C, 0x00,
            0xFC, 0xB4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
            0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x00,
            0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00,
            0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0x6C, 0x00,
            0xC6, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0xC6, 0x00,
            0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x78, 0x00,
            0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00,
            0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
            0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00,
            0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
            0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
            0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
            0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0xDC, 0x00,
            0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00,
            0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00,
            0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
            0x38, 0x6C, 0x64, 0xF0, 0x60, 0x60, 0xF0, 0x00,
            0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
            0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00,
            0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x0C, 0x00, 0x1C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78,
            0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00,
            0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xD6, 0x00,
            0x00, 0x00, 0xB8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00,
            0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
            0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0,
            0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E,
            0x00, 0x00, 0xDC, 0x76, 0x62, 0x60, 0xF0, 0x00,
            0x00, 0x00, 0x7C, 0xC0, 0x70, 0x1C, 0xF8, 0x00,
            0x10, 0x30, 0xFC, 0x30, 0x30, 0x34, 0x18, 0x00,
            0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
            0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00,
            0x00, 0x00, 0xC6, 0xC6, 0xD6, 0xFE, 0x6C, 0x00,
            0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00,
            0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
            0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00,
            0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00,
            0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
            0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00,
            0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0x00,
            0x7C, 0xC6, 0xC0, 0xC6, 0x7C, 0x0C, 0x06, 0x7C,
            0x00, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
            0x1C, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
            0x7E, 0x81, 0x3C, 0x06, 0x3E, 0x66, 0x3B, 0x00,
            0xCC, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
            0xE0, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
            0x30, 0x30, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
            0x00, 0x00, 0x7C, 0xC6, 0xC0, 0x78, 0x0C, 0x38,
            0x7E, 0x81, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00,
            0xCC, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
            0xE0, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
            0xCC, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x7C, 0x82, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00,
            0xE0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
            0xC6, 0x10, 0x7C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00,
            0x30, 0x30, 0x00, 0x78, 0xCC, 0xFC, 0xCC, 0x00,
            0x1C, 0x00, 0xFC, 0x60, 0x78, 0x60, 0xFC, 0x00,
            0x00, 0x00, 0x7F, 0x0C, 0x7F, 0xCC, 0x7F, 0x00,
            0x3E, 0x6C, 0xCC, 0xFE, 0xCC, 0xCC, 0xCE, 0x00,
            0x78, 0x84, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
            0x00, 0xCC, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
            0x00, 0xE0, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
            0x78, 0x84, 0x00, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
            0x00, 0xE0, 0x00, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
            0x00, 0xCC, 0x00, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
            0xC3, 0x18, 0x3C, 0x66, 0x66, 0x3C, 0x18, 0x00,
            0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
            0x18, 0x18, 0x7E, 0xC0, 0xC0, 0x7E, 0x18, 0x18,
            0x38, 0x6C, 0x64, 0xF0, 0x60, 0xE6, 0xFC, 0x00,
            0xCC, 0xCC, 0x78, 0x30, 0xFC, 0x30, 0xFC, 0x30,
            0xF8, 0xCC, 0xCC, 0xFA, 0xC6, 0xCF, 0xC6, 0xC3,
            0x0E, 0x1B, 0x18, 0x3C, 0x18, 0x18, 0xD8, 0x70,
            0x1C, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
            0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x00, 0x1C, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
            0x00, 0x1C, 0x00, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
            0x00, 0xF8, 0x00, 0xB8, 0xCC, 0xCC, 0xCC, 0x00,
            0xFC, 0x00, 0xCC, 0xEC, 0xFC, 0xDC, 0xCC, 0x00,
            0x3C, 0x6C, 0x6C, 0x3E, 0x00, 0x7E, 0x00, 0x00,
            0x38, 0x6C, 0x6C, 0x38, 0x00, 0x7C, 0x00, 0x00,
            0x18, 0x00, 0x18, 0x18, 0x30, 0x66, 0x3C, 0x00,
            0x00, 0x00, 0x00, 0xFC, 0xC0, 0xC0, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xFC, 0x0C, 0x0C, 0x00, 0x00,
            0xC6, 0xCC, 0xD8, 0x36, 0x6B, 0xC2, 0x84, 0x0F,
            0xC3, 0xC6, 0xCC, 0xDB, 0x37, 0x6D, 0xCF, 0x03,
            0x18, 0x00, 0x18, 0x18, 0x3C, 0x3C, 0x18, 0x00,
            0x00, 0x33, 0x66, 0xCC, 0x66, 0x33, 0x00, 0x00,
            0x00, 0xCC, 0x66, 0x33, 0x66, 0xCC, 0x00, 0x00,
            0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
            0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,
            0xDB, 0xF6, 0xDB, 0x6F, 0xDB, 0x7E, 0xD7, 0xED,
            0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0x18, 0x18,
            0x18, 0x18, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18,
            0x36, 0x36, 0x36, 0x36, 0xF6, 0x36, 0x36, 0x36,
            0x00, 0x00, 0x00, 0x00, 0xFE, 0x36, 0x36, 0x36,
            0x00, 0x00, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18,
            0x36, 0x36, 0xF6, 0x06, 0xF6, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
            0x00, 0x00, 0xFE, 0x06, 0xF6, 0x36, 0x36, 0x36,
            0x36, 0x36, 0xF6, 0x06, 0xFE, 0x00, 0x00, 0x00,
            0x36, 0x36, 0x36, 0x36, 0xFE, 0x00, 0x00, 0x00,
            0x18, 0x18, 0xF8, 0x18, 0xF8, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0x1F, 0x00, 0x00, 0x00,
            0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
            0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18,
            0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x37, 0x30, 0x3F, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x3F, 0x30, 0x37, 0x36, 0x36, 0x36,
            0x36, 0x36, 0xF7, 0x00, 0xFF, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xFF, 0x00, 0xF7, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
            0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
            0x36, 0x36, 0xF7, 0x00, 0xF7, 0x36, 0x36, 0x36,
            0x18, 0x18, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
            0x36, 0x36, 0x36, 0x36, 0xFF, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xFF, 0x00, 0xFF, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00, 0xFF, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36, 0x3F, 0x00, 0x00, 0x00,
            0x18, 0x18, 0x1F, 0x18, 0x1F, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00, 0x3F, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36, 0xFF, 0x36, 0x36, 0x36,
            0x18, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0xF8, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x18, 0x18,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
            0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
            0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
            0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x76, 0xDC, 0xC8, 0xDC, 0x76, 0x00,
            0x00, 0x78, 0xCC, 0xF8, 0xCC, 0xF8, 0xC0, 0xC0,
            0x00, 0xFC, 0xCC, 0xC0, 0xC0, 0xC0, 0xC0, 0x00,
            0x00, 0x00, 0xFE, 0x6C, 0x6C, 0x6C, 0x6C, 0x00,
            0xFC, 0xCC, 0x60, 0x30, 0x60, 0xCC, 0xFC, 0x00,
            0x00, 0x00, 0x7E, 0xD8, 0xD8, 0xD8, 0x70, 0x00,
            0x00, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0xC0,
            0x00, 0x76, 0xDC, 0x18, 0x18, 0x18, 0x18, 0x00,
            0xFC, 0x30, 0x78, 0xCC, 0xCC, 0x78, 0x30, 0xFC,
            0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0x6C, 0x38, 0x00,
            0x38, 0x6C, 0xC6, 0xC6, 0x6C, 0x6C, 0xEE, 0x00,
            0x1C, 0x30, 0x18, 0x7C, 0xCC, 0xCC, 0x78, 0x00,
            0x00, 0x00, 0x7E, 0xDB, 0xDB, 0x7E, 0x00, 0x00,
            0x06, 0x0C, 0x7E, 0xDB, 0xDB, 0x7E, 0x60, 0xC0,
            0x38, 0x60, 0xC0, 0xF8, 0xC0, 0x60, 0x38, 0x00,
            0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x00,
            0x00, 0x7E, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00,
            0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x7E, 0x00,
            0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xFC, 0x00,
            0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xFC, 0x00,
            0x0E, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0x70,
            0x18, 0x18, 0x00, 0x7E, 0x00, 0x18, 0x18, 0x00,
            0x00, 0x76, 0xDC, 0x00, 0x76, 0xDC, 0x00, 0x00,
            0x38, 0x6C, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
            0x0F, 0x0C, 0x0C, 0x0C, 0xEC, 0x6C, 0x3C, 0x1C,
            0x58, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00,
            0x70, 0x98, 0x30, 0x60, 0xF8, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    for (int i = 0; i < 2048; ++i) {
        font8x8[i] = fontData[i];
    }
}

