.TH "maxOS::net::EthernetFrameHandler" 3 "Sat Jan 6 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
maxOS::net::EthernetFrameHandler
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ethernetframe\&.h>\fP
.PP
Inherits \fBmaxOS::drivers::ethernet::EthernetDriverEventHandler\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBEthernetFrameHandler\fP (\fBdrivers::ethernet::EthernetDriver\fP *\fBethernetDriver\fP, \fBcommon::OutputStream\fP *\fBerrorMessages\fP)"
.br
.ti -1c
.RI "\fB~EthernetFrameHandler\fP ()"
.br
.ti -1c
.RI "\fBdrivers::ethernet::MediaAccessControlAddress\fP \fBgetMAC\fP ()"
.br
.ti -1c
.RI "bool \fBDataReceived\fP (uint8_t *\fBdata\fP, uint32_t \fBsize\fP)"
.br
.RI "Handle the received packet\&. "
.ti -1c
.RI "void \fBconnectHandler\fP (\fBEthernetFramePayloadHandler\fP *handler)"
.br
.ti -1c
.RI "void \fBsendEthernetFrame\fP (uint64_t \fBdestinationMAC\fP, uint16_t frameType, uint8_t *\fBdata\fP, uint32_t \fBsize\fP)"
.br
.RI "Send an packet via the backend driver\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBcommon::Map\fP< uint16_t, \fBEthernetFramePayloadHandler\fP * > \fBframeHandlers\fP"
.br
.ti -1c
.RI "\fBdrivers::ethernet::EthernetDriver\fP * \fBethernetDriver\fP"
.br
.ti -1c
.RI "\fBcommon::OutputStream\fP * \fBerrorMessages\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 50 of file ethernetframe\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "EthernetFrameHandler::EthernetFrameHandler (\fBdrivers::ethernet::EthernetDriver\fP * ethernetDriver, \fBcommon::OutputStream\fP * errorMessages)"

.PP
Definition at line 55 of file ethernetframe\&.cpp\&.
.PP
.nf
56 : EthernetDriverEventHandler()
57 {
58 
59     this -> ethernetDriver = driver;
60     this -> errorMessages = errorMessages;
61 
62     driver->connect_event_handler(this);
63 
64 }
.fi
.PP
References maxOS::common::EventManager< EventType >::connect_event_handler(), errorMessages, and ethernetDriver\&.
.SS "EthernetFrameHandler::~EthernetFrameHandler ()"

.PP
Definition at line 66 of file ethernetframe\&.cpp\&.
.PP
.nf
66                                             {
67 
68 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void EthernetFrameHandler::connectHandler (\fBEthernetFramePayloadHandler\fP * handler)"

.PP
Definition at line 138 of file ethernetframe\&.cpp\&.
.PP
.nf
138                                                                               {
139 
140     // Convert the protocol type to big endian
141     uint16_t frameType_BE = ((handler->handledType >> 8) & 0xFF) | ((handler->handledType << 8) & 0xFF00);
142 
143     // Add the handler to the list
144     frameHandlers\&.insert(frameType_BE, handler);
145 
146 }
.fi
.PP
References frameHandlers, and maxOS::net::EthernetFramePayloadHandler::handledType\&.
.PP
Referenced by maxOS::net::EthernetFramePayloadHandler::EthernetFramePayloadHandler()\&.
.SS "bool EthernetFrameHandler::DataReceived (uint8_t * buffer, uint32_t size)\fC [virtual]\fP"

.PP
Handle the received packet\&. 
.PP
\fBParameters\fP
.RS 4
\fIbuffer\fP the buffer with the received data 
.br
\fIsize\fP the size of the received data 
.RE
.PP

.PP
Reimplemented from \fBmaxOS::drivers::ethernet::EthernetDriverEventHandler\fP\&.
.PP
Definition at line 81 of file ethernetframe\&.cpp\&.
.PP
.nf
81                                                                       {
82 
83     errorMessages -> write("EFH: Data received\n");
84 
85 
86     //Check if the size is big enough to contain an ethernet frame
87     if(size < sizeof(EthernetFrameHeader))
88         return false;
89 
90     //Convert to struct for easier use
91     EthernetFrameHeader* frame = (EthernetFrameHeader*)buffer;
92     bool sendBack = false;
93 
94     //Only handle if it is for this device
95     if(frame->destinationMAC == 0xFFFFFFFFFFFF                                          //If it is a broadcast
96     || frame->destinationMAC == ethernetDriver -> GetMediaAccessControlAddress())      //If it is for this device
97     {
98 
99         // Find the handler for the protocol
100         Map<uint16_t , EthernetFramePayloadHandler*>::iterator handlerIterator = frameHandlers\&.find(frame->type);
101 
102         // If the handler is found
103         if(handlerIterator != frameHandlers\&.end()) {
104 
105 
106             //TODO: The override is not being called (IDK WHY)
107 
108             //Handle the data
109             errorMessages -> write("EFH: Handling ethernet frame payload\n");
110             sendBack = handlerIterator->second->handleEthernetframePayload(buffer + sizeof(EthernetFrameHeader), size - sizeof(EthernetFrameHeader));
111             errorMessages -> write("\&.\&.DONE\n");
112 
113         } else {
114 
115             //If the handler is not found, print an error message
116             errorMessages -> write("EFH: Unhandled ethernet frame type 0x");
117             errorMessages->write_hex(frame->type);
118             errorMessages -> write("\n");
119 
120         }
121     }
122 
123     //If the data is to be sent back again
124     if(sendBack){
125 
126         errorMessages -> write("EFH: Sending back\n");
127 
128         frame -> destinationMAC = frame -> sourceMAC;                             //Set the new destination to be the device the data was received from
129         frame -> sourceMAC = ethernetDriver->GetMediaAccessControlAddress();      //Set the new source to be this device's MAC address
130 
131     }
132 
133     //Return if the data is to be sent back
134     return sendBack;
135 
136 }
.fi
.PP
References destinationMAC, maxOS::net::EthernetFrameHeader::destinationMAC, errorMessages, ethernetDriver, frameHandlers, maxOS::drivers::ethernet::EthernetDriver::GetMediaAccessControlAddress(), size, sourceMAC, maxOS::net::EthernetFrameHeader::type, and maxOS::common::OutputStream::write_hex()\&.
.SS "\fBdrivers::ethernet::MediaAccessControlAddress\fP EthernetFrameHandler::getMAC ()"

.PP
Definition at line 70 of file ethernetframe\&.cpp\&.
.PP
.nf
70                                                                       {
71     return ethernetDriver -> GetMediaAccessControlAddress();
72 }
.fi
.PP
References ethernetDriver\&.
.SS "void EthernetFrameHandler::sendEthernetFrame (uint64_t destinationMAC, uint16_t frameType, uint8_t * data, uint32_t size)"

.PP
Send an packet via the backend driver\&. 
.PP
\fBParameters\fP
.RS 4
\fIdstMAC_BE\fP the destination MAC address 
.br
\fIetherType_BE\fP the type of the protocol 
.br
\fIbuffer\fP the data to send 
.br
\fIsize\fP the size of the payload 
.RE
.PP

.PP
Definition at line 156 of file ethernetframe\&.cpp\&.
.PP
.nf
156                                                                                                                       {
157 
158     errorMessages->write("EFH: Sending frame\&.\&.\&.");
159 
160     //Allocate memory for the buffer
161     uint8_t* buffer = (uint8_t*)MemoryManager::s_active_memory_manager-> malloc(size + sizeof(EthernetFrameHeader));
162     EthernetFrameHeader* frame = (EthernetFrameHeader*)buffer;
163 
164     //Put data in the header
165     frame -> destinationMAC = destinationMAC;
166     frame -> sourceMAC = ethernetDriver -> GetMediaAccessControlAddress();
167     frame -> type = (frameType >> 8) | (frameType << 8);                        //Convert to big endian
168 
169     //Copy the data
170     for(uint8_t *src = data + size - 1, *dst = buffer+sizeof(EthernetFrameHeader)+size-1; src >= data; --src, --dst)
171         *dst = *src;
172 
173     //Send the data
174     ethernetDriver -> Send(buffer, size + sizeof(EthernetFrameHeader));
175 
176     errorMessages->write("Done\n");
177 
178 
179     //Free the buffer
180     MemoryManager::s_active_memory_manager-> free(buffer);
181 }
.fi
.PP
References data, destinationMAC, errorMessages, ethernetDriver, size, sourceMAC, type, and maxOS::common::OutputStream::write()\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBcommon::OutputStream\fP* maxOS::net::EthernetFrameHandler::errorMessages\fC [protected]\fP"

.PP
Definition at line 57 of file ethernetframe\&.h\&.
.PP
Referenced by DataReceived(), EthernetFrameHandler(), and sendEthernetFrame()\&.
.SS "\fBdrivers::ethernet::EthernetDriver\fP* maxOS::net::EthernetFrameHandler::ethernetDriver\fC [protected]\fP"

.PP
Definition at line 56 of file ethernetframe\&.h\&.
.PP
Referenced by DataReceived(), EthernetFrameHandler(), getMAC(), and sendEthernetFrame()\&.
.SS "\fBcommon::Map\fP<uint16_t , \fBEthernetFramePayloadHandler\fP*> maxOS::net::EthernetFrameHandler::frameHandlers\fC [protected]\fP"

.PP
Definition at line 54 of file ethernetframe\&.h\&.
.PP
Referenced by connectHandler(), and DataReceived()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
