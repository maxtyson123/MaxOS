.TH "maxOS::drivers::console::VESABootConsole" 3 "Mon Jan 8 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
maxOS::drivers::console::VESABootConsole \- \fBDriver\fP for the VESA \fBConsole\fP during boot, handles the printing of characters and strings to the screen using VESA\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vesaboot\&.h>\fP
.PP
Inherits \fBmaxOS::drivers::Driver\fP, and \fBmaxOS::drivers::console::Console\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVESABootConsole\fP (\fBcommon::GraphicsContext\fP *)"
.br
.ti -1c
.RI "\fB~VESABootConsole\fP ()"
.br
.ti -1c
.RI "uint16_t \fBwidth\fP () final"
.br
.RI "Gets the width of the console\&. "
.ti -1c
.RI "uint16_t \fBheight\fP () final"
.br
.RI "Gets the height of the console\&. "
.ti -1c
.RI "void \fBput_character\fP (uint16_t x, uint16_t y, char) final"
.br
.RI "Places a character at the specified location\&. "
.ti -1c
.RI "void \fBset_foreground_color\fP (uint16_t x, uint16_t y, \fBConsoleColour\fP) final"
.br
.RI "Sets the foreground color at the specified location\&. "
.ti -1c
.RI "void \fBset_background_color\fP (uint16_t x, uint16_t y, \fBConsoleColour\fP) final"
.br
.RI "Sets the background color at the specified location\&. "
.ti -1c
.RI "char \fBget_character\fP (uint16_t x, uint16_t y) final"
.br
.RI "Gets the character at the specified location\&. "
.ti -1c
.RI "\fBConsoleColour\fP \fBget_foreground_color\fP (uint16_t x, uint16_t y) final"
.br
.RI "Gets the foreground color at the specified location\&. "
.ti -1c
.RI "\fBConsoleColour\fP \fBget_background_color\fP (uint16_t x, uint16_t y) final"
.br
.RI "Gets the background color at the specified location\&. "
.ti -1c
.RI "\fBcommon::Colour\fP \fBconsole_colour_to_vesa\fP (\fBConsoleColour\fP)"
.br
.RI "Converts a ConsoleColour to a Colour\&. "
.ti -1c
.RI "void \fBprint_logo\fP ()"
.br
.RI "Prints the logo to the center of the screen\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "uint16_t * \fBm_video_memory\fP"
.br
.ti -1c
.RI "\fBcommon::GraphicsContext\fP * \fBm_graphics_context\fP"
.br
.ti -1c
.RI "\fBgui::Font\fP \fBm_font\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
\fBDriver\fP for the VESA \fBConsole\fP during boot, handles the printing of characters and strings to the screen using VESA\&. 
.PP
Definition at line 24 of file vesaboot\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "VESABootConsole::VESABootConsole (\fBcommon::GraphicsContext\fP * graphics_context)"

.PP
Definition at line 15 of file vesaboot\&.cpp\&.
.PP
.nf
16 : Driver(),
17   Console(),
18   m_graphics_context(graphics_context),
19   m_font((uint8_t*)AMIGA_FONT)
20 {
21 
22     // Malloc the video memory
23     m_video_memory = (uint16_t*)MemoryManager::s_active_memory_manager->malloc(
24         graphics_context->get_width() * graphics_context->get_height() * sizeof(uint16_t));
25 }
.fi
.SS "VESABootConsole::~VESABootConsole ()"

.PP
Definition at line 27 of file vesaboot\&.cpp\&.
.PP
.nf
28 {
29 
30 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "\fBColour\fP VESABootConsole::console_colour_to_vesa (\fBConsoleColour\fP colour)"

.PP
Converts a ConsoleColour to a Colour\&. 
.PP
\fBParameters\fP
.RS 4
\fIcolour\fP The ConsoleColour to convert 
.RE
.PP
\fBReturns\fP
.RS 4
The Colour or black if the ConsoleColour is invalid 
.RE
.PP

.PP
Definition at line 191 of file vesaboot\&.cpp\&.
.PP
.nf
191                                                                    {
192     switch (colour) {
193 
194         case Black:
195             return Colour(0, 0, 0);
196 
197         case Blue:
198             return Colour(0, 0, 255);
199 
200         case Green:
201             return Colour(0, 255, 0);
202 
203         case Cyan:
204             return Colour(0, 170, 170);
205 
206         case Red:
207             return Colour(170, 0, 0);
208 
209         case Magenta:
210             return Colour(170, 0, 170);
211 
212         case Brown:
213             return Colour(170, 85, 0);
214 
215         case LightGrey:
216             return Colour(170, 170, 170);
217 
218         case DarkGrey:
219             return Colour(85, 85, 85);
220 
221         case LightBlue:
222             return Colour(85, 85, 255);
223 
224         case LightGreen:
225             return Colour(85, 255, 85);
226 
227         case LightCyan:
228             return Colour(85, 255, 255);
229 
230         case LightRed:
231             return Colour(255, 85, 85);
232 
233         case LightMagenta:
234             return Colour(255, 85, 255);
235 
236         case Yellow:
237             return Colour(255, 255, 85);
238 
239         case White:
240             return Colour(255, 255, 255);
241     }
242 
243     return Colour(0, 0, 0);
244 }
.fi
.PP
References maxOS::drivers::console::Black, maxOS::drivers::console::Blue, maxOS::drivers::console::Brown, maxOS::drivers::console::Cyan, maxOS::drivers::console::DarkGrey, maxOS::drivers::console::Green, maxOS::drivers::console::LightBlue, maxOS::drivers::console::LightCyan, maxOS::drivers::console::LightGreen, maxOS::drivers::console::LightGrey, maxOS::drivers::console::LightMagenta, maxOS::drivers::console::LightRed, maxOS::drivers::console::Magenta, maxOS::drivers::console::Red, maxOS::drivers::console::White, and maxOS::drivers::console::Yellow\&.
.PP
Referenced by put_character()\&.
.SS "\fBConsoleColour\fP VESABootConsole::get_background_color (uint16_t x, uint16_t y)\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the background color at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate
.RE
.PP
\fBReturns\fP
.RS 4
The background color at the specified location or black if the coordinates are out of bounds 
.RE
.PP

.PP
Reimplemented from \fBmaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 172 of file vesaboot\&.cpp\&.
.PP
.nf
172                                                                           {
173 
174     // If the coordinates are out of bounds, return
175     if(x >= width() || y >= height())
176         return ConsoleColour::Black;
177 
178     // Calculate the offset
179     int offset = (y* width() + x);
180 
181     // Return the background color at the offset, by masking the background color with the current background color (bits 12-15)
182     return (ConsoleColour)((m_video_memory[offset] & 0xF000) >> 12);
183 }
.fi
.PP
References maxOS::drivers::console::Black, height(), m_video_memory, width(), maxOS::drivers::peripherals::x, and maxOS::drivers::peripherals::y\&.
.PP
Referenced by put_character()\&.
.SS "char VESABootConsole::get_character (uint16_t x, uint16_t y)\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the character at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate 
.RE
.PP
\fBReturns\fP
.RS 4
The character at the specified location or a space if the coordinates are out of bounds 
.RE
.PP

.PP
Reimplemented from \fBmaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 132 of file vesaboot\&.cpp\&.
.PP
.nf
132                                                           {
133 
134     // If the coordinates are out of bounds, return
135     if(x >= width() || y >= height())
136         return ' ';
137 
138     // Calculate the offset
139     int offset = (y* width() + x);
140 
141     // Return the character at the offset, by masking the character with the current character (last 8 bits)
142     return (char)(m_video_memory[offset] & 0x00FF);
143 }
.fi
.PP
References height(), m_video_memory, width(), maxOS::drivers::peripherals::x, and maxOS::drivers::peripherals::y\&.
.SS "\fBConsoleColour\fP VESABootConsole::get_foreground_color (uint16_t x, uint16_t y)\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the foreground color at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate 
.RE
.PP
\fBReturns\fP
.RS 4
The foreground color at the specified location or white if the coordinates are out of bounds 
.RE
.PP

.PP
Reimplemented from \fBmaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 152 of file vesaboot\&.cpp\&.
.PP
.nf
152                                                                           {
153 
154     // If the coordinates are out of bounds, return
155     if(x >= width() || y >= height())
156         return ConsoleColour::White;
157 
158     // Calculate the offset
159     int offset = (y* width() + x);
160 
161     // Return the foreground color at the offset, by masking the foreground color with the current foreground color (bits 8-11)
162     return (ConsoleColour)((m_video_memory[offset] & 0x0F00) >> 8);
163 }
.fi
.PP
References height(), m_video_memory, maxOS::drivers::console::White, width(), maxOS::drivers::peripherals::x, and maxOS::drivers::peripherals::y\&.
.PP
Referenced by put_character()\&.
.SS "uint16_t VESABootConsole::height ()\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the height of the console\&. 
.PP
\fBReturns\fP
.RS 4
The height of the console in characters 
.RE
.PP

.PP
Reimplemented from \fBmaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 47 of file vesaboot\&.cpp\&.
.PP
.nf
48 {
49     return m_graphics_context->get_height() / 9;      // 9 pixels per character
50 }
.fi
.PP
References maxOS::common::GraphicsContext::get_height(), and m_graphics_context\&.
.PP
Referenced by get_background_color(), get_character(), get_foreground_color(), kernelMain(), put_character(), set_background_color(), and set_foreground_color()\&.
.SS "void VESABootConsole::print_logo ()"

.PP
Prints the logo to the center of the screen\&. 
.PP
Definition at line 249 of file vesaboot\&.cpp\&.
.PP
.nf
249                                  {
250 
251       // Load the logo
252       const char* logo = header_data;
253 
254       // Find the center of the screen
255       uint32_t center_x = m_graphics_context->get_width()/2;
256       uint32_t center_y = m_graphics_context->get_height()/2;
257 
258       // Draw the logo
259       for (uint32_t logoY = 0; logoY < logo_height; ++logoY) {
260         for (uint32_t logoX = 0; logoX < logo_width; ++logoX) {
261 
262           // Store the pixel in the logo
263           uint8_t pixel[3] = {0};
264 
265           // Get the pixel from the logo
266           LOGO_HEADER_PIXEL(logo, pixel);
267 
268           // Draw the pixel
269           m_graphics_context->put_pixel(center_x - logo_width / 2 + logoX,
270                                         center_y - logo_height / 2 + logoY,
271                                     common::Colour(pixel[0], pixel[1], pixel[2]));
272         }
273       }
274 }
.fi
.PP
Referenced by kernelMain()\&.
.SS "void VESABootConsole::put_character (uint16_t x, uint16_t y, char c)\fC [final]\fP, \fC [virtual]\fP"

.PP
Places a character at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate 
.br
\fIc\fP The character to place 
.RE
.PP

.PP
Reimplemented from \fBmaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 58 of file vesaboot\&.cpp\&.
.PP
.nf
58                                                                   {
59 
60     // If the coordinates are out of bounds, return
61     if(x >= width() || y >= height())
62         return;
63 
64     // Calculate the offset
65     int offset = (y* width() + x);
66 
67     // Set the character at the offset, by masking the character with the current character (last 8 bits)
68     m_video_memory[offset] = (m_video_memory[offset] & 0xFF00) | (uint16_t)c;
69 
70     // Convert the char into a string
71     char s[] = " ";
72     s[0] = c;
73 
74     Colour foreground = console_colour_to_vesa(get_foreground_color(x, y));
75     Colour background = console_colour_to_vesa(get_background_color(x, y));
76 
77     // Use the m_font to draw the character
78     m_font\&.draw_text(x * 8, y * 9, foreground, background, m_graphics_context,
79                      s);
80 
81 
82 }
.fi
.PP
References maxOS::drivers::peripherals::c, console_colour_to_vesa(), maxOS::gui::Font::draw_text(), get_background_color(), get_foreground_color(), height(), m_font, m_graphics_context, m_video_memory, maxOS::drivers::peripherals::s, width(), maxOS::drivers::peripherals::x, and maxOS::drivers::peripherals::y\&.
.SS "void VESABootConsole::set_background_color (uint16_t x, uint16_t y, \fBConsoleColour\fP background)\fC [final]\fP, \fC [virtual]\fP"

.PP
Sets the background color at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate 
.br
\fIbackground\fP The background color 
.RE
.PP

.PP
Reimplemented from \fBmaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 111 of file vesaboot\&.cpp\&.
.PP
.nf
111                                                                                            {
112 
113     // If the coordinates are out of bounds, return
114     if(x >= width() || y >= height())
115         return;
116 
117     // Calculate the offset
118     int offset = (y* width() + x);
119 
120     // Set the background color at the offset, by masking the background color with the current background color (bits 12-15)
121     m_video_memory[offset] = (m_video_memory[offset] & 0x0FFF) | ((uint16_t)background << 12);
122 
123 }
.fi
.PP
References height(), m_video_memory, width(), maxOS::drivers::peripherals::x, and maxOS::drivers::peripherals::y\&.
.SS "void VESABootConsole::set_foreground_color (uint16_t x, uint16_t y, \fBConsoleColour\fP foreground)\fC [final]\fP, \fC [virtual]\fP"

.PP
Sets the foreground color at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate 
.br
\fIforeground\fP The foreground color 
.RE
.PP

.PP
Reimplemented from \fBmaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 91 of file vesaboot\&.cpp\&.
.PP
.nf
91                                                                                            {
92 
93     // If the coordinates are out of bounds, return
94     if(x >= width() || y >= height())
95         return;
96 
97     // Calculate the offset
98     int offset = (y* width() + x);
99 
100     // Set the foreground color at the offset, by masking the foreground color with the current foreground color (bits 8-11)
101     m_video_memory[offset] = (m_video_memory[offset] & 0xF0FF) | ((uint16_t)foreground << 8);
102 }
.fi
.PP
References height(), m_video_memory, width(), maxOS::drivers::peripherals::x, and maxOS::drivers::peripherals::y\&.
.SS "uint16_t VESABootConsole::width ()\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the width of the console\&. 
.PP
\fBReturns\fP
.RS 4
The width of the console in characters 
.RE
.PP

.PP
Reimplemented from \fBmaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 37 of file vesaboot\&.cpp\&.
.PP
.nf
38 {
39     return m_graphics_context->get_width() / 8;       // 8 pixels per character
40 }
.fi
.PP
References maxOS::common::GraphicsContext::get_width(), and m_graphics_context\&.
.PP
Referenced by get_background_color(), get_character(), get_foreground_color(), kernelMain(), put_character(), set_background_color(), and set_foreground_color()\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBgui::Font\fP maxOS::drivers::console::VESABootConsole::m_font\fC [protected]\fP"

.PP
Definition at line 30 of file vesaboot\&.h\&.
.PP
Referenced by put_character()\&.
.SS "\fBcommon::GraphicsContext\fP* maxOS::drivers::console::VESABootConsole::m_graphics_context\fC [protected]\fP"

.PP
Definition at line 29 of file vesaboot\&.h\&.
.PP
Referenced by height(), put_character(), and width()\&.
.SS "uint16_t* maxOS::drivers::console::VESABootConsole::m_video_memory\fC [protected]\fP"

.PP
Definition at line 28 of file vesaboot\&.h\&.
.PP
Referenced by get_background_color(), get_character(), get_foreground_color(), put_character(), set_background_color(), and set_foreground_color()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
