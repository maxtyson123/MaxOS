.TH "MaxOS::drivers::peripherals::MouseDriver" 3 "Mon Jan 29 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaxOS::drivers::peripherals::MouseDriver \- \fBDriver\fP for the PS/2 mouse, manages the mouse and triggers events when the mouse moves or a button is pressed\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <mouse\&.h>\fP
.PP
Inherits \fBMaxOS::hardwarecommunication::InterruptHandler\fP, \fBMaxOS::drivers::Driver\fP, and \fBMaxOS::common::EventManager< MouseEvents >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMouseDriver\fP (\fBhardwarecommunication::InterruptManager\fP *manager)"
.br
.RI "\fB\fBDriver\fP\fP "
.ti -1c
.RI "\fB~MouseDriver\fP ()"
.br
.ti -1c
.RI "void \fBactivate\fP () final"
.br
.RI "activate the mouse "
.ti -1c
.RI "\fBstring\fP \fBget_device_name\fP () final"
.br
.RI "Get the name of the device\&. "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
\fBDriver\fP for the PS/2 mouse, manages the mouse and triggers events when the mouse moves or a button is pressed\&. 
.PP
Definition at line 83 of file mouse\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "MouseDriver::MouseDriver (\fBhardwarecommunication::InterruptManager\fP * manager)"

.PP
\fB\fBDriver\fP\fP 
.PP
Definition at line 81 of file mouse\&.cpp\&.
.PP
.nf
82 : InterruptHandler(0x2C, manager),
83   data_port(0x60),
84   command_port(0x64)
85 {
86 
87 }
.fi
.SS "MouseDriver::~MouseDriver ()"

.PP
Definition at line 88 of file mouse\&.cpp\&.
.PP
.nf
88                          {
89 
90 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void MouseDriver::activate ()\fC [final]\fP, \fC [virtual]\fP"

.PP
activate the mouse 
.PP
Reimplemented from \fBMaxOS::drivers::Driver\fP\&.
.PP
Definition at line 95 of file mouse\&.cpp\&.
.PP
.nf
95                            {
96 
97   // Tell the PIC to start listening to the mouse
98   command_port\&.write(0xAB);
99 
100   //  Get the current state of the mouse
101   command_port\&.write(0x20);
102   uint8_t status = (data_port\&.read() | 2);
103 
104   // write the new state
105   command_port\&.write(0x60);
106   data_port\&.write(status);
107 
108   // activate the mouse
109   command_port\&.write(0xD4);
110   data_port\&.write(0xF4);
111   data_port\&.read();
112 
113 
114 }
.fi
.PP
References MaxOS::hardwarecommunication::Port8Bit::read(), status, and MaxOS::hardwarecommunication::Port8Bit::write()\&.
.SS "\fBstring\fP MouseDriver::get_device_name ()\fC [final]\fP, \fC [virtual]\fP"

.PP
Get the name of the device\&. 
.PP
\fBReturns\fP
.RS 4
The name of the device 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::Driver\fP\&.
.PP
Definition at line 162 of file mouse\&.cpp\&.
.PP
.nf
162                                     {
163     return "Mouse";
164 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
