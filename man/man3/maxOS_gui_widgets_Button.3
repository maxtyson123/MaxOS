.TH "maxOS::gui::widgets::Button" 3 "Sat Jan 6 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
maxOS::gui::widgets::Button \- A button widget, can be clicked\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <button\&.h>\fP
.PP
Inherits \fBmaxOS::gui::Widget\fP, and \fBmaxOS::common::EventManager< ButtonEvents >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBButton\fP (int32_t left, int32_t top, uint32_t width, uint32_t height, \fBstring\fP \fBtext\fP)"
.br
.ti -1c
.RI "\fB~Button\fP ()"
.br
.ti -1c
.RI "void \fBdraw\fP (\fBcommon::GraphicsContext\fP *gc, \fBcommon::Rectangle\fP< int32_t > &area) override"
.br
.RI "Draws the button\&. "
.ti -1c
.RI "\fBdrivers::peripherals::MouseEventHandler\fP * \fBon_mouse_button_pressed\fP (uint32_t x, uint32_t y, uint8_t button) override"
.br
.RI "Handles the mouse button pressed event\&. "
.ti -1c
.RI "void \fBon_mouse_button_released\fP (uint32_t x, uint32_t y, uint8_t button) override"
.br
.RI "Handles the mouse button released event\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBcommon::Colour\fP \fBbackground_colour\fP"
.br
.ti -1c
.RI "\fBcommon::Colour\fP \fBforeground_colour\fP"
.br
.ti -1c
.RI "\fBcommon::Colour\fP \fBborder_colour\fP"
.br
.ti -1c
.RI "\fBgui::AmigaFont\fP \fBfont\fP"
.br
.ti -1c
.RI "\fBstring\fP \fBtext\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A button widget, can be clicked\&. 
.PP
Definition at line 71 of file button\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Button::Button (int32_t left, int32_t top, uint32_t width, uint32_t height, \fBstring\fP text)"

.PP
Definition at line 69 of file button\&.cpp\&.
.PP
.nf
70 : Widget(left, top, width, height),
71   font(AmigaFont()),
72   text(text),
73   background_colour(Colour(0xFF, 0xFF, 0xFF)),
74   foreground_colour(Colour(0x00, 0x00, 0x00)),
75   border_colour(Colour(0x57, 0x57, 0x57))
76 {
77 
78 }
.fi
.SS "Button::~Button ()"

.PP
Definition at line 80 of file button\&.cpp\&.
.PP
.nf
80                 {
81 
82 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void Button::draw (\fBcommon::GraphicsContext\fP * gc, \fBcommon::Rectangle\fP< int32_t > & area)\fC [override]\fP, \fC [virtual]\fP"

.PP
Draws the button\&. 
.PP
\fBParameters\fP
.RS 4
\fIgc\fP The graphics context to draw to 
.br
\fIarea\fP The area to draw to 
.RE
.PP

.PP
Reimplemented from \fBmaxOS::gui::Widget\fP\&.
.PP
Definition at line 90 of file button\&.cpp\&.
.PP
.nf
90                                                                {
91 
92     // Default Draw Operation
93     Widget::draw(gc, area);
94 
95     // Get the absolute m_position of the button
96     Coordinates buttonCoordinates = absolute_coordinates(Coordinates(0, 0));
97     Rectangle<int32_t> buttonPosition = position();
98 
99     // Get the x and y m_position of the button
100     int32_t x = buttonCoordinates\&.first;
101     int32_t y = buttonCoordinates\&.second;
102 
103     // Draw the background for the button
104     gc->fill_rectangle(x + area\&.left, y + area\&.top, x + area\&.left + area\&.width,
105                        y + area\&.top + area\&.height, background_colour);
106 
107     // Draw the border  (TODO: Make a border class?? Window uses it too)
108 
109     // Top Border
110     if(area\&.intersects(Rectangle<int32_t>(0,0,buttonPosition\&.width,1))){
111 
112         // Start in the top left corner of the button and end in the top right corner
113         gc->draw_line(x + area\&.left, y, x + area\&.left + area\&.width - 1, y,
114                       border_colour);
115     }
116 
117     // Left Border
118     if(area\&.intersects(Rectangle<int32_t>(0,0,1,buttonPosition\&.height))){
119 
120         // Start in the top left corner and end in the bottom left corner
121         gc->draw_line(x, y + area\&.top, x, y + area\&.top + area\&.height - 1,
122                       border_colour);
123     }
124 
125     // Right Border
126     if(area\&.intersects(Rectangle<int32_t>(0,buttonPosition\&.height - 1,buttonPosition\&.width,1))){
127 
128         // Start in the top right corner and end in the bottom right corner
129         gc->draw_line(x + area\&.left, y + buttonPosition\&.height - 1,
130                       x + area\&.left + area\&.width - 1,
131                       y + buttonPosition\&.height - 1, border_colour);
132     }
133 
134     // Bottom Border
135     if(area\&.intersects(Rectangle<int32_t>(buttonPosition\&.width - 1,0,1,buttonPosition\&.height))){
136 
137         // Start in the bottom left corner and end in the bottom right corner
138         gc->draw_line(x + buttonPosition\&.width - 1, y + area\&.top,
139                       x + buttonPosition\&.width - 1,
140                       y + area\&.top + area\&.height - 1, border_colour);
141     }
142 
143     // Draw the text
144     common::Rectangle<int32_t> textArea(area\&.left - 1, area\&.top - 1, area\&.width, area\&.height);
145     font\&.draw_text(x + 1, y + 1, foreground_colour, background_colour, gc, text,
146                    textArea);
147 
148 }
.fi
.PP
References maxOS::gui::Widget::absolute_coordinates(), background_colour, border_colour, maxOS::gui::Widget::draw(), maxOS::common::GraphicsContext::draw_line(), maxOS::gui::Font::draw_text(), maxOS::common::GraphicsContext::fill_rectangle(), maxOS::common::Pair< First, Second >::first, font, foreground_colour, maxOS::common::Rectangle< Type >::height, maxOS::common::Rectangle< Type >::intersects(), maxOS::common::Rectangle< Type >::left, maxOS::gui::Widget::position(), maxOS::common::Pair< First, Second >::second, text, maxOS::common::Rectangle< Type >::top, maxOS::common::Rectangle< Type >::width, maxOS::drivers::peripherals::x, and maxOS::drivers::peripherals::y\&.
.SS "\fBMouseEventHandler\fP * Button::on_mouse_button_pressed (uint32_t x, uint32_t y, uint8_t button)\fC [override]\fP, \fC [virtual]\fP"

.PP
Handles the mouse button pressed event\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x m_position of the mouse 
.br
\fIy\fP The y m_position of the mouse 
.br
\fIbutton\fP The button that was pressed 
.RE
.PP
\fBReturns\fP
.RS 4
The mouse event handler 
.RE
.PP

.PP
Reimplemented from \fBmaxOS::gui::Widget\fP\&.
.PP
Definition at line 158 of file button\&.cpp\&.
.PP
.nf
158                                                                                          {
159 
160     // Raise the event
161     raise_event(new ButtonPressedEvent(this));
162 
163     // Change the button colour
164     background_colour = Colour(0x57, 0x57, 0x57);
165     Widget::invalidate();
166 
167     // Pass the event on (that it was handled)
168     return Widget::on_mouse_button_pressed(x, y, button);
169 }
.fi
.PP
References background_colour, maxOS::gui::Widget::invalidate(), maxOS::gui::Widget::on_mouse_button_pressed(), maxOS::common::EventManager< ButtonEvents >::raise_event(), maxOS::drivers::peripherals::x, and maxOS::drivers::peripherals::y\&.
.SS "void Button::on_mouse_button_released (uint32_t x, uint32_t y, uint8_t button)\fC [override]\fP, \fC [virtual]\fP"

.PP
Handles the mouse button released event\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x m_position of the mouse 
.br
\fIy\fP The y m_position of the mouse 
.br
\fIbutton\fP The button that was released 
.RE
.PP

.PP
Reimplemented from \fBmaxOS::gui::Widget\fP\&.
.PP
Definition at line 178 of file button\&.cpp\&.
.PP
.nf
178                                                                             {
179 
180     // Raise the button released event
181     raise_event(new ButtonReleasedEvent(this));
182 
183     // Change the button colour
184     background_colour = Colour(0xFF, 0xFF, 0xFF);
185     Widget::invalidate();
186 
187     // Pass the event on (that it was handled)
188     Widget::on_mouse_button_released(x, y, button);
189 }
.fi
.PP
References background_colour, maxOS::gui::Widget::invalidate(), maxOS::gui::Widget::on_mouse_button_released(), maxOS::common::EventManager< ButtonEvents >::raise_event(), maxOS::drivers::peripherals::x, and maxOS::drivers::peripherals::y\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBcommon::Colour\fP maxOS::gui::widgets::Button::background_colour"

.PP
Definition at line 83 of file button\&.h\&.
.PP
Referenced by draw(), on_mouse_button_pressed(), and on_mouse_button_released()\&.
.SS "\fBcommon::Colour\fP maxOS::gui::widgets::Button::border_colour"

.PP
Definition at line 85 of file button\&.h\&.
.PP
Referenced by draw()\&.
.SS "\fBgui::AmigaFont\fP maxOS::gui::widgets::Button::font"

.PP
Definition at line 86 of file button\&.h\&.
.PP
Referenced by draw()\&.
.SS "\fBcommon::Colour\fP maxOS::gui::widgets::Button::foreground_colour"

.PP
Definition at line 84 of file button\&.h\&.
.PP
Referenced by draw()\&.
.SS "\fBstring\fP maxOS::gui::widgets::Button::text"

.PP
Definition at line 87 of file button\&.h\&.
.PP
Referenced by draw()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
