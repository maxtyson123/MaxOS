.TH "MaxOS::system::Thread" 3 "Mon Jan 15 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaxOS::system::Thread \- A execution thread that can be scheduled by the \fBThreadManager\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <multithreading\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBThread\fP ()"
.br
.ti -1c
.RI "\fB~Thread\fP ()"
.br
.ti -1c
.RI "void \fBinit\fP (void entrypoint())"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBThreadManager\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A execution thread that can be scheduled by the \fBThreadManager\fP\&. 
.PP
Definition at line 21 of file multithreading\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Thread::Thread ()"

.PP
Definition at line 11 of file multithreading\&.cpp\&.
.PP
.nf
11                {
12 
13 }
.fi
.SS "Thread::~Thread ()"

.PP
Definition at line 15 of file multithreading\&.cpp\&.
.PP
.nf
16 {
17 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void Thread::init (void  entrypoint())"

.PP
Definition at line 19 of file multithreading\&.cpp\&.
.PP
.nf
20 {
21 
22   // Set up stack
23   m_cpu_state = (CPUState*)(m_stack + 4096 - sizeof(CPUState));
24 
25   m_cpu_state->eax = 0;
26   m_cpu_state->ebx = 0;
27   m_cpu_state->ecx = 0;
28   m_cpu_state->edx = 0;
29 
30   m_cpu_state->esi = 0;
31   m_cpu_state->edi = 0;
32   m_cpu_state->ebp = 0;
33 
34   // Set up function pointer
35   m_cpu_state->eip = (uint32_t)entrypoint;
36   m_cpu_state->eflags = 0x202;
37   m_yield_status = false;
38 }
.fi
.PP
References MaxOS::system::CPUState::eax, MaxOS::system::CPUState::ebp, MaxOS::system::CPUState::ebx, MaxOS::system::CPUState::ecx, MaxOS::system::CPUState::edi, MaxOS::system::CPUState::edx, MaxOS::system::CPUState::eflags, MaxOS::system::CPUState::eip, and MaxOS::system::CPUState::esi\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBThreadManager\fP\fC [friend]\fP"

.PP
Definition at line 23 of file multithreading\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
