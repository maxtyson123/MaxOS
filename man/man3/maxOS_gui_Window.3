.TH "maxOS::gui::Window" 3 "Sat Jan 6 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
maxOS::gui::Window \- A window that can be moved and resized and contains a widget\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <window\&.h>\fP
.PP
Inherits \fBmaxOS::gui::CompositeWidget\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBWindow\fP (int32_t left, int32_t top, uint32_t width, uint32_t height, \fBstring\fP title_text)"
.br
.ti -1c
.RI "\fBWindow\fP (\fBWidget\fP *containedWidget, \fBstring\fP title_text)"
.br
.ti -1c
.RI "\fB~Window\fP ()"
.br
.ti -1c
.RI "void \fBdraw_self\fP (\fBcommon::GraphicsContext\fP *gc, \fBcommon::Rectangle\fP< int32_t > &area)"
.br
.RI "Draws the window and its children\&. "
.ti -1c
.RI "void \fBadd_child\fP (\fBWidget\fP *child)"
.br
.RI "Adds a child to the window\&. "
.ti -1c
.RI "\fBdrivers::peripherals::MouseEventHandler\fP * \fBon_mouse_button_pressed\fP (uint32_t x, uint32_t y, uint8_t button)"
.br
.RI "Handles the mouse button being pressed\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "uint8_t \fBframe_thickness\fP { 5 }"
.br
.ti -1c
.RI "uint8_t \fBtitle_bar_height\fP { 10 }"
.br
.ti -1c
.RI "\fBcommon::Colour\fP \fBarea_colour\fP"
.br
.ti -1c
.RI "\fBcommon::Colour\fP \fBframe_colour\fP"
.br
.ti -1c
.RI "\fBcommon::Colour\fP \fBframe_border_colour\fP"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBwidgets::Text\fP \fBm_title\fP"
.br
.ti -1c
.RI "\fBWidgetMover\fP \fBm_mover\fP"
.br
.ti -1c
.RI "\fBWidgetMoverResizerTop\fP \fBm_resizer_top\fP"
.br
.ti -1c
.RI "\fBWidgetMoverResizerBottom\fP \fBm_resizer_bottom\fP"
.br
.ti -1c
.RI "\fBWidgetMoverResizerLeft\fP \fBm_resizer_left\fP"
.br
.ti -1c
.RI "\fBWidgetMoverResizerRight\fP \fBm_resizer_right\fP"
.br
.ti -1c
.RI "\fBWidgetMoverResizerTopLeft\fP \fBm_resizer_top_left\fP"
.br
.ti -1c
.RI "\fBWidgetMoverResizerTopRight\fP \fBm_resizer_top_right\fP"
.br
.ti -1c
.RI "\fBWidgetMoverResizerBottomLeft\fP \fBm_resizer_bottom_left\fP"
.br
.ti -1c
.RI "\fBWidgetMoverResizerBottomRight\fP \fBm_resizer_bottom_right\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A window that can be moved and resized and contains a widget\&. 
.PP
Definition at line 20 of file window\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Window::Window (int32_t left, int32_t top, uint32_t width, uint32_t height, \fBstring\fP title_text)"

.PP
Definition at line 13 of file window\&.cpp\&.
.PP
.nf
14 : CompositeWidget(left, top, width, height),
15   m_title(0, -(10 + 5) + 2, width - 2 * 5, 10 + 5 - 3, title_text),
16   m_mover(this),
17   m_resizer_top(this),
18   m_resizer_bottom(this),
19   m_resizer_left(this),
20   m_resizer_right(this),
21   m_resizer_top_left(this),
22   m_resizer_top_right(this),
23   m_resizer_bottom_left(this),
24   m_resizer_bottom_right(this)
25 {
26 
27     // Set the sizing
28     m_min_width = 2 * frame_thickness;
29     m_min_height = 2 * frame_thickness + title_bar_height;
30 
31     // Set the colours
32     area_colour = Colour(0xff, 0xff, 0xff);    // White
33     frame_border_colour = Colour(0x00, 0x00, 0x00);    // Black
34     frame_colour = Colour(0x57,0x57,0x57);      // Davy's Grey
35     m_title\&.foreground_colour = Colour(0xff, 0xff, 0xff);    // White
36     m_title\&.background_colour = frame_colour;
37 
38     // Add the title to the window
39     Window::add_child(&m_title);
40 
41 }
.fi
.PP
References add_child(), area_colour, maxOS::gui::widgets::Text::background_colour, maxOS::gui::widgets::Text::foreground_colour, frame_border_colour, frame_colour, frame_thickness, maxOS::gui::Widget::m_min_height, maxOS::gui::Widget::m_min_width, m_title, and title_bar_height\&.
.SS "Window::Window (\fBWidget\fP * containedWidget, \fBstring\fP title_text)"

.PP
Definition at line 43 of file window\&.cpp\&.
.PP
.nf
44 : CompositeWidget(0, 0, containedWidget->position()\&.width + 2 * 5 + 2, containedWidget->position()\&.height + 2 * 5 + 10 + 2),
45   m_title(0, -(10 + 5) + 2, containedWidget->position()\&.width, 10 + 5 - 3,title_text),
46   m_mover(this),
47   m_resizer_top(this),
48   m_resizer_left(this),
49   m_resizer_right(this),
50   m_resizer_bottom(this),
51   m_resizer_top_left(this),
52   m_resizer_top_right(this),
53   m_resizer_bottom_left(this),
54   m_resizer_bottom_right(this)
55 {
56     // Set the sizing
57     m_min_width = 2 * frame_thickness;
58     m_min_height = 2 * frame_thickness + title_bar_height;
59 
60     // Set the colours
61     area_colour = Colour(0xff, 0xff, 0xff);    // White
62     frame_border_colour = Colour(0x00, 0x00, 0x00);    // Black
63     frame_colour = Colour(0x57,0x57,0x57);      // Davy's Grey
64     m_title\&.foreground_colour = Colour(0xff, 0xff, 0xff);    // White
65     m_title\&.background_colour = frame_colour;
66 
67     // Add the m_title to the window
68     Window::add_child(&m_title);
69     Window::add_child(containedWidget);
70 
71 }
.fi
.PP
References add_child(), area_colour, maxOS::gui::widgets::Text::background_colour, maxOS::gui::widgets::Text::foreground_colour, frame_border_colour, frame_colour, frame_thickness, maxOS::gui::Widget::m_min_height, maxOS::gui::Widget::m_min_width, m_title, and title_bar_height\&.
.SS "Window::~Window ()"

.PP
Definition at line 73 of file window\&.cpp\&.
.PP
.nf
73                 {
74 
75 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void Window::add_child (\fBWidget\fP * child)\fC [virtual]\fP"

.PP
Adds a child to the window\&. 
.PP
\fBParameters\fP
.RS 4
\fIchild\fP The child to add\&. 
.RE
.PP

.PP
Reimplemented from \fBmaxOS::gui::CompositeWidget\fP\&.
.PP
Definition at line 188 of file window\&.cpp\&.
.PP
.nf
188                                     {
189 
190     // If there is a child to add
191     if(child != 0){
192 
193         // Change the position of the child to be inside the window contents
194         Rectangle<int32_t> childPosition = child->position();
195         child -> move(childPosition\&.left + frame_thickness + 1, childPosition\&.top + frame_thickness + title_bar_height + 1);
196 
197     }
198 
199     // Add the child to the window
200     CompositeWidget::add_child(child);
201 }
.fi
.PP
References maxOS::gui::CompositeWidget::add_child(), frame_thickness, maxOS::common::Rectangle< Type >::left, maxOS::gui::Widget::move(), maxOS::gui::Widget::position(), title_bar_height, and maxOS::common::Rectangle< Type >::top\&.
.PP
Referenced by Window()\&.
.SS "void Window::draw_self (\fBcommon::GraphicsContext\fP * gc, \fBcommon::Rectangle\fP< int32_t > & area)\fC [virtual]\fP"

.PP
Draws the window and its children\&. 
.PP
\fBParameters\fP
.RS 4
\fIgc\fP The graphics context to draw on\&. 
.RE
.PP

.PP
Reimplemented from \fBmaxOS::gui::CompositeWidget\fP\&.
.PP
Definition at line 136 of file window\&.cpp\&.
.PP
.nf
136                                                                                {
137 
138     // Get the positioning of the window
139     Coordinates window_absolute_position = CompositeWidget::absolute_coordinates(Coordinates(0, 0));
140     Rectangle<int32_t> windowPosition = this->position();
141     int32_t window_x = window_absolute_position\&.first;
142     int32_t window_y = window_absolute_position\&.second;
143 
144     // Create an area for the window contents
145     Rectangle<int32_t> window_contents_area( frame_thickness, frame_thickness + title_bar_height, windowPosition\&.width - 2 * frame_thickness, windowPosition\&.height - 2 * frame_thickness - title_bar_height);
146 
147     // Draw the window contents if they are in the area to draw
148     if(window_contents_area\&.intersects(area)){
149         Rectangle<int32_t> contents_drawable = window_contents_area\&.intersection(area);
150         gc->fill_rectangle(contents_drawable\&.left + window_x, contents_drawable\&.top + window_y, contents_drawable\&.left + contents_drawable\&.width + window_x, contents_drawable\&.top + contents_drawable\&.height + window_y,area_colour);
151     }
152 
153     // Draw the frame if it is in the area to draw
154     Rectangle<int32_t> window_frame_top_area(frame_thickness, 0, windowPosition\&.width - 2 * frame_thickness,frame_thickness + title_bar_height);
155     if(window_frame_top_area\&.intersects(area)){
156         Rectangle<int32_t> frame_drawable = window_frame_top_area\&.intersection(area);
157         gc->fill_rectangle(frame_drawable\&.left + window_x, frame_drawable\&.top + window_y, frame_drawable\&.left + frame_drawable\&.width + window_x, frame_drawable\&.top + frame_drawable\&.height + window_y, frame_colour);
158     }
159 
160     // Draw the bottom of the window frame
161     Rectangle<int32_t> window_frame_bottom_area(frame_thickness, windowPosition\&.height - frame_thickness, windowPosition\&.width - 2* frame_thickness, frame_thickness);
162     if(window_frame_bottom_area\&.intersects(area)){
163         Rectangle<int32_t> bottom_drawable = window_frame_bottom_area\&.intersection(area);
164         gc->fill_rectangle(window_x + bottom_drawable\&.left, window_y + bottom_drawable\&.top, window_x + bottom_drawable\&.left + bottom_drawable\&.width, window_y + bottom_drawable\&.top + bottom_drawable\&.height, frame_colour);
165     }
166 
167     // Draw the left of the window frame
168     Rectangle<int32_t> window_frame_left_area(0,0, frame_thickness, windowPosition\&.height);
169     if(window_frame_left_area\&.intersects(area)){
170         Rectangle<int32_t> left_drawable = window_frame_left_area\&.intersection(area);
171         gc->fill_rectangle(window_x + left_drawable\&.left, window_y + left_drawable\&.top, window_x + left_drawable\&.left + left_drawable\&.width, window_y + left_drawable\&.top + left_drawable\&.height,frame_colour);
172     }
173 
174     // Draw the right of the window frame
175     Rectangle<int32_t> window_frame_right_area(windowPosition\&.width - frame_thickness, 0, frame_thickness, windowPosition\&.height);
176     if(window_frame_right_area\&.intersects(area)){
177         Rectangle<int32_t> right_drawable = window_frame_right_area\&.intersection(area);
178         gc->fill_rectangle(window_x + right_drawable\&.left, window_y + right_drawable\&.top, window_x + right_drawable\&.left + right_drawable\&.width, window_y + right_drawable\&.top + right_drawable\&.height, frame_colour);
179     }
180 }
.fi
.PP
References maxOS::gui::Widget::absolute_coordinates(), area_colour, maxOS::common::GraphicsContext::fill_rectangle(), maxOS::common::Pair< First, Second >::first, frame_colour, frame_thickness, maxOS::common::Rectangle< Type >::height, maxOS::common::Rectangle< Type >::intersection(), maxOS::common::Rectangle< Type >::intersects(), maxOS::common::Rectangle< Type >::left, maxOS::gui::Widget::position(), maxOS::common::Pair< First, Second >::second, title_bar_height, maxOS::common::Rectangle< Type >::top, and maxOS::common::Rectangle< Type >::width\&.
.SS "\fBMouseEventHandler\fP * Window::on_mouse_button_pressed (uint32_t mouseX, uint32_t mouseY, uint8_t button)\fC [virtual]\fP"

.PP
Handles the mouse button being pressed\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate of the mouse\&. 
.br
\fIy\fP The y coordinate of the mouse\&. 
.br
\fIbutton\fP The button that is pressed\&. 
.RE
.PP

.PP
Reimplemented from \fBmaxOS::gui::CompositeWidget\fP\&.
.PP
Definition at line 84 of file window\&.cpp\&.
.PP
.nf
84                                                                                                   {
85 
86     // Pass the mouse event to the children
87     maxOS::drivers::peripherals::MouseEventHandler* child_result = CompositeWidget::on_mouse_button_pressed(mouseX, mouseY, button);
88     Rectangle<int32_t> window_position = position();
89 
90     // Bring the window to the front
91     bring_to_front();
92 
93     if(mouseX <= frame_thickness)
94     {
95         if(mouseY <= frame_thickness)
96             return &m_resizer_top_left;
97 
98         else if(mouseY < window_position\&.height - frame_thickness)
99             return &m_resizer_left;
100 
101         else
102             return &m_resizer_bottom_left;
103     }
104     else if(mouseX < window_position\&.width - frame_thickness)
105     {
106         if(mouseY <= frame_thickness)
107             return &m_resizer_top;
108 
109         else if(mouseY < frame_thickness + title_bar_height)
110             return &m_mover;
111 
112         else if(mouseY >= window_position\&.height - frame_thickness)
113             return &m_resizer_bottom;
114     }
115     else
116     {
117         if(mouseY <= frame_thickness)
118             return &m_resizer_top_right;
119 
120         else if(mouseY < window_position\&.height-frame_thickness)
121             return &m_resizer_right;
122 
123         else
124             return &m_resizer_bottom_right;
125     }
126 
127     return child_result;
128 
129 }
.fi
.PP
References maxOS::gui::Widget::bring_to_front(), frame_thickness, maxOS::common::Rectangle< Type >::height, m_mover, m_resizer_bottom, m_resizer_bottom_left, m_resizer_bottom_right, m_resizer_left, m_resizer_right, m_resizer_top, m_resizer_top_left, m_resizer_top_right, maxOS::gui::CompositeWidget::on_mouse_button_pressed(), maxOS::gui::Widget::position(), title_bar_height, and maxOS::common::Rectangle< Type >::width\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBcommon::Colour\fP maxOS::gui::Window::area_colour"

.PP
Definition at line 42 of file window\&.h\&.
.PP
Referenced by draw_self(), and Window()\&.
.SS "\fBcommon::Colour\fP maxOS::gui::Window::frame_border_colour"

.PP
Definition at line 44 of file window\&.h\&.
.PP
Referenced by Window()\&.
.SS "\fBcommon::Colour\fP maxOS::gui::Window::frame_colour"

.PP
Definition at line 43 of file window\&.h\&.
.PP
Referenced by draw_self(), and Window()\&.
.SS "uint8_t maxOS::gui::Window::frame_thickness { 5 }"

.PP
Definition at line 39 of file window\&.h\&.
.PP
Referenced by add_child(), draw_self(), on_mouse_button_pressed(), and Window()\&.
.SS "\fBWidgetMover\fP maxOS::gui::Window::m_mover\fC [protected]\fP"

.PP
Definition at line 26 of file window\&.h\&.
.PP
Referenced by on_mouse_button_pressed()\&.
.SS "\fBWidgetMoverResizerBottom\fP maxOS::gui::Window::m_resizer_bottom\fC [protected]\fP"

.PP
Definition at line 28 of file window\&.h\&.
.PP
Referenced by on_mouse_button_pressed()\&.
.SS "\fBWidgetMoverResizerBottomLeft\fP maxOS::gui::Window::m_resizer_bottom_left\fC [protected]\fP"

.PP
Definition at line 33 of file window\&.h\&.
.PP
Referenced by on_mouse_button_pressed()\&.
.SS "\fBWidgetMoverResizerBottomRight\fP maxOS::gui::Window::m_resizer_bottom_right\fC [protected]\fP"

.PP
Definition at line 34 of file window\&.h\&.
.PP
Referenced by on_mouse_button_pressed()\&.
.SS "\fBWidgetMoverResizerLeft\fP maxOS::gui::Window::m_resizer_left\fC [protected]\fP"

.PP
Definition at line 29 of file window\&.h\&.
.PP
Referenced by on_mouse_button_pressed()\&.
.SS "\fBWidgetMoverResizerRight\fP maxOS::gui::Window::m_resizer_right\fC [protected]\fP"

.PP
Definition at line 30 of file window\&.h\&.
.PP
Referenced by on_mouse_button_pressed()\&.
.SS "\fBWidgetMoverResizerTop\fP maxOS::gui::Window::m_resizer_top\fC [protected]\fP"

.PP
Definition at line 27 of file window\&.h\&.
.PP
Referenced by on_mouse_button_pressed()\&.
.SS "\fBWidgetMoverResizerTopLeft\fP maxOS::gui::Window::m_resizer_top_left\fC [protected]\fP"

.PP
Definition at line 31 of file window\&.h\&.
.PP
Referenced by on_mouse_button_pressed()\&.
.SS "\fBWidgetMoverResizerTopRight\fP maxOS::gui::Window::m_resizer_top_right\fC [protected]\fP"

.PP
Definition at line 32 of file window\&.h\&.
.PP
Referenced by on_mouse_button_pressed()\&.
.SS "\fBwidgets::Text\fP maxOS::gui::Window::m_title\fC [protected]\fP"

.PP
Definition at line 23 of file window\&.h\&.
.PP
Referenced by Window()\&.
.SS "uint8_t maxOS::gui::Window::title_bar_height { 10 }"

.PP
Definition at line 40 of file window\&.h\&.
.PP
Referenced by add_child(), draw_self(), on_mouse_button_pressed(), and Window()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
