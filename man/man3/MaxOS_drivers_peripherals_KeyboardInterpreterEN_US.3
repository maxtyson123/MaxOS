.TH "MaxOS::drivers::peripherals::KeyboardInterpreterEN_US" 3 "Mon Jan 15 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaxOS::drivers::peripherals::KeyboardInterpreterEN_US \- Interprets the scan codes from the keyboard for the EN_US keyboard layout\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <keyboard\&.h>\fP
.PP
Inherits \fBMaxOS::drivers::peripherals::KeyboardInterpreter\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBKeyCodeEN_US\fP { \fBescape\fP = 0x01, \fBf1\fP = 0x3B, \fBf2\fP = 0x3C, \fBf3\fP = 0x3D, \fBf4\fP = 0x3E, \fBf5\fP = 0x3F, \fBf6\fP = 0x40, \fBf7\fP = 0x41, \fBf8\fP = 0x42, \fBf9\fP = 0x43, \fBf10\fP = 0x44, \fBf11\fP = 0x57, \fBf12\fP = 0x58, \fBprintScreen\fP = 0x37, \fBscrollLock\fP = 0x46, \fBpauseBreak\fP = 0x45, \fBsquigglyLine\fP = 0x29, \fBone\fP = 0x02, \fBtwo\fP = 0x03, \fBthree\fP = 0x04, \fBfour\fP = 0x05, \fBfive\fP = 0x06, \fBsix\fP = 0x07, \fBseven\fP = 0x08, \fBeight\fP = 0x09, \fBnine\fP = 0x0A, \fBzero\fP = 0x0B, \fBminus\fP = 0x0C, \fBequals\fP = 0x0D, \fBbackspace\fP = 0x0E, \fBinsert\fP = 0x52, \fBhome\fP = 0x47, \fBpageUp\fP = 0x49, \fBnumberPadLock\fP = 0x45, \fBnumberPadForwardSlash\fP = 0x35, \fBnumberPadMultiply\fP = 0x37, \fBnumberPadMinus\fP = 0x4A, \fBtab\fP = 0x0F, \fBQ\fP = 0x10, \fBW\fP = 0x11, \fBE\fP = 0x12, \fBR\fP = 0x13, \fBT\fP = 0x14, \fBY\fP = 0x15, \fBU\fP = 0x16, \fBI\fP = 0x17, \fBO\fP = 0x18, \fBP\fP = 0x19, \fBopenSquareBracket\fP = 0x1A, \fBcloseSquareBracket\fP = 0x1B, \fBbackslash\fP = 0x2B, \fBdeleteKey\fP = 0x53, \fBend\fP = 0x4F, \fBpageDown\fP = 0x51, \fBnumberPadSeven\fP = 0x47, \fBnumberPadEight\fP = 0x48, \fBnumberPadNine\fP = 0x49, \fBnumberPadPlus\fP = 0x4E, \fBcapsLock\fP = 0x3A, \fBA\fP = 0x1E, \fBS\fP = 0x1F, \fBD\fP = 0x20, \fBF\fP = 0x21, \fBG\fP = 0x22, \fBH\fP = 0x23, \fBJ\fP = 0x24, \fBK\fP = 0x25, \fBL\fP = 0x26, \fBsemicolon\fP = 0x27, \fBapostrophe\fP = 0x28, \fBenter\fP = 0x1C, \fBnumberPadFour\fP = 0x4B, \fBnumberPadFive\fP = 0x4C, \fBnumberPadSix\fP = 0x4D, \fBleftShift\fP = 0x2A, \fBZ\fP = 0x2C, \fBX\fP = 0x2D, \fBC\fP = 0x2E, \fBV\fP = 0x2F, \fBB\fP = 0x30, \fBN\fP = 0x31, \fBM\fP = 0x32, \fBcomma\fP = 0x33, \fBfullStop\fP = 0x34, \fBforwardSlash\fP = 0x35, \fBrightShift\fP = 0x36, \fBupArrow\fP = 0x48, \fBnumberPadOne\fP = 0x4F, \fBnumberPadTwo\fP = 0x50, \fBnumberPadThree\fP = 0x51, \fBnumberPadEnter\fP = 0x1C, \fBleftControl\fP = 0x1D, \fBleftOS\fP = 0x5B, \fBleftAlt\fP = 0x38, \fBspace\fP = 0x39, \fBrightAlt\fP = 0x38, \fBfunction\fP = 0x5D, \fBrightControl\fP = 0x1D, \fBleftArrow\fP = 0x4B, \fBdownArrow\fP = 0x50, \fBrightArrow\fP = 0x4D, \fBnumberPadZero\fP = 0x52, \fBnumberPadFullStop\fP = 0x53 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBKeyboardInterpreterEN_US\fP ()"
.br
.RI "___Interpreter EN_US___ "
.ti -1c
.RI "\fB~KeyboardInterpreterEN_US\fP ()"
.br
.ti -1c
.RI "void \fBon_stream_read\fP (uint8_t scan_code) final"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Interprets the scan codes from the keyboard for the EN_US keyboard layout\&. 
.PP
Definition at line 288 of file keyboard\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBMaxOS::drivers::peripherals::KeyboardInterpreterEN_US::KeyCodeEN_US\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIescape \fP\fP
.TP
\fB\fIf1 \fP\fP
.TP
\fB\fIf2 \fP\fP
.TP
\fB\fIf3 \fP\fP
.TP
\fB\fIf4 \fP\fP
.TP
\fB\fIf5 \fP\fP
.TP
\fB\fIf6 \fP\fP
.TP
\fB\fIf7 \fP\fP
.TP
\fB\fIf8 \fP\fP
.TP
\fB\fIf9 \fP\fP
.TP
\fB\fIf10 \fP\fP
.TP
\fB\fIf11 \fP\fP
.TP
\fB\fIf12 \fP\fP
.TP
\fB\fIprintScreen \fP\fP
.TP
\fB\fIscrollLock \fP\fP
.TP
\fB\fIpauseBreak \fP\fP
.TP
\fB\fIsquigglyLine \fP\fP
.TP
\fB\fIone \fP\fP
.TP
\fB\fItwo \fP\fP
.TP
\fB\fIthree \fP\fP
.TP
\fB\fIfour \fP\fP
.TP
\fB\fIfive \fP\fP
.TP
\fB\fIsix \fP\fP
.TP
\fB\fIseven \fP\fP
.TP
\fB\fIeight \fP\fP
.TP
\fB\fInine \fP\fP
.TP
\fB\fIzero \fP\fP
.TP
\fB\fIminus \fP\fP
.TP
\fB\fIequals \fP\fP
.TP
\fB\fIbackspace \fP\fP
.TP
\fB\fIinsert \fP\fP
.TP
\fB\fIhome \fP\fP
.TP
\fB\fIpageUp \fP\fP
.TP
\fB\fInumberPadLock \fP\fP
.TP
\fB\fInumberPadForwardSlash \fP\fP
.TP
\fB\fInumberPadMultiply \fP\fP
.TP
\fB\fInumberPadMinus \fP\fP
.TP
\fB\fItab \fP\fP
.TP
\fB\fIQ \fP\fP
.TP
\fB\fIW \fP\fP
.TP
\fB\fIE \fP\fP
.TP
\fB\fIR \fP\fP
.TP
\fB\fIT \fP\fP
.TP
\fB\fIY \fP\fP
.TP
\fB\fIU \fP\fP
.TP
\fB\fII \fP\fP
.TP
\fB\fIO \fP\fP
.TP
\fB\fIP \fP\fP
.TP
\fB\fIopenSquareBracket \fP\fP
.TP
\fB\fIcloseSquareBracket \fP\fP
.TP
\fB\fIbackslash \fP\fP
.TP
\fB\fIdeleteKey \fP\fP
.TP
\fB\fIend \fP\fP
.TP
\fB\fIpageDown \fP\fP
.TP
\fB\fInumberPadSeven \fP\fP
.TP
\fB\fInumberPadEight \fP\fP
.TP
\fB\fInumberPadNine \fP\fP
.TP
\fB\fInumberPadPlus \fP\fP
.TP
\fB\fIcapsLock \fP\fP
.TP
\fB\fIA \fP\fP
.TP
\fB\fIS \fP\fP
.TP
\fB\fID \fP\fP
.TP
\fB\fIF \fP\fP
.TP
\fB\fIG \fP\fP
.TP
\fB\fIH \fP\fP
.TP
\fB\fIJ \fP\fP
.TP
\fB\fIK \fP\fP
.TP
\fB\fIL \fP\fP
.TP
\fB\fIsemicolon \fP\fP
.TP
\fB\fIapostrophe \fP\fP
.TP
\fB\fIenter \fP\fP
.TP
\fB\fInumberPadFour \fP\fP
.TP
\fB\fInumberPadFive \fP\fP
.TP
\fB\fInumberPadSix \fP\fP
.TP
\fB\fIleftShift \fP\fP
.TP
\fB\fIZ \fP\fP
.TP
\fB\fIX \fP\fP
.TP
\fB\fIC \fP\fP
.TP
\fB\fIV \fP\fP
.TP
\fB\fIB \fP\fP
.TP
\fB\fIN \fP\fP
.TP
\fB\fIM \fP\fP
.TP
\fB\fIcomma \fP\fP
.TP
\fB\fIfullStop \fP\fP
.TP
\fB\fIforwardSlash \fP\fP
.TP
\fB\fIrightShift \fP\fP
.TP
\fB\fIupArrow \fP\fP
.TP
\fB\fInumberPadOne \fP\fP
.TP
\fB\fInumberPadTwo \fP\fP
.TP
\fB\fInumberPadThree \fP\fP
.TP
\fB\fInumberPadEnter \fP\fP
.TP
\fB\fIleftControl \fP\fP
.TP
\fB\fIleftOS \fP\fP
.TP
\fB\fIleftAlt \fP\fP
.TP
\fB\fIspace \fP\fP
.TP
\fB\fIrightAlt \fP\fP
.TP
\fB\fIfunction \fP\fP
.TP
\fB\fIrightControl \fP\fP
.TP
\fB\fIleftArrow \fP\fP
.TP
\fB\fIdownArrow \fP\fP
.TP
\fB\fIrightArrow \fP\fP
.TP
\fB\fInumberPadZero \fP\fP
.TP
\fB\fInumberPadFullStop \fP\fP
.PP
Definition at line 292 of file keyboard\&.h\&.
.PP
.nf
292                                       {
293                         // First Row
294                         escape      = 0x01,
295                         f1          = 0x3B,
296                         f2          = 0x3C,
297                         f3          = 0x3D,
298                         f4          = 0x3E,
299                         f5          = 0x3F,
300                         f6          = 0x40,
301                         f7          = 0x41,
302                         f8          = 0x42,
303                         f9          = 0x43,
304                         f10         = 0x44,
305                         f11         = 0x57,
306                         f12         = 0x58,
307                         printScreen = 0x37,
308                         scrollLock  = 0x46,
309                         pauseBreak  = 0x45,
310 
311                         // Second Row
312                         squigglyLine            = 0x29,
313                         one                     = 0x02,
314                         two                     = 0x03,
315                         three                   = 0x04,
316                         four                    = 0x05,
317                         five                    = 0x06,
318                         six                     = 0x07,
319                         seven                   = 0x08,
320                         eight                   = 0x09,
321                         nine                    = 0x0A,
322                         zero                    = 0x0B,
323                         minus                   = 0x0C,
324                         equals                  = 0x0D,
325                         backspace               = 0x0E,
326                         insert                  = 0x52,
327                         home                    = 0x47,
328                         pageUp                  = 0x49,
329                         numberPadLock           = 0x45,
330                         numberPadForwardSlash   = 0x35,
331                         numberPadMultiply       = 0x37,
332                         numberPadMinus          = 0x4A,
333 
334                         // Third Row
335                         tab                 = 0x0F,
336                         Q                   = 0x10,
337                         W                   = 0x11,
338                         E                   = 0x12,
339                         R                   = 0x13,
340                         T                   = 0x14,
341                         Y                   = 0x15,
342                         U                   = 0x16,
343                         I                   = 0x17,
344                         O                   = 0x18,
345                         P                   = 0x19,
346                         openSquareBracket   = 0x1A,
347                         closeSquareBracket  = 0x1B,
348                         backslash           = 0x2B,
349                         deleteKey           = 0x53,
350                         end                 = 0x4F,
351                         pageDown            = 0x51,
352                         numberPadSeven      = 0x47,
353                         numberPadEight      = 0x48,
354                         numberPadNine       = 0x49,
355                         numberPadPlus       = 0x4E,
356 
357                         // Fourth Row
358                         capsLock        = 0x3A,
359                         A               = 0x1E,
360                         S               = 0x1F,
361                         D               = 0x20,
362                         F               = 0x21,
363                         G               = 0x22,
364                         H               = 0x23,
365                         J               = 0x24,
366                         K               = 0x25,
367                         L               = 0x26,
368                         semicolon       = 0x27,
369                         apostrophe      = 0x28,
370                         enter           = 0x1C,
371                         numberPadFour   = 0x4B,
372                         numberPadFive   = 0x4C,
373                         numberPadSix    = 0x4D,
374 
375                         // Fifth Row
376                         leftShift       = 0x2A,
377                         Z               = 0x2C,
378                         X               = 0x2D,
379                         C               = 0x2E,
380                         V               = 0x2F,
381                         B               = 0x30,
382                         N               = 0x31,
383                         M               = 0x32,
384                         comma           = 0x33,
385                         fullStop          = 0x34,
386                         forwardSlash    = 0x35,
387                         rightShift      = 0x36,
388                         upArrow         = 0x48,
389                         numberPadOne    = 0x4F,
390                         numberPadTwo    = 0x50,
391                         numberPadThree  = 0x51,
392                         numberPadEnter  = 0x1C,
393 
394                         // Sixth Row
395                         leftControl     = 0x1D,
396                         leftOS          = 0x5B,
397                         leftAlt         = 0x38,
398                         space           = 0x39,
399                         rightAlt        = 0x38,
400                         function        = 0x5D,
401                         rightControl    = 0x1D,
402                         leftArrow       = 0x4B,
403                         downArrow       = 0x50,
404                         rightArrow      = 0x4D,
405                         numberPadZero   = 0x52,
406                         numberPadFullStop = 0x53
407                     };
.fi
.SH "Constructor & Destructor Documentation"
.PP 
.SS "KeyboardInterpreterEN_US::KeyboardInterpreterEN_US ()"

.PP
___Interpreter EN_US___ 
.PP
Definition at line 168 of file keyboard\&.cpp\&.
.PP
.nf
169 : KeyboardInterpreter()
170 {
171 
172 }
.fi
.SS "KeyboardInterpreterEN_US::~KeyboardInterpreterEN_US ()"

.PP
Definition at line 174 of file keyboard\&.cpp\&.
.PP
.nf
174                                                     {
175 
176 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void KeyboardInterpreterEN_US::on_stream_read (uint8_t)\fC [final]\fP, \fC [virtual]\fP"
@breif Called when data is read from a stream (overridden by subclasses)
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP the type of data the stream is handling 
.RE
.PP
\fBParameters\fP
.RS 4
\fIread_element\fP The element that was read from the stream 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::common::InputStreamEventHandler< uint8_t >\fP\&.
.PP
Definition at line 178 of file keyboard\&.cpp\&.
.PP
.nf
178                                                                {
179 
180     // 0 is a regular key, 1 is an extended code, 2 is an extended code with e1CodeBuffer
181     int keyType = 0;
182 
183     // Check if the key was released
184     bool released = (scan_code & 0x80) && (m_current_extended_code_1 || (scan_code != 0xe1)) && (m_next_is_extended_code_0 || (scan_code != 0xe0));
185 
186     // Clear the released bit
187     if (released)
188       scan_code &= ~0x80;
189 
190     // Set the e0Code flag to true
191     if (scan_code == 0xe0)
192     {
193       m_next_is_extended_code_0 = true;
194       return;
195     }
196 
197     // If e0Code is true, set keyType to 1 and reset e0Code
198     if (m_next_is_extended_code_0)
199     {
200         keyType = 1;
201         m_next_is_extended_code_0 = false;
202 
203         // Check if the scan_code represents a shift key and return (fake shift)
204         if ((KeyboardInterpreterEN_US::KeyCodeEN_US)scan_code == KeyboardInterpreterEN_US::leftShift || (KeyboardInterpreterEN_US::KeyCodeEN_US)scan_code == KeyboardInterpreterEN_US::rightShift)
205             return;
206     }
207 
208     // If the scan_code is 0xe1, set the e1Code flag to 1 and return
209     if (scan_code == 0xe1)
210     {
211        m_current_extended_code_1 = 1;
212        return;
213     }
214 
215     // If e1Code is 1, set e1Code to 2, store the scan_code in e1CodeBuffer, and return
216     if (m_current_extended_code_1 == 1)
217     {
218       m_current_extended_code_1 = 2;
219       m_extended_code_1_buffer = scan_code;
220       return;
221     }
222 
223     // If e1Code is 2, set keyType to 2, reset e1Code, and update e1CodeBuffer
224     if (m_current_extended_code_1 == 2)
225     {
226         keyType = 2;
227         m_current_extended_code_1 = 0;
228         m_extended_code_1_buffer |= (((uint16_t)scan_code) << 8);
229     }
230 
231     bool is_shifting = this ->m_keyboard_state\&.left_shift || this ->m_keyboard_state\&.right_shift;
232     bool should_be_upper_case = is_shifting != this ->m_keyboard_state\&.caps_lock;
233 
234 
235     // TODO: Probabbly a better way to do this (investigate when adding more keyboard layouts)
236     if(keyType == 0)
237     switch ((KeyCodeEN_US)scan_code) {
238 
239         // First row
240         case KeyCodeEN_US::escape:
241             onKeyRead(released, this ->m_keyboard_state, KeyCode::escape);
242             break;
243 
244         case KeyCodeEN_US::f1:
245             onKeyRead(released, this ->m_keyboard_state, KeyCode::f1);
246             break;
247 
248         case KeyCodeEN_US::f2:
249             onKeyRead(released, this ->m_keyboard_state, KeyCode::f2);
250             break;
251 
252         case KeyCodeEN_US::f3:
253             onKeyRead(released, this ->m_keyboard_state, KeyCode::f3);
254             break;
255 
256         case KeyCodeEN_US::f4:
257             onKeyRead(released, this ->m_keyboard_state, KeyCode::f4);
258             break;
259 
260         case KeyCodeEN_US::f5:
261             onKeyRead(released, this ->m_keyboard_state, KeyCode::f5);
262             break;
263 
264         case KeyCodeEN_US::f6:
265             onKeyRead(released, this ->m_keyboard_state, KeyCode::f6);
266             break;
267 
268         case KeyCodeEN_US::f7:
269             onKeyRead(released, this ->m_keyboard_state, KeyCode::f7);
270             break;
271 
272         case KeyCodeEN_US::f8:
273             onKeyRead(released, this ->m_keyboard_state, KeyCode::f8);
274             break;
275 
276         case KeyCodeEN_US::f9:
277             onKeyRead(released, this ->m_keyboard_state, KeyCode::f9);
278             break;
279 
280         case KeyCodeEN_US::f10:
281             onKeyRead(released, this ->m_keyboard_state, KeyCode::f10);
282             break;
283 
284         case KeyCodeEN_US::f11:
285             onKeyRead(released, this ->m_keyboard_state, KeyCode::f11);
286             break;
287 
288         case KeyCodeEN_US::f12:
289             onKeyRead(released, this ->m_keyboard_state, KeyCode::f12);
290             break;
291 
292         case KeyCodeEN_US::printScreen:
293             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock
294                         ? KeyCode::numberPadMultiply : KeyCode::printScreen);
295             break;
296 
297         case KeyCodeEN_US::scrollLock:
298             onKeyRead(released, this ->m_keyboard_state, KeyCode::scrollLock);
299             break;
300 
301         // Second row
302         case KeyCodeEN_US::squigglyLine:
303             onKeyRead(released, this ->m_keyboard_state,
304                     should_be_upper_case ? KeyCode::squigglyLine : KeyCode::slantedApostrophe);
305             break;
306 
307         case KeyCodeEN_US::one:
308             onKeyRead(released, this ->m_keyboard_state,
309                     should_be_upper_case ? KeyCode::exclamationMark : KeyCode::one);
310             break;
311 
312         case KeyCodeEN_US::two:
313             onKeyRead(released, this ->m_keyboard_state,
314                     should_be_upper_case ? KeyCode::atSign: KeyCode::two);
315             break;
316 
317         case KeyCodeEN_US::three:
318             onKeyRead(released, this ->m_keyboard_state,
319                     should_be_upper_case ? KeyCode::hash : KeyCode::three);
320             break;
321 
322         case KeyCodeEN_US::four:
323             onKeyRead(released, this ->m_keyboard_state,
324                     should_be_upper_case ? KeyCode::dollarSign : KeyCode::four);
325             break;
326 
327         case KeyCodeEN_US::five:
328             onKeyRead(released, this ->m_keyboard_state,
329                     should_be_upper_case ? KeyCode::percentSign : KeyCode::five);
330             break;
331 
332         case KeyCodeEN_US::six:
333             onKeyRead(released, this ->m_keyboard_state,
334                     should_be_upper_case ? KeyCode::powerSign : KeyCode::six);
335             break;
336 
337         case KeyCodeEN_US::seven:
338             onKeyRead(released, this ->m_keyboard_state,
339                     should_be_upper_case ? KeyCode::andSign : KeyCode::seven);
340             break;
341 
342         case KeyCodeEN_US::eight:
343             onKeyRead(released, this ->m_keyboard_state,
344                     should_be_upper_case ? KeyCode::multiply : KeyCode::eight);
345             break;
346 
347         case KeyCodeEN_US::nine:
348             onKeyRead(released, this ->m_keyboard_state,
349                     should_be_upper_case ? KeyCode::openBracket : KeyCode::nine);
350             break;
351 
352         case KeyCodeEN_US::zero:
353             onKeyRead(released, this ->m_keyboard_state,
354                     should_be_upper_case ? KeyCode::closeBracket : KeyCode::zero);
355             break;
356 
357         case KeyCodeEN_US::minus:
358             onKeyRead(released, this ->m_keyboard_state,
359                     should_be_upper_case ? KeyCode::underscore : KeyCode::minus);
360             break;
361 
362         case KeyCodeEN_US::equals:
363             onKeyRead(released, this ->m_keyboard_state,
364                     should_be_upper_case ? KeyCode::plus : KeyCode::equals);
365             break;
366 
367         case KeyCodeEN_US::backspace:
368             onKeyRead(released, this ->m_keyboard_state, KeyCode::backspace);
369             break;
370 
371         case KeyCodeEN_US::insert:
372             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock ? KeyCode::numberPadZero : KeyCode::insert);
373             break;
374 
375         case KeyCodeEN_US::home:
376             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock
377                         ? KeyCode::numberPadSeven  : KeyCode::home);
378             break;
379 
380         case KeyCodeEN_US::pageUp:
381             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock ? KeyCode::numberPadNine : KeyCode::pageUp);
382             break;
383 
384         case KeyCodeEN_US::numberPadLock:
385 
386             // Ensure this is not a repeat
387             if(!released){
388                 this ->m_keyboard_state\&.number_pad_lock = !this ->m_keyboard_state\&.number_pad_lock;
389             }
390             onKeyRead(released, this ->m_keyboard_state, KeyCode::numberPadLock);
391             break;
392 
393         case KeyCodeEN_US::numberPadForwardSlash:
394 
395             // Check if number pad lock is on
396             if(this ->m_keyboard_state\&.number_pad_lock){
397                 onKeyRead(released, this ->m_keyboard_state, KeyCode::numberPadForwardSlash);
398             }else{
399 
400                 // Normal Forward Slash
401                 onKeyRead(released, this ->m_keyboard_state,
402                           should_be_upper_case ? KeyCode::questionMark : KeyCode::forwardSlash);
403             }
404             break;
405 
406         // Number Pad Multiply is same as print screen
407 
408         case KeyCodeEN_US::numberPadMinus:
409             onKeyRead(released, this ->m_keyboard_state, KeyCode::numberPadMinus);
410             break;
411 
412         // Third row
413         case KeyCodeEN_US::tab:
414             onKeyRead(released, this ->m_keyboard_state, KeyCode::tab);
415             break;
416 
417         case KeyCodeEN_US::Q:
418             onKeyRead(released, this ->m_keyboard_state,
419                     should_be_upper_case ? KeyCode::Q : KeyCode::q);
420             break;
421 
422         case KeyCodeEN_US::W:
423             onKeyRead(released, this ->m_keyboard_state,
424                     should_be_upper_case ? KeyCode::W : KeyCode::w);
425             break;
426 
427         case KeyCodeEN_US::E:
428             onKeyRead(released, this ->m_keyboard_state,
429                     should_be_upper_case ? KeyCode::E : KeyCode::e);
430             break;
431 
432         case KeyCodeEN_US::R:
433             onKeyRead(released, this ->m_keyboard_state,
434                     should_be_upper_case ? KeyCode::R : KeyCode::r);
435             break;
436 
437         case KeyCodeEN_US::T:
438             onKeyRead(released, this ->m_keyboard_state,
439                     should_be_upper_case ? KeyCode::T : KeyCode::t);
440             break;
441 
442         case KeyCodeEN_US::Y:
443             onKeyRead(released, this ->m_keyboard_state,
444                     should_be_upper_case ? KeyCode::Y : KeyCode::y);
445             break;
446 
447         case KeyCodeEN_US::U:
448             onKeyRead(released, this ->m_keyboard_state,
449                     should_be_upper_case ? KeyCode::U : KeyCode::u);
450             break;
451 
452         case KeyCodeEN_US::I:
453             onKeyRead(released, this ->m_keyboard_state,
454                     should_be_upper_case ? KeyCode::I : KeyCode::i);
455             break;
456 
457         case KeyCodeEN_US::O:
458             onKeyRead(released, this ->m_keyboard_state,
459                     should_be_upper_case ? KeyCode::O : KeyCode::o);
460             break;
461 
462         case KeyCodeEN_US::P:
463             onKeyRead(released, this ->m_keyboard_state,
464                     should_be_upper_case ? KeyCode::P : KeyCode::p);
465             break;
466 
467         case KeyCodeEN_US::openSquareBracket:
468             onKeyRead(released, this ->m_keyboard_state,
469                     should_be_upper_case ? KeyCode::openCurlyBracket : KeyCode::openSquareBracket);
470             break;
471 
472         case KeyCodeEN_US::closeSquareBracket:
473             onKeyRead(released, this ->m_keyboard_state,
474                     should_be_upper_case ? KeyCode::closeCurlyBracket : KeyCode::closeSquareBracket);
475             break;
476 
477         case KeyCodeEN_US::backslash:
478             onKeyRead(released, this ->m_keyboard_state,
479                     should_be_upper_case ? KeyCode::lineThing : KeyCode::backslash);
480             break;
481 
482         case KeyCodeEN_US::deleteKey:
483             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock
484                         ? KeyCode::numberPadFullStop : KeyCode::deleteKey);
485             break;
486 
487         case KeyCodeEN_US::end:
488             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock ? KeyCode::numberPadOne : KeyCode::end);
489             break;
490 
491         case KeyCodeEN_US::pageDown:
492             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock
493                         ? KeyCode::numberPadThree : KeyCode::pageDown);
494             break;
495 
496         // Number pad 7 is same as home
497 
498         case KeyCodeEN_US::numberPadEight:
499             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock
500                         ? KeyCode::numberPadEight : KeyCode::upArrow);
501             break;
502 
503         // Number pad 9 is same as page up
504 
505         case KeyCodeEN_US::numberPadPlus:
506             onKeyRead(released, this ->m_keyboard_state, KeyCode::numberPadPlus);
507             break;
508 
509         // Fourth row
510 
511         case KeyCodeEN_US::capsLock:
512             // Ensure this is not a repeat
513             if(!released){
514                 this ->m_keyboard_state\&.caps_lock = !this ->m_keyboard_state\&.caps_lock;
515             }
516 
517             onKeyRead(released, this ->m_keyboard_state, KeyCode::capsLock);
518             break;
519 
520         case KeyCodeEN_US::A:
521             onKeyRead(released, this ->m_keyboard_state,
522                     should_be_upper_case ? KeyCode::A : KeyCode::a);
523             break;
524 
525         case KeyCodeEN_US::S:
526             onKeyRead(released, this ->m_keyboard_state,
527                     should_be_upper_case ? KeyCode::S : KeyCode::s);
528             break;
529 
530         case KeyCodeEN_US::D:
531             onKeyRead(released, this ->m_keyboard_state,
532                     should_be_upper_case ? KeyCode::D : KeyCode::d);
533             break;
534 
535         case KeyCodeEN_US::F:
536             onKeyRead(released, this ->m_keyboard_state,
537                     should_be_upper_case ? KeyCode::F : KeyCode::f);
538             break;
539 
540         case KeyCodeEN_US::G:
541             onKeyRead(released, this ->m_keyboard_state,
542                     should_be_upper_case ? KeyCode::G : KeyCode::g);
543             break;
544 
545         case KeyCodeEN_US::H:
546             onKeyRead(released, this ->m_keyboard_state,
547                     should_be_upper_case ? KeyCode::H : KeyCode::h);
548             break;
549 
550         case KeyCodeEN_US::J:
551             onKeyRead(released, this ->m_keyboard_state,
552                     should_be_upper_case ? KeyCode::J : KeyCode::j);
553             break;
554 
555         case KeyCodeEN_US::K:
556             onKeyRead(released, this ->m_keyboard_state,
557                     should_be_upper_case ? KeyCode::K : KeyCode::k);
558             break;
559 
560         case KeyCodeEN_US::L:
561             onKeyRead(released, this ->m_keyboard_state,
562                     should_be_upper_case ? KeyCode::L : KeyCode::l);
563             break;
564 
565         case KeyCodeEN_US::semicolon:
566             onKeyRead(released, this ->m_keyboard_state,
567                     should_be_upper_case ? KeyCode::colon : KeyCode::semicolon);
568             break;
569 
570         case KeyCodeEN_US::apostrophe:
571             onKeyRead(released, this ->m_keyboard_state,
572                     should_be_upper_case ? KeyCode::quotationMark : KeyCode::apostrophe);
573             break;
574 
575         case KeyCodeEN_US::enter:
576             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock
577                         ? KeyCode::numberPadEnter : KeyCode::enter);
578             break;
579 
580         case KeyCodeEN_US::numberPadFour:
581             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock ? KeyCode::numberPadFour : KeyCode::leftArrow);
582             break;
583 
584         case KeyCodeEN_US::numberPadFive:
585             onKeyRead(released, this ->m_keyboard_state, KeyCode::numberPadFive);
586             break;
587 
588         case KeyCodeEN_US::numberPadSix:
589             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock ? KeyCode::numberPadSix : KeyCode::rightArrow);
590             break;
591 
592         // Fifth row
593         case KeyCodeEN_US::leftShift:
594             this ->m_keyboard_state\&.left_shift = !this ->m_keyboard_state\&.left_shift;
595             onKeyRead(released, this ->m_keyboard_state, KeyCode::leftShift);
596             break;
597 
598         case KeyCodeEN_US::Z:
599             onKeyRead(released, this ->m_keyboard_state,
600                     should_be_upper_case ? KeyCode::Z : KeyCode::z);
601             break;
602 
603         case KeyCodeEN_US::X:
604             onKeyRead(released, this ->m_keyboard_state,
605                     should_be_upper_case ? KeyCode::X : KeyCode::x);
606             break;
607 
608         case KeyCodeEN_US::C:
609             onKeyRead(released, this ->m_keyboard_state,
610                     should_be_upper_case ? KeyCode::C : KeyCode::c);
611             break;
612 
613         case KeyCodeEN_US::V:
614             onKeyRead(released, this ->m_keyboard_state,
615                     should_be_upper_case ? KeyCode::V : KeyCode::v);
616             break;
617 
618         case KeyCodeEN_US::B:
619             onKeyRead(released, this ->m_keyboard_state,
620                     should_be_upper_case ? KeyCode::B : KeyCode::b);
621             break;
622 
623         case KeyCodeEN_US::N:
624             onKeyRead(released, this ->m_keyboard_state,
625                     should_be_upper_case ? KeyCode::N : KeyCode::n);
626             break;
627 
628         case KeyCodeEN_US::M:
629             onKeyRead(released, this ->m_keyboard_state,
630                     should_be_upper_case ? KeyCode::M : KeyCode::m);
631             break;
632 
633         case KeyCodeEN_US::comma:
634             onKeyRead(released, this ->m_keyboard_state,
635                     should_be_upper_case ? KeyCode::lessThan : KeyCode::comma);
636             break;
637 
638         case KeyCodeEN_US::fullStop:
639             onKeyRead(released, this ->m_keyboard_state,
640                     should_be_upper_case ? KeyCode::greaterThan : KeyCode::fullStop);
641             break;
642 
643         // Forward slash is same as number pad forward slash
644 
645         case KeyCodeEN_US::rightShift:
646             // Check if this is a repeat
647             if(!released){
648                 this ->m_keyboard_state\&.right_shift = !this ->m_keyboard_state\&.right_shift;
649             }
650 
651             onKeyRead(released, this ->m_keyboard_state, KeyCode::rightShift);
652             break;
653 
654         // Up Arrow is the same as number pad 8
655 
656         // Number pad 1 is the same as end
657 
658         case KeyCodeEN_US::numberPadTwo:
659             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock ? KeyCode::numberPadTwo : KeyCode::downArrow);
660             break;
661 
662         // Number pad 3 is the same as page down
663 
664         // Number pad enter is the same as enter
665 
666         // Sixth row
667         case KeyCodeEN_US::leftControl:
668             // Check if this is a repeat
669             if(!released){
670                 this ->m_keyboard_state\&.left_control = !this ->m_keyboard_state\&.left_control;
671                 this ->m_keyboard_state\&.right_control = !this ->m_keyboard_state\&.right_control;
672             }
673 
674             onKeyRead(released, this ->m_keyboard_state, KeyCode::leftControl);
675             break;
676 
677         case KeyCodeEN_US::leftOS:
678             onKeyRead(released, this ->m_keyboard_state, KeyCode::leftOS);
679             break;
680 
681         case KeyCodeEN_US::leftAlt:
682             // Check if this is a repeat
683             if(!released){
684                 this ->m_keyboard_state\&.left_alt = !this ->m_keyboard_state\&.left_alt;
685                 this ->m_keyboard_state\&.right_alt = !this ->m_keyboard_state\&.right_alt;
686             }
687 
688             onKeyRead(released, this ->m_keyboard_state, KeyCode::leftAlt);
689             break;
690 
691         case KeyCodeEN_US::space:
692             onKeyRead(released, this ->m_keyboard_state, KeyCode::space);
693             break;
694 
695         // Right Alt is the same as left alt
696 
697         // Right Control is the same as left control
698 
699         // Left Arrow is the same as number pad 4
700 
701         // Down Arrow is the same as number pad 2
702 
703         // Right Arrow is the same as number pad 6
704 
705         // Number pad 0 is the same as insert
706 
707         // Number pad full stop is the same as delete
708 
709         default:
710             break;
711         
712     }
713     
714 }
.fi
.PP
References MaxOS::drivers::peripherals::A, MaxOS::drivers::peripherals::a, MaxOS::drivers::peripherals::andSign, MaxOS::drivers::peripherals::apostrophe, MaxOS::drivers::peripherals::atSign, MaxOS::drivers::peripherals::B, MaxOS::drivers::peripherals::b, MaxOS::drivers::peripherals::backslash, MaxOS::drivers::peripherals::backspace, MaxOS::drivers::peripherals::C, MaxOS::drivers::peripherals::c, MaxOS::drivers::peripherals::capsLock, MaxOS::drivers::peripherals::closeBracket, MaxOS::drivers::peripherals::closeCurlyBracket, MaxOS::drivers::peripherals::closeSquareBracket, MaxOS::drivers::peripherals::colon, MaxOS::drivers::peripherals::comma, MaxOS::drivers::peripherals::D, MaxOS::drivers::peripherals::d, MaxOS::drivers::peripherals::deleteKey, MaxOS::drivers::peripherals::dollarSign, MaxOS::drivers::peripherals::downArrow, MaxOS::drivers::peripherals::E, MaxOS::drivers::peripherals::e, MaxOS::drivers::peripherals::eight, MaxOS::drivers::peripherals::end, MaxOS::drivers::peripherals::enter, MaxOS::drivers::peripherals::equals, MaxOS::drivers::peripherals::escape, MaxOS::drivers::peripherals::exclamationMark, MaxOS::drivers::peripherals::F, MaxOS::drivers::peripherals::f, MaxOS::drivers::peripherals::f1, MaxOS::drivers::peripherals::f10, MaxOS::drivers::peripherals::f11, MaxOS::drivers::peripherals::f12, MaxOS::drivers::peripherals::f2, MaxOS::drivers::peripherals::f3, MaxOS::drivers::peripherals::f4, MaxOS::drivers::peripherals::f5, MaxOS::drivers::peripherals::f6, MaxOS::drivers::peripherals::f7, MaxOS::drivers::peripherals::f8, MaxOS::drivers::peripherals::f9, MaxOS::drivers::peripherals::five, MaxOS::drivers::peripherals::forwardSlash, MaxOS::drivers::peripherals::four, MaxOS::drivers::peripherals::fullStop, MaxOS::drivers::peripherals::G, MaxOS::drivers::peripherals::g, MaxOS::drivers::peripherals::greaterThan, MaxOS::drivers::peripherals::H, MaxOS::drivers::peripherals::h, MaxOS::drivers::peripherals::hash, MaxOS::drivers::peripherals::home, MaxOS::drivers::peripherals::I, MaxOS::drivers::peripherals::i, MaxOS::drivers::peripherals::insert, MaxOS::drivers::peripherals::J, MaxOS::drivers::peripherals::j, MaxOS::drivers::peripherals::K, MaxOS::drivers::peripherals::k, MaxOS::drivers::peripherals::l, MaxOS::drivers::peripherals::L, MaxOS::drivers::peripherals::leftAlt, MaxOS::drivers::peripherals::leftArrow, MaxOS::drivers::peripherals::leftControl, MaxOS::drivers::peripherals::leftOS, MaxOS::drivers::peripherals::leftShift, leftShift, MaxOS::drivers::peripherals::lessThan, MaxOS::drivers::peripherals::lineThing, MaxOS::drivers::peripherals::M, MaxOS::drivers::peripherals::m, MaxOS::drivers::peripherals::KeyboardInterpreter::m_current_extended_code_1, MaxOS::drivers::peripherals::KeyboardInterpreter::m_extended_code_1_buffer, MaxOS::drivers::peripherals::KeyboardInterpreter::m_keyboard_state, MaxOS::drivers::peripherals::KeyboardInterpreter::m_next_is_extended_code_0, MaxOS::drivers::peripherals::minus, MaxOS::drivers::peripherals::multiply, MaxOS::drivers::peripherals::N, MaxOS::drivers::peripherals::n, MaxOS::drivers::peripherals::nine, MaxOS::drivers::peripherals::KeyboardState::number_pad_lock, MaxOS::drivers::peripherals::numberPadEight, MaxOS::drivers::peripherals::numberPadEnter, MaxOS::drivers::peripherals::numberPadFive, MaxOS::drivers::peripherals::numberPadForwardSlash, MaxOS::drivers::peripherals::numberPadFour, MaxOS::drivers::peripherals::numberPadFullStop, MaxOS::drivers::peripherals::numberPadLock, MaxOS::drivers::peripherals::numberPadMinus, MaxOS::drivers::peripherals::numberPadMultiply, MaxOS::drivers::peripherals::numberPadNine, MaxOS::drivers::peripherals::numberPadOne, MaxOS::drivers::peripherals::numberPadPlus, MaxOS::drivers::peripherals::numberPadSeven, MaxOS::drivers::peripherals::numberPadSix, MaxOS::drivers::peripherals::numberPadThree, MaxOS::drivers::peripherals::numberPadTwo, MaxOS::drivers::peripherals::numberPadZero, MaxOS::drivers::peripherals::O, MaxOS::drivers::peripherals::o, MaxOS::drivers::peripherals::one, MaxOS::drivers::peripherals::KeyboardInterpreter::onKeyRead(), MaxOS::drivers::peripherals::openBracket, MaxOS::drivers::peripherals::openCurlyBracket, MaxOS::drivers::peripherals::openSquareBracket, MaxOS::drivers::peripherals::P, MaxOS::drivers::peripherals::p, MaxOS::drivers::peripherals::pageDown, MaxOS::drivers::peripherals::pageUp, MaxOS::drivers::peripherals::percentSign, MaxOS::drivers::peripherals::plus, MaxOS::drivers::peripherals::powerSign, MaxOS::drivers::peripherals::printScreen, MaxOS::drivers::peripherals::Q, MaxOS::drivers::peripherals::q, MaxOS::drivers::peripherals::questionMark, MaxOS::drivers::peripherals::quotationMark, MaxOS::drivers::peripherals::r, MaxOS::drivers::peripherals::R, MaxOS::drivers::peripherals::rightArrow, MaxOS::drivers::peripherals::rightShift, rightShift, MaxOS::drivers::peripherals::S, MaxOS::drivers::peripherals::s, MaxOS::drivers::peripherals::scrollLock, MaxOS::drivers::peripherals::semicolon, MaxOS::drivers::peripherals::seven, MaxOS::drivers::peripherals::six, MaxOS::drivers::peripherals::slantedApostrophe, MaxOS::drivers::peripherals::space, MaxOS::drivers::peripherals::squigglyLine, MaxOS::drivers::peripherals::T, MaxOS::drivers::peripherals::t, MaxOS::drivers::peripherals::tab, MaxOS::drivers::peripherals::three, MaxOS::drivers::peripherals::two, MaxOS::drivers::peripherals::u, MaxOS::drivers::peripherals::U, MaxOS::drivers::peripherals::underscore, MaxOS::drivers::peripherals::upArrow, MaxOS::drivers::peripherals::v, MaxOS::drivers::peripherals::V, MaxOS::drivers::peripherals::W, MaxOS::drivers::peripherals::w, MaxOS::drivers::peripherals::x, MaxOS::drivers::peripherals::X, MaxOS::drivers::peripherals::y, MaxOS::drivers::peripherals::Y, MaxOS::drivers::peripherals::Z, MaxOS::drivers::peripherals::z, and MaxOS::drivers::peripherals::zero\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
