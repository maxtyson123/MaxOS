.TH "maxOS::drivers::peripherals::KeyboardInterpreterEN_US" 3 "Fri Jan 5 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
maxOS::drivers::peripherals::KeyboardInterpreterEN_US \- Interprets the scan codes from the keyboard for the EN_US keyboard layout\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <keyboard\&.h>\fP
.PP
Inherits \fBmaxOS::drivers::peripherals::KeyboardInterpreter\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBKeyCodeEN_US\fP { \fBescape\fP = 0x01, \fBf1\fP = 0x3B, \fBf2\fP = 0x3C, \fBf3\fP = 0x3D, \fBf4\fP = 0x3E, \fBf5\fP = 0x3F, \fBf6\fP = 0x40, \fBf7\fP = 0x41, \fBf8\fP = 0x42, \fBf9\fP = 0x43, \fBf10\fP = 0x44, \fBf11\fP = 0x57, \fBf12\fP = 0x58, \fBprintScreen\fP = 0x37, \fBscrollLock\fP = 0x46, \fBpauseBreak\fP = 0x45, \fBsquigglyLine\fP = 0x29, \fBone\fP = 0x02, \fBtwo\fP = 0x03, \fBthree\fP = 0x04, \fBfour\fP = 0x05, \fBfive\fP = 0x06, \fBsix\fP = 0x07, \fBseven\fP = 0x08, \fBeight\fP = 0x09, \fBnine\fP = 0x0A, \fBzero\fP = 0x0B, \fBminus\fP = 0x0C, \fBequals\fP = 0x0D, \fBbackspace\fP = 0x0E, \fBinsert\fP = 0x52, \fBhome\fP = 0x47, \fBpageUp\fP = 0x49, \fBnumberPadLock\fP = 0x45, \fBnumberPadForwardSlash\fP = 0x35, \fBnumberPadMultiply\fP = 0x37, \fBnumberPadMinus\fP = 0x4A, \fBtab\fP = 0x0F, \fBQ\fP = 0x10, \fBW\fP = 0x11, \fBE\fP = 0x12, \fBR\fP = 0x13, \fBT\fP = 0x14, \fBY\fP = 0x15, \fBU\fP = 0x16, \fBI\fP = 0x17, \fBO\fP = 0x18, \fBP\fP = 0x19, \fBopenSquareBracket\fP = 0x1A, \fBcloseSquareBracket\fP = 0x1B, \fBbackslash\fP = 0x2B, \fBdeleteKey\fP = 0x53, \fBend\fP = 0x4F, \fBpageDown\fP = 0x51, \fBnumberPadSeven\fP = 0x47, \fBnumberPadEight\fP = 0x48, \fBnumberPadNine\fP = 0x49, \fBnumberPadPlus\fP = 0x4E, \fBcapsLock\fP = 0x3A, \fBA\fP = 0x1E, \fBS\fP = 0x1F, \fBD\fP = 0x20, \fBF\fP = 0x21, \fBG\fP = 0x22, \fBH\fP = 0x23, \fBJ\fP = 0x24, \fBK\fP = 0x25, \fBL\fP = 0x26, \fBsemicolon\fP = 0x27, \fBapostrophe\fP = 0x28, \fBenter\fP = 0x1C, \fBnumberPadFour\fP = 0x4B, \fBnumberPadFive\fP = 0x4C, \fBnumberPadSix\fP = 0x4D, \fBleftShift\fP = 0x2A, \fBZ\fP = 0x2C, \fBX\fP = 0x2D, \fBC\fP = 0x2E, \fBV\fP = 0x2F, \fBB\fP = 0x30, \fBN\fP = 0x31, \fBM\fP = 0x32, \fBcomma\fP = 0x33, \fBfullStop\fP = 0x34, \fBforwardSlash\fP = 0x35, \fBrightShift\fP = 0x36, \fBupArrow\fP = 0x48, \fBnumberPadOne\fP = 0x4F, \fBnumberPadTwo\fP = 0x50, \fBnumberPadThree\fP = 0x51, \fBnumberPadEnter\fP = 0x1C, \fBleftControl\fP = 0x1D, \fBleftOS\fP = 0x5B, \fBleftAlt\fP = 0x38, \fBspace\fP = 0x39, \fBrightAlt\fP = 0x38, \fBfunction\fP = 0x5D, \fBrightControl\fP = 0x1D, \fBleftArrow\fP = 0x4B, \fBdownArrow\fP = 0x50, \fBrightArrow\fP = 0x4D, \fBnumberPadZero\fP = 0x52, \fBnumberPadFullStop\fP = 0x53 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBKeyboardInterpreterEN_US\fP ()"
.br
.RI "___Interpreter EN_US___ "
.ti -1c
.RI "\fB~KeyboardInterpreterEN_US\fP ()"
.br
.ti -1c
.RI "void \fBon_stream_read\fP (uint8_t scan_code) final"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Interprets the scan codes from the keyboard for the EN_US keyboard layout\&. 
.PP
Definition at line 290 of file keyboard\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBmaxOS::drivers::peripherals::KeyboardInterpreterEN_US::KeyCodeEN_US\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIescape \fP\fP
.TP
\fB\fIf1 \fP\fP
.TP
\fB\fIf2 \fP\fP
.TP
\fB\fIf3 \fP\fP
.TP
\fB\fIf4 \fP\fP
.TP
\fB\fIf5 \fP\fP
.TP
\fB\fIf6 \fP\fP
.TP
\fB\fIf7 \fP\fP
.TP
\fB\fIf8 \fP\fP
.TP
\fB\fIf9 \fP\fP
.TP
\fB\fIf10 \fP\fP
.TP
\fB\fIf11 \fP\fP
.TP
\fB\fIf12 \fP\fP
.TP
\fB\fIprintScreen \fP\fP
.TP
\fB\fIscrollLock \fP\fP
.TP
\fB\fIpauseBreak \fP\fP
.TP
\fB\fIsquigglyLine \fP\fP
.TP
\fB\fIone \fP\fP
.TP
\fB\fItwo \fP\fP
.TP
\fB\fIthree \fP\fP
.TP
\fB\fIfour \fP\fP
.TP
\fB\fIfive \fP\fP
.TP
\fB\fIsix \fP\fP
.TP
\fB\fIseven \fP\fP
.TP
\fB\fIeight \fP\fP
.TP
\fB\fInine \fP\fP
.TP
\fB\fIzero \fP\fP
.TP
\fB\fIminus \fP\fP
.TP
\fB\fIequals \fP\fP
.TP
\fB\fIbackspace \fP\fP
.TP
\fB\fIinsert \fP\fP
.TP
\fB\fIhome \fP\fP
.TP
\fB\fIpageUp \fP\fP
.TP
\fB\fInumberPadLock \fP\fP
.TP
\fB\fInumberPadForwardSlash \fP\fP
.TP
\fB\fInumberPadMultiply \fP\fP
.TP
\fB\fInumberPadMinus \fP\fP
.TP
\fB\fItab \fP\fP
.TP
\fB\fIQ \fP\fP
.TP
\fB\fIW \fP\fP
.TP
\fB\fIE \fP\fP
.TP
\fB\fIR \fP\fP
.TP
\fB\fIT \fP\fP
.TP
\fB\fIY \fP\fP
.TP
\fB\fIU \fP\fP
.TP
\fB\fII \fP\fP
.TP
\fB\fIO \fP\fP
.TP
\fB\fIP \fP\fP
.TP
\fB\fIopenSquareBracket \fP\fP
.TP
\fB\fIcloseSquareBracket \fP\fP
.TP
\fB\fIbackslash \fP\fP
.TP
\fB\fIdeleteKey \fP\fP
.TP
\fB\fIend \fP\fP
.TP
\fB\fIpageDown \fP\fP
.TP
\fB\fInumberPadSeven \fP\fP
.TP
\fB\fInumberPadEight \fP\fP
.TP
\fB\fInumberPadNine \fP\fP
.TP
\fB\fInumberPadPlus \fP\fP
.TP
\fB\fIcapsLock \fP\fP
.TP
\fB\fIA \fP\fP
.TP
\fB\fIS \fP\fP
.TP
\fB\fID \fP\fP
.TP
\fB\fIF \fP\fP
.TP
\fB\fIG \fP\fP
.TP
\fB\fIH \fP\fP
.TP
\fB\fIJ \fP\fP
.TP
\fB\fIK \fP\fP
.TP
\fB\fIL \fP\fP
.TP
\fB\fIsemicolon \fP\fP
.TP
\fB\fIapostrophe \fP\fP
.TP
\fB\fIenter \fP\fP
.TP
\fB\fInumberPadFour \fP\fP
.TP
\fB\fInumberPadFive \fP\fP
.TP
\fB\fInumberPadSix \fP\fP
.TP
\fB\fIleftShift \fP\fP
.TP
\fB\fIZ \fP\fP
.TP
\fB\fIX \fP\fP
.TP
\fB\fIC \fP\fP
.TP
\fB\fIV \fP\fP
.TP
\fB\fIB \fP\fP
.TP
\fB\fIN \fP\fP
.TP
\fB\fIM \fP\fP
.TP
\fB\fIcomma \fP\fP
.TP
\fB\fIfullStop \fP\fP
.TP
\fB\fIforwardSlash \fP\fP
.TP
\fB\fIrightShift \fP\fP
.TP
\fB\fIupArrow \fP\fP
.TP
\fB\fInumberPadOne \fP\fP
.TP
\fB\fInumberPadTwo \fP\fP
.TP
\fB\fInumberPadThree \fP\fP
.TP
\fB\fInumberPadEnter \fP\fP
.TP
\fB\fIleftControl \fP\fP
.TP
\fB\fIleftOS \fP\fP
.TP
\fB\fIleftAlt \fP\fP
.TP
\fB\fIspace \fP\fP
.TP
\fB\fIrightAlt \fP\fP
.TP
\fB\fIfunction \fP\fP
.TP
\fB\fIrightControl \fP\fP
.TP
\fB\fIleftArrow \fP\fP
.TP
\fB\fIdownArrow \fP\fP
.TP
\fB\fIrightArrow \fP\fP
.TP
\fB\fInumberPadZero \fP\fP
.TP
\fB\fInumberPadFullStop \fP\fP
.PP
Definition at line 294 of file keyboard\&.h\&.
.PP
.nf
294                                       {
295                         // First Row
296                         escape      = 0x01,
297                         f1          = 0x3B,
298                         f2          = 0x3C,
299                         f3          = 0x3D,
300                         f4          = 0x3E,
301                         f5          = 0x3F,
302                         f6          = 0x40,
303                         f7          = 0x41,
304                         f8          = 0x42,
305                         f9          = 0x43,
306                         f10         = 0x44,
307                         f11         = 0x57,
308                         f12         = 0x58,
309                         printScreen = 0x37,
310                         scrollLock  = 0x46,
311                         pauseBreak  = 0x45,
312 
313                         // Second Row
314                         squigglyLine            = 0x29,
315                         one                     = 0x02,
316                         two                     = 0x03,
317                         three                   = 0x04,
318                         four                    = 0x05,
319                         five                    = 0x06,
320                         six                     = 0x07,
321                         seven                   = 0x08,
322                         eight                   = 0x09,
323                         nine                    = 0x0A,
324                         zero                    = 0x0B,
325                         minus                   = 0x0C,
326                         equals                  = 0x0D,
327                         backspace               = 0x0E,
328                         insert                  = 0x52,
329                         home                    = 0x47,
330                         pageUp                  = 0x49,
331                         numberPadLock           = 0x45,
332                         numberPadForwardSlash   = 0x35,
333                         numberPadMultiply       = 0x37,
334                         numberPadMinus          = 0x4A,
335 
336                         // Third Row
337                         tab                 = 0x0F,
338                         Q                   = 0x10,
339                         W                   = 0x11,
340                         E                   = 0x12,
341                         R                   = 0x13,
342                         T                   = 0x14,
343                         Y                   = 0x15,
344                         U                   = 0x16,
345                         I                   = 0x17,
346                         O                   = 0x18,
347                         P                   = 0x19,
348                         openSquareBracket   = 0x1A,
349                         closeSquareBracket  = 0x1B,
350                         backslash           = 0x2B,
351                         deleteKey           = 0x53,
352                         end                 = 0x4F,
353                         pageDown            = 0x51,
354                         numberPadSeven      = 0x47,
355                         numberPadEight      = 0x48,
356                         numberPadNine       = 0x49,
357                         numberPadPlus       = 0x4E,
358 
359                         // Fourth Row
360                         capsLock        = 0x3A,
361                         A               = 0x1E,
362                         S               = 0x1F,
363                         D               = 0x20,
364                         F               = 0x21,
365                         G               = 0x22,
366                         H               = 0x23,
367                         J               = 0x24,
368                         K               = 0x25,
369                         L               = 0x26,
370                         semicolon       = 0x27,
371                         apostrophe      = 0x28,
372                         enter           = 0x1C,
373                         numberPadFour   = 0x4B,
374                         numberPadFive   = 0x4C,
375                         numberPadSix    = 0x4D,
376 
377                         // Fifth Row
378                         leftShift       = 0x2A,
379                         Z               = 0x2C,
380                         X               = 0x2D,
381                         C               = 0x2E,
382                         V               = 0x2F,
383                         B               = 0x30,
384                         N               = 0x31,
385                         M               = 0x32,
386                         comma           = 0x33,
387                         fullStop          = 0x34,
388                         forwardSlash    = 0x35,
389                         rightShift      = 0x36,
390                         upArrow         = 0x48,
391                         numberPadOne    = 0x4F,
392                         numberPadTwo    = 0x50,
393                         numberPadThree  = 0x51,
394                         numberPadEnter  = 0x1C,
395 
396                         // Sixth Row
397                         leftControl     = 0x1D,
398                         leftOS          = 0x5B,
399                         leftAlt         = 0x38,
400                         space           = 0x39,
401                         rightAlt        = 0x38,
402                         function        = 0x5D,
403                         rightControl    = 0x1D,
404                         leftArrow       = 0x4B,
405                         downArrow       = 0x50,
406                         rightArrow      = 0x4D,
407                         numberPadZero   = 0x52,
408                         numberPadFullStop = 0x53
409                     };
.fi
.SH "Constructor & Destructor Documentation"
.PP 
.SS "KeyboardInterpreterEN_US::KeyboardInterpreterEN_US ()"

.PP
___Interpreter EN_US___ 
.PP
Definition at line 168 of file keyboard\&.cpp\&.
.PP
.nf
169 : KeyboardInterpreter()
170 {
171 
172 }
.fi
.SS "KeyboardInterpreterEN_US::~KeyboardInterpreterEN_US ()"

.PP
Definition at line 174 of file keyboard\&.cpp\&.
.PP
.nf
174                                                     {
175 
176 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void KeyboardInterpreterEN_US::on_stream_read (uint8_t read_element)\fC [final]\fP, \fC [virtual]\fP"
@breif Called when data is read from a stream (overridden by subclasses)
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP the type of data the stream is handling 
.RE
.PP
\fBParameters\fP
.RS 4
\fIread_element\fP The element that was read from the stream 
.RE
.PP

.PP
Reimplemented from \fBmaxOS::common::InputStreamEventHandler< uint8_t >\fP\&.
.PP
Definition at line 178 of file keyboard\&.cpp\&.
.PP
.nf
178                                                                {
179 
180     // 0 is a regular key, 1 is an extended code, 2 is an extended code with e1CodeBuffer
181     int keyType = 0;
182 
183     // Check if the key was released
184     bool released = (scan_code & 0x80) && (m_current_extended_code_1 || (scan_code != 0xe1)) && (m_next_is_extended_code_0 || (scan_code != 0xe0));
185 
186     // Clear the released bit
187     if (released)
188       scan_code &= ~0x80;
189 
190     // Set the e0Code flag to true
191     if (scan_code == 0xe0)
192     {
193       m_next_is_extended_code_0 = true;
194       return;
195     }
196 
197     // If e0Code is true, set keyType to 1 and reset e0Code
198     if (m_next_is_extended_code_0)
199     {
200         keyType = 1;
201         m_next_is_extended_code_0 = false;
202 
203         // Check if the scan_code represents a shift key and return (fake shift)
204         if ((KeyboardInterpreterEN_US::KeyCodeEN_US)scan_code == KeyboardInterpreterEN_US::leftShift || (KeyboardInterpreterEN_US::KeyCodeEN_US)scan_code == KeyboardInterpreterEN_US::rightShift)
205             return;
206     }
207 
208     // If the scan_code is 0xe1, set the e1Code flag to 1 and return
209     if (scan_code == 0xe1)
210     {
211        m_current_extended_code_1 = 1;
212        return;
213     }
214 
215     // If e1Code is 1, set e1Code to 2, store the scan_code in e1CodeBuffer, and return
216     if (m_current_extended_code_1 == 1)
217     {
218       m_current_extended_code_1 = 2;
219       m_extended_code_1_buffer = scan_code;
220       return;
221     }
222 
223     // If e1Code is 2, set keyType to 2, reset e1Code, and update e1CodeBuffer
224     if (m_current_extended_code_1 == 2)
225     {
226         keyType = 2;
227         m_current_extended_code_1 = 0;
228         m_extended_code_1_buffer |= (((uint16_t)scan_code) << 8);
229     }
230 
231     bool is_shifting = this ->m_keyboard_state\&.left_shift || this ->m_keyboard_state\&.right_shift;
232     bool should_be_upper_case = is_shifting != this ->m_keyboard_state\&.caps_lock;
233 
234 
235     // TODO: Probabbly a better way to do this
236     if(keyType == 0)
237     switch ((KeyCodeEN_US)scan_code) {
238 
239         // First row
240         case KeyCodeEN_US::escape:
241             onKeyRead(released, this ->m_keyboard_state, KeyCode::escape);
242             break;
243 
244         case KeyCodeEN_US::f1:
245             onKeyRead(released, this ->m_keyboard_state, KeyCode::f1);
246             break;
247 
248         case KeyCodeEN_US::f2:
249             onKeyRead(released, this ->m_keyboard_state, KeyCode::f2);
250             break;
251 
252         case KeyCodeEN_US::f3:
253             onKeyRead(released, this ->m_keyboard_state, KeyCode::f3);
254             break;
255 
256         case KeyCodeEN_US::f4:
257             onKeyRead(released, this ->m_keyboard_state, KeyCode::f4);
258             break;
259 
260         case KeyCodeEN_US::f5:
261             onKeyRead(released, this ->m_keyboard_state, KeyCode::f5);
262             break;
263 
264         case KeyCodeEN_US::f6:
265             onKeyRead(released, this ->m_keyboard_state, KeyCode::f6);
266             break;
267 
268         case KeyCodeEN_US::f7:
269             onKeyRead(released, this ->m_keyboard_state, KeyCode::f7);
270             break;
271 
272         case KeyCodeEN_US::f8:
273             onKeyRead(released, this ->m_keyboard_state, KeyCode::f8);
274             break;
275 
276         case KeyCodeEN_US::f9:
277             onKeyRead(released, this ->m_keyboard_state, KeyCode::f9);
278             break;
279 
280         case KeyCodeEN_US::f10:
281             onKeyRead(released, this ->m_keyboard_state, KeyCode::f10);
282             break;
283 
284         case KeyCodeEN_US::f11:
285             onKeyRead(released, this ->m_keyboard_state, KeyCode::f11);
286             break;
287 
288         case KeyCodeEN_US::f12:
289             onKeyRead(released, this ->m_keyboard_state, KeyCode::f12);
290             break;
291 
292         case KeyCodeEN_US::printScreen:
293             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock
294                         ? KeyCode::numberPadMultiply : KeyCode::printScreen);
295             break;
296 
297         case KeyCodeEN_US::scrollLock:
298             onKeyRead(released, this ->m_keyboard_state, KeyCode::scrollLock);
299             break;
300 
301         /*
302          * TODO: Implement pause/break, it conflicts with numlock, I prefer numlock so that is why it is not implemented
303         case KeyCodeEN_US::pauseBreak:
304             onKeyRead(released, this -> m_keyboard_state, KeyCode::pauseBreak);
305             break;
306         */
307 
308         // Second row
309         case KeyCodeEN_US::squigglyLine:
310             onKeyRead(released, this ->m_keyboard_state,
311                     should_be_upper_case ? KeyCode::squigglyLine : KeyCode::slantedApostrophe);
312             break;
313 
314         case KeyCodeEN_US::one:
315             onKeyRead(released, this ->m_keyboard_state,
316                     should_be_upper_case ? KeyCode::exclamationMark : KeyCode::one);
317             break;
318 
319         case KeyCodeEN_US::two:
320             onKeyRead(released, this ->m_keyboard_state,
321                     should_be_upper_case ? KeyCode::atSign: KeyCode::two);
322             break;
323 
324         case KeyCodeEN_US::three:
325             onKeyRead(released, this ->m_keyboard_state,
326                     should_be_upper_case ? KeyCode::hash : KeyCode::three);
327             break;
328 
329         case KeyCodeEN_US::four:
330             onKeyRead(released, this ->m_keyboard_state,
331                     should_be_upper_case ? KeyCode::dollarSign : KeyCode::four);
332             break;
333 
334         case KeyCodeEN_US::five:
335             onKeyRead(released, this ->m_keyboard_state,
336                     should_be_upper_case ? KeyCode::percentSign : KeyCode::five);
337             break;
338 
339         case KeyCodeEN_US::six:
340             onKeyRead(released, this ->m_keyboard_state,
341                     should_be_upper_case ? KeyCode::powerSign : KeyCode::six);
342             break;
343 
344         case KeyCodeEN_US::seven:
345             onKeyRead(released, this ->m_keyboard_state,
346                     should_be_upper_case ? KeyCode::andSign : KeyCode::seven);
347             break;
348 
349         case KeyCodeEN_US::eight:
350             onKeyRead(released, this ->m_keyboard_state,
351                     should_be_upper_case ? KeyCode::multiply : KeyCode::eight);
352             break;
353 
354         case KeyCodeEN_US::nine:
355             onKeyRead(released, this ->m_keyboard_state,
356                     should_be_upper_case ? KeyCode::openBracket : KeyCode::nine);
357             break;
358 
359         case KeyCodeEN_US::zero:
360             onKeyRead(released, this ->m_keyboard_state,
361                     should_be_upper_case ? KeyCode::closeBracket : KeyCode::zero);
362             break;
363 
364         case KeyCodeEN_US::minus:
365             onKeyRead(released, this ->m_keyboard_state,
366                     should_be_upper_case ? KeyCode::underscore : KeyCode::minus);
367             break;
368 
369         case KeyCodeEN_US::equals:
370             onKeyRead(released, this ->m_keyboard_state,
371                     should_be_upper_case ? KeyCode::plus : KeyCode::equals);
372             break;
373 
374         case KeyCodeEN_US::backspace:
375             onKeyRead(released, this ->m_keyboard_state, KeyCode::backspace);
376             break;
377 
378         case KeyCodeEN_US::insert:
379             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock ? KeyCode::numberPadZero : KeyCode::insert);
380             break;
381 
382         case KeyCodeEN_US::home:
383             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock
384                         ? KeyCode::numberPadSeven  : KeyCode::home);
385             break;
386 
387         case KeyCodeEN_US::pageUp:
388             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock ? KeyCode::numberPadNine : KeyCode::pageUp);
389             break;
390 
391         case KeyCodeEN_US::numberPadLock:
392 
393             // Ensure this is not a repeat
394             if(!released){
395                 this ->m_keyboard_state\&.number_pad_lock = !this ->m_keyboard_state\&.number_pad_lock;
396             }
397             onKeyRead(released, this ->m_keyboard_state, KeyCode::numberPadLock);
398             break;
399 
400         case KeyCodeEN_US::numberPadForwardSlash:
401 
402             // Check if number pad lock is on
403             if(this ->m_keyboard_state\&.number_pad_lock){
404                 onKeyRead(released, this ->m_keyboard_state, KeyCode::numberPadForwardSlash);
405             }else{
406 
407                 // Normal Forward Slash
408                 onKeyRead(released, this ->m_keyboard_state,
409                           should_be_upper_case ? KeyCode::questionMark : KeyCode::forwardSlash);
410             }
411             break;
412 
413         // Number Pad Multiply is same as print screen
414 
415         case KeyCodeEN_US::numberPadMinus:
416             onKeyRead(released, this ->m_keyboard_state, KeyCode::numberPadMinus);
417             break;
418 
419         // Third row
420         case KeyCodeEN_US::tab:
421             onKeyRead(released, this ->m_keyboard_state, KeyCode::tab);
422             break;
423 
424         case KeyCodeEN_US::Q:
425             onKeyRead(released, this ->m_keyboard_state,
426                     should_be_upper_case ? KeyCode::Q : KeyCode::q);
427             break;
428 
429         case KeyCodeEN_US::W:
430             onKeyRead(released, this ->m_keyboard_state,
431                     should_be_upper_case ? KeyCode::W : KeyCode::w);
432             break;
433 
434         case KeyCodeEN_US::E:
435             onKeyRead(released, this ->m_keyboard_state,
436                     should_be_upper_case ? KeyCode::E : KeyCode::e);
437             break;
438 
439         case KeyCodeEN_US::R:
440             onKeyRead(released, this ->m_keyboard_state,
441                     should_be_upper_case ? KeyCode::R : KeyCode::r);
442             break;
443 
444         case KeyCodeEN_US::T:
445             onKeyRead(released, this ->m_keyboard_state,
446                     should_be_upper_case ? KeyCode::T : KeyCode::t);
447             break;
448 
449         case KeyCodeEN_US::Y:
450             onKeyRead(released, this ->m_keyboard_state,
451                     should_be_upper_case ? KeyCode::Y : KeyCode::y);
452             break;
453 
454         case KeyCodeEN_US::U:
455             onKeyRead(released, this ->m_keyboard_state,
456                     should_be_upper_case ? KeyCode::U : KeyCode::u);
457             break;
458 
459         case KeyCodeEN_US::I:
460             onKeyRead(released, this ->m_keyboard_state,
461                     should_be_upper_case ? KeyCode::I : KeyCode::i);
462             break;
463 
464         case KeyCodeEN_US::O:
465             onKeyRead(released, this ->m_keyboard_state,
466                     should_be_upper_case ? KeyCode::O : KeyCode::o);
467             break;
468 
469         case KeyCodeEN_US::P:
470             onKeyRead(released, this ->m_keyboard_state,
471                     should_be_upper_case ? KeyCode::P : KeyCode::p);
472             break;
473 
474         case KeyCodeEN_US::openSquareBracket:
475             onKeyRead(released, this ->m_keyboard_state,
476                     should_be_upper_case ? KeyCode::openCurlyBracket : KeyCode::openSquareBracket);
477             break;
478 
479         case KeyCodeEN_US::closeSquareBracket:
480             onKeyRead(released, this ->m_keyboard_state,
481                     should_be_upper_case ? KeyCode::closeCurlyBracket : KeyCode::closeSquareBracket);
482             break;
483 
484         case KeyCodeEN_US::backslash:
485             onKeyRead(released, this ->m_keyboard_state,
486                     should_be_upper_case ? KeyCode::lineThing : KeyCode::backslash);
487             break;
488 
489         case KeyCodeEN_US::deleteKey:
490             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock
491                         ? KeyCode::numberPadFullStop : KeyCode::deleteKey);
492             break;
493 
494         case KeyCodeEN_US::end:
495             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock ? KeyCode::numberPadOne : KeyCode::end);
496             break;
497 
498         case KeyCodeEN_US::pageDown:
499             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock
500                         ? KeyCode::numberPadThree : KeyCode::pageDown);
501             break;
502 
503         // Number pad 7 is same as home
504 
505         case KeyCodeEN_US::numberPadEight:
506             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock
507                         ? KeyCode::numberPadEight : KeyCode::upArrow);
508             break;
509 
510         // Number pad 9 is same as page up
511 
512         case KeyCodeEN_US::numberPadPlus:
513             onKeyRead(released, this ->m_keyboard_state, KeyCode::numberPadPlus);
514             break;
515 
516         // Fourth row
517 
518         case KeyCodeEN_US::capsLock:
519             // Ensure this is not a repeat
520             if(!released){
521                 this ->m_keyboard_state\&.caps_lock = !this ->m_keyboard_state\&.caps_lock;
522             }
523 
524             onKeyRead(released, this ->m_keyboard_state, KeyCode::capsLock);
525             break;
526 
527         case KeyCodeEN_US::A:
528             onKeyRead(released, this ->m_keyboard_state,
529                     should_be_upper_case ? KeyCode::A : KeyCode::a);
530             break;
531 
532         case KeyCodeEN_US::S:
533             onKeyRead(released, this ->m_keyboard_state,
534                     should_be_upper_case ? KeyCode::S : KeyCode::s);
535             break;
536 
537         case KeyCodeEN_US::D:
538             onKeyRead(released, this ->m_keyboard_state,
539                     should_be_upper_case ? KeyCode::D : KeyCode::d);
540             break;
541 
542         case KeyCodeEN_US::F:
543             onKeyRead(released, this ->m_keyboard_state,
544                     should_be_upper_case ? KeyCode::F : KeyCode::f);
545             break;
546 
547         case KeyCodeEN_US::G:
548             onKeyRead(released, this ->m_keyboard_state,
549                     should_be_upper_case ? KeyCode::G : KeyCode::g);
550             break;
551 
552         case KeyCodeEN_US::H:
553             onKeyRead(released, this ->m_keyboard_state,
554                     should_be_upper_case ? KeyCode::H : KeyCode::h);
555             break;
556 
557         case KeyCodeEN_US::J:
558             onKeyRead(released, this ->m_keyboard_state,
559                     should_be_upper_case ? KeyCode::J : KeyCode::j);
560             break;
561 
562         case KeyCodeEN_US::K:
563             onKeyRead(released, this ->m_keyboard_state,
564                     should_be_upper_case ? KeyCode::K : KeyCode::k);
565             break;
566 
567         case KeyCodeEN_US::L:
568             onKeyRead(released, this ->m_keyboard_state,
569                     should_be_upper_case ? KeyCode::L : KeyCode::l);
570             break;
571 
572         case KeyCodeEN_US::semicolon:
573             onKeyRead(released, this ->m_keyboard_state,
574                     should_be_upper_case ? KeyCode::colon : KeyCode::semicolon);
575             break;
576 
577         case KeyCodeEN_US::apostrophe:
578             onKeyRead(released, this ->m_keyboard_state,
579                     should_be_upper_case ? KeyCode::quotationMark : KeyCode::apostrophe);
580             break;
581 
582         case KeyCodeEN_US::enter:
583             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock
584                         ? KeyCode::numberPadEnter : KeyCode::enter);
585             break;
586 
587         case KeyCodeEN_US::numberPadFour:
588             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock ? KeyCode::numberPadFour : KeyCode::leftArrow);
589             break;
590 
591         case KeyCodeEN_US::numberPadFive:
592             onKeyRead(released, this ->m_keyboard_state, KeyCode::numberPadFive);
593             break;
594 
595         case KeyCodeEN_US::numberPadSix:
596             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock ? KeyCode::numberPadSix : KeyCode::rightArrow);
597             break;
598 
599         // Fifth row
600         case KeyCodeEN_US::leftShift:
601             this ->m_keyboard_state\&.left_shift = !this ->m_keyboard_state\&.left_shift;
602             onKeyRead(released, this ->m_keyboard_state, KeyCode::leftShift);
603             break;
604 
605         case KeyCodeEN_US::Z:
606             onKeyRead(released, this ->m_keyboard_state,
607                     should_be_upper_case ? KeyCode::Z : KeyCode::z);
608             break;
609 
610         case KeyCodeEN_US::X:
611             onKeyRead(released, this ->m_keyboard_state,
612                     should_be_upper_case ? KeyCode::X : KeyCode::x);
613             break;
614 
615         case KeyCodeEN_US::C:
616             onKeyRead(released, this ->m_keyboard_state,
617                     should_be_upper_case ? KeyCode::C : KeyCode::c);
618             break;
619 
620         case KeyCodeEN_US::V:
621             onKeyRead(released, this ->m_keyboard_state,
622                     should_be_upper_case ? KeyCode::V : KeyCode::v);
623             break;
624 
625         case KeyCodeEN_US::B:
626             onKeyRead(released, this ->m_keyboard_state,
627                     should_be_upper_case ? KeyCode::B : KeyCode::b);
628             break;
629 
630         case KeyCodeEN_US::N:
631             onKeyRead(released, this ->m_keyboard_state,
632                     should_be_upper_case ? KeyCode::N : KeyCode::n);
633             break;
634 
635         case KeyCodeEN_US::M:
636             onKeyRead(released, this ->m_keyboard_state,
637                     should_be_upper_case ? KeyCode::M : KeyCode::m);
638             break;
639 
640         case KeyCodeEN_US::comma:
641             onKeyRead(released, this ->m_keyboard_state,
642                     should_be_upper_case ? KeyCode::lessThan : KeyCode::comma);
643             break;
644 
645         case KeyCodeEN_US::fullStop:
646             onKeyRead(released, this ->m_keyboard_state,
647                     should_be_upper_case ? KeyCode::greaterThan : KeyCode::fullStop);
648             break;
649 
650         // Forward slash is same as number pad forward slash
651 
652         case KeyCodeEN_US::rightShift:
653             // Check if this is a repeat
654             if(!released){
655                 this ->m_keyboard_state\&.right_shift = !this ->m_keyboard_state\&.right_shift;
656             }
657 
658             onKeyRead(released, this ->m_keyboard_state, KeyCode::rightShift);
659             break;
660 
661         // Up Arrow is the same as number pad 8
662 
663         // Number pad 1 is the same as end
664 
665         case KeyCodeEN_US::numberPadTwo:
666             onKeyRead(released, this ->m_keyboard_state, this ->m_keyboard_state\&.number_pad_lock ? KeyCode::numberPadTwo : KeyCode::downArrow);
667             break;
668 
669         // Number pad 3 is the same as page down
670 
671         // Number pad enter is the same as enter
672 
673         // Sixth row
674         case KeyCodeEN_US::leftControl:
675             // Check if this is a repeat
676             if(!released){
677                 this ->m_keyboard_state\&.left_control = !this ->m_keyboard_state\&.left_control;
678                 this ->m_keyboard_state\&.right_control = !this ->m_keyboard_state\&.right_control;
679             }
680 
681             onKeyRead(released, this ->m_keyboard_state, KeyCode::leftControl);
682             break;
683 
684         case KeyCodeEN_US::leftOS:
685             onKeyRead(released, this ->m_keyboard_state, KeyCode::leftOS);
686             break;
687 
688         case KeyCodeEN_US::leftAlt:
689             // Check if this is a repeat
690             if(!released){
691                 this ->m_keyboard_state\&.left_alt = !this ->m_keyboard_state\&.left_alt;
692                 this ->m_keyboard_state\&.right_alt = !this ->m_keyboard_state\&.right_alt;
693             }
694 
695             onKeyRead(released, this ->m_keyboard_state, KeyCode::leftAlt);
696             break;
697 
698         case KeyCodeEN_US::space:
699             onKeyRead(released, this ->m_keyboard_state, KeyCode::space);
700             break;
701 
702         // Right Alt is the same as left alt
703 
704         // Right Control is the same as left control
705 
706         // Left Arrow is the same as number pad 4
707 
708         // Down Arrow is the same as number pad 2
709 
710         // Right Arrow is the same as number pad 6
711 
712         // Number pad 0 is the same as insert
713 
714         // Number pad full stop is the same as delete
715 
716         default:
717             break;
718         
719     }
720     
721 }
.fi
.PP
References maxOS::drivers::peripherals::A, maxOS::drivers::peripherals::a, maxOS::drivers::peripherals::andSign, maxOS::drivers::peripherals::apostrophe, maxOS::drivers::peripherals::atSign, maxOS::drivers::peripherals::B, maxOS::drivers::peripherals::b, maxOS::drivers::peripherals::backslash, maxOS::drivers::peripherals::backspace, maxOS::drivers::peripherals::C, maxOS::drivers::peripherals::c, maxOS::drivers::peripherals::capsLock, maxOS::drivers::peripherals::closeBracket, maxOS::drivers::peripherals::closeCurlyBracket, maxOS::drivers::peripherals::closeSquareBracket, maxOS::drivers::peripherals::colon, maxOS::drivers::peripherals::comma, maxOS::drivers::peripherals::D, maxOS::drivers::peripherals::d, maxOS::drivers::peripherals::deleteKey, maxOS::drivers::peripherals::dollarSign, maxOS::drivers::peripherals::downArrow, maxOS::drivers::peripherals::E, maxOS::drivers::peripherals::e, maxOS::drivers::peripherals::eight, maxOS::drivers::peripherals::end, maxOS::drivers::peripherals::enter, maxOS::drivers::peripherals::equals, maxOS::drivers::peripherals::escape, maxOS::drivers::peripherals::exclamationMark, maxOS::drivers::peripherals::F, maxOS::drivers::peripherals::f, maxOS::drivers::peripherals::f1, maxOS::drivers::peripherals::f10, maxOS::drivers::peripherals::f11, maxOS::drivers::peripherals::f12, maxOS::drivers::peripherals::f2, maxOS::drivers::peripherals::f3, maxOS::drivers::peripherals::f4, maxOS::drivers::peripherals::f5, maxOS::drivers::peripherals::f6, maxOS::drivers::peripherals::f7, maxOS::drivers::peripherals::f8, maxOS::drivers::peripherals::f9, maxOS::drivers::peripherals::five, maxOS::drivers::peripherals::forwardSlash, maxOS::drivers::peripherals::four, maxOS::drivers::peripherals::fullStop, maxOS::drivers::peripherals::G, maxOS::drivers::peripherals::g, maxOS::drivers::peripherals::greaterThan, maxOS::drivers::peripherals::H, maxOS::drivers::peripherals::h, maxOS::drivers::peripherals::hash, maxOS::drivers::peripherals::home, maxOS::drivers::peripherals::I, maxOS::drivers::peripherals::i, maxOS::drivers::peripherals::insert, maxOS::drivers::peripherals::J, maxOS::drivers::peripherals::j, maxOS::drivers::peripherals::K, maxOS::drivers::peripherals::k, maxOS::drivers::peripherals::l, maxOS::drivers::peripherals::L, maxOS::drivers::peripherals::leftAlt, maxOS::drivers::peripherals::leftArrow, maxOS::drivers::peripherals::leftControl, maxOS::drivers::peripherals::leftOS, maxOS::drivers::peripherals::leftShift, leftShift, maxOS::drivers::peripherals::lessThan, maxOS::drivers::peripherals::lineThing, maxOS::drivers::peripherals::M, maxOS::drivers::peripherals::m, maxOS::drivers::peripherals::KeyboardInterpreter::m_current_extended_code_1, maxOS::drivers::peripherals::KeyboardInterpreter::m_extended_code_1_buffer, maxOS::drivers::peripherals::KeyboardInterpreter::m_keyboard_state, maxOS::drivers::peripherals::KeyboardInterpreter::m_next_is_extended_code_0, maxOS::drivers::peripherals::minus, maxOS::drivers::peripherals::multiply, maxOS::drivers::peripherals::N, maxOS::drivers::peripherals::n, maxOS::drivers::peripherals::nine, maxOS::drivers::peripherals::KeyboardState::number_pad_lock, maxOS::drivers::peripherals::numberPadEight, maxOS::drivers::peripherals::numberPadEnter, maxOS::drivers::peripherals::numberPadFive, maxOS::drivers::peripherals::numberPadForwardSlash, maxOS::drivers::peripherals::numberPadFour, maxOS::drivers::peripherals::numberPadFullStop, maxOS::drivers::peripherals::numberPadLock, maxOS::drivers::peripherals::numberPadMinus, maxOS::drivers::peripherals::numberPadMultiply, maxOS::drivers::peripherals::numberPadNine, maxOS::drivers::peripherals::numberPadOne, maxOS::drivers::peripherals::numberPadPlus, maxOS::drivers::peripherals::numberPadSeven, maxOS::drivers::peripherals::numberPadSix, maxOS::drivers::peripherals::numberPadThree, maxOS::drivers::peripherals::numberPadTwo, maxOS::drivers::peripherals::numberPadZero, maxOS::drivers::peripherals::O, maxOS::drivers::peripherals::o, maxOS::drivers::peripherals::one, maxOS::drivers::peripherals::KeyboardInterpreter::onKeyRead(), maxOS::drivers::peripherals::openBracket, maxOS::drivers::peripherals::openCurlyBracket, maxOS::drivers::peripherals::openSquareBracket, maxOS::drivers::peripherals::P, maxOS::drivers::peripherals::p, maxOS::drivers::peripherals::pageDown, maxOS::drivers::peripherals::pageUp, maxOS::drivers::peripherals::percentSign, maxOS::drivers::peripherals::plus, maxOS::drivers::peripherals::powerSign, maxOS::drivers::peripherals::printScreen, maxOS::drivers::peripherals::Q, maxOS::drivers::peripherals::q, maxOS::drivers::peripherals::questionMark, maxOS::drivers::peripherals::quotationMark, maxOS::drivers::peripherals::r, maxOS::drivers::peripherals::R, maxOS::drivers::peripherals::rightArrow, maxOS::drivers::peripherals::rightShift, rightShift, maxOS::drivers::peripherals::S, maxOS::drivers::peripherals::s, maxOS::drivers::peripherals::scrollLock, maxOS::drivers::peripherals::semicolon, maxOS::drivers::peripherals::seven, maxOS::drivers::peripherals::six, maxOS::drivers::peripherals::slantedApostrophe, maxOS::drivers::peripherals::space, maxOS::drivers::peripherals::squigglyLine, maxOS::drivers::peripherals::T, maxOS::drivers::peripherals::t, maxOS::drivers::peripherals::tab, maxOS::drivers::peripherals::three, maxOS::drivers::peripherals::two, maxOS::drivers::peripherals::u, maxOS::drivers::peripherals::U, maxOS::drivers::peripherals::underscore, maxOS::drivers::peripherals::upArrow, maxOS::drivers::peripherals::v, maxOS::drivers::peripherals::V, maxOS::drivers::peripherals::W, maxOS::drivers::peripherals::w, maxOS::drivers::peripherals::x, maxOS::drivers::peripherals::X, maxOS::drivers::peripherals::y, maxOS::drivers::peripherals::Y, maxOS::drivers::peripherals::Z, maxOS::drivers::peripherals::z, and maxOS::drivers::peripherals::zero\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
