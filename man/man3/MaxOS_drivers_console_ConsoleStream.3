.TH "MaxOS::drivers::console::ConsoleStream" 3 "Tue Feb 25 2025" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaxOS::drivers::console::ConsoleStream \- A stream that can be used to write to a console\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <console\&.h>\fP
.PP
Inherits \fBMaxOS::common::OutputStream\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBConsoleStream\fP (\fBConsole\fP *)"
.br
.RI "____ \fBConsole\fP Stream ____/// "
.ti -1c
.RI "\fB~ConsoleStream\fP ()"
.br
.ti -1c
.RI "void \fBwrite_char\fP (char c) override"
.br
.RI "write a character to the console stream "
.ti -1c
.RI "void \fBset_cursor\fP (uint16_t x, uint16_t y)"
.br
.RI "Set the m_position of the cursor\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "uint16_t \fBm_cursor_x\fP { 0 }"
.br
.ti -1c
.RI "uint16_t \fBm_cursor_y\fP { 0 }"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBConsole\fP * \fBm_console\fP"
.br
.ti -1c
.RI "\fBcommon::ConsoleColour\fP \fBm_foreground\fP"
.br
.ti -1c
.RI "\fBcommon::ConsoleColour\fP \fBm_background\fP"
.br
.ti -1c
.RI "bool \fBis_ansi\fP = false"
.br
.in -1c
.SH "Detailed Description"
.PP 
A stream that can be used to write to a console\&. 
.PP
Definition at line 90 of file console\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ConsoleStream::ConsoleStream (\fBConsole\fP * console)"

.PP
____ \fBConsole\fP Stream ____/// 
.PP
Definition at line 395 of file console\&.cpp\&.
.PP
.nf
396 : m_console(console)
397 {
398 
399 }
.fi
.SS "ConsoleStream::~ConsoleStream ()"

.PP
Definition at line 401 of file console\&.cpp\&.
.PP
.nf
401                               {
402 
403 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void ConsoleStream::set_cursor (uint16_t x, uint16_t y)"

.PP
Set the m_position of the cursor\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate of the cursor 
.br
\fIy\fP The y coordinate of the cursor 
.RE
.PP

.PP
Definition at line 488 of file console\&.cpp\&.
.PP
.nf
488                                                      {
489 
490     // Set the x and y coordinates
491     m_cursor_x = x;
492     m_cursor_y = y;
493 }
.fi
.PP
References m_cursor_x, m_cursor_y, MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.SS "void ConsoleStream::write_char (char c)\fC [override]\fP, \fC [virtual]\fP"

.PP
write a character to the console stream 
.PP
\fBParameters\fP
.RS 4
\fIc\fP The character to write 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::common::OutputStream\fP\&.
.PP
Definition at line 410 of file console\&.cpp\&.
.PP
.nf
410                                      {
411 
412     // If the character placement is more than the width of the console go on a new line
413     if(m_cursor_x >= m_console->width()) {
414 
415         // Go to the start of the next line
416         m_cursor_x = 0;
417 
418         // Increment the y coordinate but if it is more than the height of the console scroll the console
419         if(++m_cursor_y >= m_console->height()){
420 
421             // Scroll the console
422             m_console->scroll_up();
423 
424             // Decrement the y coordinate
425             m_cursor_y = m_console->height()-1;
426         }
427     }
428 
429     // Check if the character is an ANSI escape code
430     if(c == '\033') is_ansi = true;
431 
432     // Handle the character
433     switch (c) {
434         // New line
435         case '\n':
436             // Increment the y coordinate but if it is more than the height of the console scroll the console
437             if(++m_cursor_y >= m_console->height()){
438 
439                 // Scroll the console
440                 m_console->scroll_up();
441 
442                 // Decrement the y coordinate
443                 m_cursor_y = m_console->height()-1;
444             }
445 
446             // don't break here, we want to go to the next case because of the \r
447             [[fallthrough]];
448 
449         // Carriage return
450         case '\r':
451             // Go to the start of the next line
452             m_cursor_x = 0;
453             break;
454 
455         // Null Terminator
456         case '\0':
457             break;
458 
459         // Backspace
460         case '\b':
461             // Decrement the x coordinate
462             m_cursor_x--;
463             break;
464 
465         default:
466             // Put the character on the console
467             m_console->put_character(m_cursor_x, m_cursor_y, c);
468 
469             // Increment the x coordinate
470             if(!is_ansi)
471               m_cursor_x++;
472 
473             break;
474 
475     }
476 
477     // Check if the ANSI code is complete
478     if(c == 'm') is_ansi = false;
479 
480 }
.fi
.PP
References MaxOS::drivers::peripherals::c, MaxOS::drivers::console::Console::height(), is_ansi, m_console, m_cursor_x, m_cursor_y, MaxOS::drivers::console::Console::put_character(), MaxOS::drivers::console::Console::scroll_up(), and MaxOS::drivers::console::Console::width()\&.
.SH "Member Data Documentation"
.PP 
.SS "bool MaxOS::drivers::console::ConsoleStream::is_ansi = false\fC [protected]\fP"

.PP
Definition at line 97 of file console\&.h\&.
.PP
Referenced by write_char()\&.
.SS "\fBcommon::ConsoleColour\fP MaxOS::drivers::console::ConsoleStream::m_background\fC [protected]\fP"

.PP
Definition at line 96 of file console\&.h\&.
.SS "\fBConsole\fP* MaxOS::drivers::console::ConsoleStream::m_console\fC [protected]\fP"

.PP
Definition at line 93 of file console\&.h\&.
.PP
Referenced by write_char()\&.
.SS "uint16_t MaxOS::drivers::console::ConsoleStream::m_cursor_x { 0 }"

.PP
Definition at line 100 of file console\&.h\&.
.PP
Referenced by set_cursor(), and write_char()\&.
.SS "uint16_t MaxOS::drivers::console::ConsoleStream::m_cursor_y { 0 }"

.PP
Definition at line 101 of file console\&.h\&.
.PP
Referenced by set_cursor(), and write_char()\&.
.SS "\fBcommon::ConsoleColour\fP MaxOS::drivers::console::ConsoleStream::m_foreground\fC [protected]\fP"

.PP
Definition at line 95 of file console\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
