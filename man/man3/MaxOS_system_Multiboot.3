.TH "MaxOS::system::Multiboot" 3 "Tue Feb 25 2025" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaxOS::system::Multiboot
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <multiboot\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMultiboot\fP (unsigned long \fBaddress\fP)"
.br
.ti -1c
.RI "\fB~Multiboot\fP ()"
.br
.ti -1c
.RI "\fBmultiboot_tag_framebuffer\fP * \fBget_framebuffer\fP ()"
.br
.ti -1c
.RI "\fBmultiboot_tag_basic_meminfo\fP * \fBget_basic_meminfo\fP ()"
.br
.ti -1c
.RI "\fBmultiboot_tag_string\fP * \fBget_bootloader_name\fP ()"
.br
.ti -1c
.RI "\fBmultiboot_tag_mmap\fP * \fBget_mmap\fP ()"
.br
.ti -1c
.RI "\fBmultiboot_tag_old_acpi\fP * \fBget_old_acpi\fP ()"
.br
.ti -1c
.RI "\fBmultiboot_tag_new_acpi\fP * \fBget_new_acpi\fP ()"
.br
.ti -1c
.RI "bool \fBis_reserved\fP (\fBmultiboot_uint64_t\fP \fBaddress\fP)"
.br
.RI "Check if an address is reserved\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBmultiboot_tag_framebuffer\fP * \fBm_framebuffer\fP"
.br
.ti -1c
.RI "\fBmultiboot_tag_basic_meminfo\fP * \fBm_basic_meminfo\fP"
.br
.ti -1c
.RI "\fBmultiboot_tag_string\fP * \fBm_bootloader_name\fP"
.br
.ti -1c
.RI "\fBmultiboot_tag_mmap\fP * \fBm_mmap\fP"
.br
.ti -1c
.RI "\fBmultiboot_tag_old_acpi\fP * \fBm_old_acpi\fP"
.br
.ti -1c
.RI "\fBmultiboot_tag_new_acpi\fP * \fBm_new_acpi\fP"
.br
.ti -1c
.RI "unsigned long \fBm_base_address\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 420 of file multiboot\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Multiboot::Multiboot (unsigned long address)"

.PP
Definition at line 13 of file multiboot\&.cpp\&.
.PP
.nf
14 : m_base_address(address)
15 {
16 
17     _kprintf("Multiboot\n");
18 
19     // Loop through the tags and load them
20     struct multiboot_tag *tag;
21     for(tag=(struct multiboot_tag *)(m_base_address + MemoryManager::s_higher_half_kernel_offset + 8); tag->type != MULTIBOOT_TAG_TYPE_END; tag = (struct multiboot_tag *) ((multiboot_uint8_t *) tag + ((tag->size + 7) & ~7))) {
22 
23       switch (tag -> type) {
24           case MULTIBOOT_TAG_TYPE_FRAMEBUFFER:
25               m_framebuffer = (multiboot_tag_framebuffer *)tag;
26               break;
27 
28           case MULTIBOOT_TAG_TYPE_BASIC_MEMINFO:
29               m_basic_meminfo = (multiboot_tag_basic_meminfo *)tag;
30               break;
31 
32           case MULTIBOOT_TAG_TYPE_BOOT_LOADER_NAME:
33               m_bootloader_name = (multiboot_tag_string *)tag;
34               _kprintf("Bootloader: %s\n", m_bootloader_name->string);
35               break;
36 
37           case MULTIBOOT_TAG_TYPE_BOOTDEV:
38             multiboot_tag_bootdev *bootdev;
39             bootdev = (multiboot_tag_bootdev *)tag;
40             _kprintf("Boot device: 0x%x, 0x%x, 0x%x of type 0x%x\n",
41                     (unsigned) bootdev->biosdev, (unsigned) bootdev->slice,
42                     (unsigned) bootdev->part, (unsigned) bootdev->type);
43 
44           case MULTIBOOT_TAG_TYPE_MMAP:
45 
46             // If there is not already a mmap tag, set it
47             if (m_mmap == nullptr)
48                 m_mmap = (multiboot_tag_mmap *)tag;
49 
50             break;
51 
52           case MULTIBOOT_TAG_TYPE_ACPI_OLD:
53                 m_old_acpi = (multiboot_tag_old_acpi *)tag;
54                 break;
55 
56 
57           case MULTIBOOT_TAG_TYPE_ACPI_NEW:
58                 m_new_acpi = (multiboot_tag_new_acpi *)tag;
59                 break;
60       }
61     }
62 }
.fi
.PP
References _kprintf, multiboot_tag_bootdev::biosdev, m_base_address, m_basic_meminfo, m_bootloader_name, m_framebuffer, m_mmap, m_new_acpi, m_old_acpi, MULTIBOOT_TAG_TYPE_ACPI_NEW, MULTIBOOT_TAG_TYPE_ACPI_OLD, MULTIBOOT_TAG_TYPE_BASIC_MEMINFO, MULTIBOOT_TAG_TYPE_BOOT_LOADER_NAME, MULTIBOOT_TAG_TYPE_BOOTDEV, MULTIBOOT_TAG_TYPE_END, MULTIBOOT_TAG_TYPE_FRAMEBUFFER, MULTIBOOT_TAG_TYPE_MMAP, multiboot_tag_bootdev::part, multiboot_tag::size, multiboot_tag_bootdev::slice, multiboot_tag_string::string, type, multiboot_tag::type, and multiboot_tag_bootdev::type\&.
.SS "Multiboot::~Multiboot ()"

.PP
Definition at line 64 of file multiboot\&.cpp\&.
.PP
.nf
64                       {
65 
66 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "\fBmultiboot_tag_basic_meminfo\fP * Multiboot::get_basic_meminfo ()"

.PP
Definition at line 75 of file multiboot\&.cpp\&.
.PP
.nf
75                                                           {
76 
77     return m_basic_meminfo;
78 
79 }
.fi
.PP
References m_basic_meminfo\&.
.PP
Referenced by MaxOS::memory::PhysicalMemoryManager::PhysicalMemoryManager()\&.
.SS "\fBmultiboot_tag_string\fP * Multiboot::get_bootloader_name ()"

.PP
Definition at line 81 of file multiboot\&.cpp\&.
.PP
.nf
81                                                      {
82 
83     return m_bootloader_name;
84 
85 }
.fi
.PP
References m_bootloader_name\&.
.SS "\fBmultiboot_tag_framebuffer\fP * Multiboot::get_framebuffer ()"

.PP
Definition at line 69 of file multiboot\&.cpp\&.
.PP
.nf
69                                                       {
70 
71     return m_framebuffer;
72 
73 }
.fi
.PP
References m_framebuffer\&.
.PP
Referenced by kernelMain()\&.
.SS "\fBmultiboot_tag_mmap\fP * Multiboot::get_mmap ()"

.PP
Definition at line 87 of file multiboot\&.cpp\&.
.PP
.nf
87                                         {
88 
89     return m_mmap;
90 
91 }
.fi
.PP
References m_mmap\&.
.PP
Referenced by MaxOS::memory::PhysicalMemoryManager::PhysicalMemoryManager()\&.
.SS "\fBmultiboot_tag_new_acpi\fP * Multiboot::get_new_acpi ()"

.PP
Definition at line 99 of file multiboot\&.cpp\&.
.PP
.nf
99                                                 {
100 
101   return m_new_acpi;
102 }
.fi
.PP
References m_new_acpi\&.
.PP
Referenced by MaxOS::hardwarecommunication::AdvancedConfigurationAndPowerInterface::AdvancedConfigurationAndPowerInterface()\&.
.SS "\fBmultiboot_tag_old_acpi\fP * Multiboot::get_old_acpi ()"

.PP
Definition at line 93 of file multiboot\&.cpp\&.
.PP
.nf
93                                                 {
94 
95   return m_old_acpi;
96 }
.fi
.PP
References m_old_acpi\&.
.PP
Referenced by MaxOS::hardwarecommunication::AdvancedConfigurationAndPowerInterface::AdvancedConfigurationAndPowerInterface()\&.
.SS "bool Multiboot::is_reserved (\fBmultiboot_uint64_t\fP address)"

.PP
Check if an address is reserved\&. 
.PP
\fBParameters\fP
.RS 4
\fIaddress\fP The address to check 
.RE
.PP
\fBReturns\fP
.RS 4
True if the address is reserved 
.RE
.PP

.PP
Definition at line 109 of file multiboot\&.cpp\&.
.PP
.nf
109                                                       {
110 
111   // Loop through the tags checking if the address is reserved
112   struct multiboot_tag *tag;
113   for(tag=(struct multiboot_tag *)(m_base_address + MemoryManager::s_higher_half_kernel_offset + 8); tag->type != MULTIBOOT_TAG_TYPE_END; tag = (struct multiboot_tag *) ((multiboot_uint8_t *) tag + ((tag->size + 7) & ~7))) {
114 
115       // Check if the tag is a module
116       if(tag -> type != MULTIBOOT_TAG_TYPE_MODULE)
117         continue;
118 
119       // Get the module tag
120       struct multiboot_tag_module* module = (struct multiboot_tag_module*)tag;
121 
122       // Check if the address is within the module
123       if(address >= module -> mod_start && address < module -> mod_end)
124         return true;
125   }
126 
127 
128   // Not part of multiboot
129   return false;
130 
131 }
.fi
.PP
References address, m_base_address, multiboot_tag_module::mod_end, multiboot_tag_module::mod_start, MULTIBOOT_TAG_TYPE_END, MULTIBOOT_TAG_TYPE_MODULE, multiboot_tag::size, type, and multiboot_tag::type\&.
.SH "Member Data Documentation"
.PP 
.SS "unsigned long MaxOS::system::Multiboot::m_base_address\fC [protected]\fP"

.PP
Definition at line 429 of file multiboot\&.h\&.
.PP
Referenced by is_reserved(), and Multiboot()\&.
.SS "\fBmultiboot_tag_basic_meminfo\fP* MaxOS::system::Multiboot::m_basic_meminfo\fC [protected]\fP"

.PP
Definition at line 423 of file multiboot\&.h\&.
.PP
Referenced by get_basic_meminfo(), and Multiboot()\&.
.SS "\fBmultiboot_tag_string\fP* MaxOS::system::Multiboot::m_bootloader_name\fC [protected]\fP"

.PP
Definition at line 424 of file multiboot\&.h\&.
.PP
Referenced by get_bootloader_name(), and Multiboot()\&.
.SS "\fBmultiboot_tag_framebuffer\fP* MaxOS::system::Multiboot::m_framebuffer\fC [protected]\fP"

.PP
Definition at line 422 of file multiboot\&.h\&.
.PP
Referenced by get_framebuffer(), and Multiboot()\&.
.SS "\fBmultiboot_tag_mmap\fP* MaxOS::system::Multiboot::m_mmap\fC [protected]\fP"

.PP
Definition at line 425 of file multiboot\&.h\&.
.PP
Referenced by get_mmap(), and Multiboot()\&.
.SS "\fBmultiboot_tag_new_acpi\fP* MaxOS::system::Multiboot::m_new_acpi\fC [protected]\fP"

.PP
Definition at line 427 of file multiboot\&.h\&.
.PP
Referenced by get_new_acpi(), and Multiboot()\&.
.SS "\fBmultiboot_tag_old_acpi\fP* MaxOS::system::Multiboot::m_old_acpi\fC [protected]\fP"

.PP
Definition at line 426 of file multiboot\&.h\&.
.PP
Referenced by get_old_acpi(), and Multiboot()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
