.TH "MaxOS::system::Task" 3 "Mon Jan 15 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaxOS::system::Task \- A task that can be scheduled by the \fBTaskManager\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <multitasking\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTask\fP (\fBsystem::GlobalDescriptorTable\fP *gdt, void entrypoint())"
.br
.RI "\fBTASK\fP "
.ti -1c
.RI "\fB~Task\fP ()"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBTaskManager\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A task that can be scheduled by the \fBTaskManager\fP\&. 
.PP
Definition at line 45 of file multitasking\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Task::Task (\fBsystem::GlobalDescriptorTable\fP * gdt, void  entrypoint())"

.PP
\fBTASK\fP 
.PP
Definition at line 12 of file multitasking\&.cpp\&.
.PP
.nf
12                                                         {
13 
14 
15     //Set up stack
16     m_cpu_state = (CPUState *)(m_stack + 4096 - sizeof(CPUState));
17 
18     //Set phony entries
19 
20     m_cpu_state-> eax = 0;
21     m_cpu_state-> ebx = 0;
22     m_cpu_state-> ecx = 0;
23     m_cpu_state-> edx = 0;
24 
25     m_cpu_state-> esi = 0;
26     m_cpu_state-> edi = 0;
27     m_cpu_state-> ebp = 0;
28 
29     // Set up the function pointer
30     m_cpu_state-> eip = (uint32_t)entrypoint;
31     m_cpu_state-> cs = gdt->code_segment_selector();
32     m_cpu_state-> eflags = 0x202;
33 }
.fi
.PP
References MaxOS::system::GlobalDescriptorTable::code_segment_selector(), cs, eax, ebp, ebx, ecx, edi, edx, eflags, eip, and esi\&.
.SS "Task::~Task ()"

.PP
Definition at line 35 of file multitasking\&.cpp\&.
.PP
.nf
35             {
36 
37 }
.fi
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBTaskManager\fP\fC [friend]\fP"

.PP
Definition at line 47 of file multitasking\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
