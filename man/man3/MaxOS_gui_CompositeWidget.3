.TH "MaxOS::gui::CompositeWidget" 3 "Mon Jan 29 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaxOS::gui::CompositeWidget \- A widget that can contain other widgets\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <widget\&.h>\fP
.PP
Inherits \fBMaxOS::gui::Widget\fP\&.
.PP
Inherited by \fBMaxOS::gui::Desktop\fP, and \fBMaxOS::gui::Window\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCompositeWidget\fP ()"
.br
.RI "\fBCOMPOSITE WIDGET\fP "
.ti -1c
.RI "\fBCompositeWidget\fP (int32_t left, int32_t top, uint32_t width, uint32_t height)"
.br
.ti -1c
.RI "\fB~CompositeWidget\fP ()"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBcommon::GraphicsContext\fP *gc, \fBcommon::Rectangle\fP< int32_t > &area) override"
.br
.RI "Draws a section of the widget and its m_children\&. "
.ti -1c
.RI "virtual void \fBadd_child\fP (\fBWidget\fP *child) override"
.br
.RI "Adds a child to the widget\&. "
.ti -1c
.RI "virtual void \fBon_mouse_enter_widget\fP (uint32_t toX, uint32_t toY) override"
.br
.RI "Passes the event to the child that the mouse is over\&. (Event handling should be done by the derived class) "
.ti -1c
.RI "virtual void \fBon_mouse_leave_widget\fP (uint32_t fromX, uint32_t fromY) override"
.br
.RI "Passes the event to the child that the mouse is over\&. (Event handling should be done by the derived class) "
.ti -1c
.RI "virtual void \fBon_mouse_move_widget\fP (uint32_t fromX, uint32_t fromY, uint32_t toX, uint32_t toY) override"
.br
.RI "Passes the event to the child that the mouse is over, also generates a leave/enter event for children\&. "
.ti -1c
.RI "virtual \fBdrivers::peripherals::MouseEventHandler\fP * \fBon_mouse_button_pressed\fP (uint32_t x, uint32_t y, uint8_t button) override"
.br
.RI "Passes the event to the child that the mouse is over\&. "
.ti -1c
.RI "virtual void \fBon_mouse_button_released\fP (uint32_t x, uint32_t y, uint8_t button) override"
.br
.RI "Passes the event to the child that the mouse is over\&. (Event handling should be done by the derived class) "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBdraw\fP (\fBcommon::GraphicsContext\fP *gc, \fBcommon::Rectangle\fP< int32_t > &area, \fBcommon::Vector\fP< \fBWidget\fP * >::iterator start)"
.br
.RI "Draws a section of the widget and the m_children after a specific child\&. "
.ti -1c
.RI "virtual void \fBdraw_self\fP (\fBcommon::GraphicsContext\fP *gc, \fBcommon::Rectangle\fP< int32_t > &area)"
.br
.RI "Draws the widget itself (should be overridden by the derived class) "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBcommon::Vector\fP< \fBWidget\fP * > \fBm_children\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A widget that can contain other widgets\&. 
.PP
Definition at line 84 of file widget\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CompositeWidget::CompositeWidget ()"

.PP
\fBCOMPOSITE WIDGET\fP 
.PP
Definition at line 296 of file widget\&.cpp\&.
.PP
.nf
296                                  {
297 
298 }
.fi
.SS "CompositeWidget::CompositeWidget (int32_t left, int32_t top, uint32_t width, uint32_t height)"

.PP
Definition at line 300 of file widget\&.cpp\&.
.PP
.nf
301 : Widget(left, top, width,height)
302 {
303 
304 }
.fi
.SS "CompositeWidget::~CompositeWidget ()"

.PP
Definition at line 306 of file widget\&.cpp\&.
.PP
.nf
306                                   {
307 
308 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void CompositeWidget::add_child (\fBWidget\fP * child)\fC [override]\fP, \fC [virtual]\fP"

.PP
Adds a child to the widget\&. 
.PP
\fBParameters\fP
.RS 4
\fIchild\fP The child to add 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::gui::Widget\fP\&.
.PP
Reimplemented in \fBMaxOS::gui::Window\fP, and \fBMaxOS::gui::Desktop\fP\&.
.PP
Definition at line 385 of file widget\&.cpp\&.
.PP
.nf
385                                              {
386 
387         // Store the child and parent the child to this widget
388         m_children\&.push_back(child);
389         Widget::add_child(child);
390 }
.fi
.PP
References MaxOS::gui::Widget::add_child(), and m_children\&.
.PP
Referenced by MaxOS::gui::Desktop::add_child(), and MaxOS::gui::Window::add_child()\&.
.SS "void CompositeWidget::draw (\fBcommon::GraphicsContext\fP * gc, \fBcommon::Rectangle\fP< int32_t > & area)\fC [override]\fP, \fC [virtual]\fP"

.PP
Draws a section of the widget and its m_children\&. 
.PP
\fBParameters\fP
.RS 4
\fIgc\fP The graphics context to draw to 
.br
\fIarea\fP The area to draw 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::gui::Widget\fP\&.
.PP
Definition at line 316 of file widget\&.cpp\&.
.PP
.nf
316                                                                         {
317 
318     // Draw the widget with its m_children
319     draw(gc, area, m_children\&.begin());
320 
321 }
.fi
.PP
References draw(), and m_children\&.
.SS "void CompositeWidget::draw (\fBcommon::GraphicsContext\fP * gc, \fBcommon::Rectangle\fP< int32_t > & area, \fBcommon::Vector\fP< \fBWidget\fP * >::iterator start)\fC [protected]\fP"

.PP
Draws a section of the widget and the m_children after a specific child\&. 
.PP
\fBParameters\fP
.RS 4
\fIgc\fP The graphics context to draw to 
.br
\fIarea\fP The area to draw 
.br
\fIstart\fP The child to start drawing from 
.RE
.PP

.PP
Definition at line 330 of file widget\&.cpp\&.
.PP
.nf
330                                                                                                         {
331 
332     // Draw the widget
333     Widget::draw(gc, area);
334 
335     // Get the area of the widget
336     Rectangle<int32_t> own_area = position();
337 
338     //Note: has to use iterator as the start is not necessarily the m_first_memory_chunk child
339     for(Vector<Widget*>::iterator child_widget = start; child_widget != m_children\&.end(); child_widget++){
340 
341         Rectangle<int32_t> child_area = (*child_widget)->position();
342 
343         // Check if the child is in the area that needs to be redrawn
344         if(area\&.intersects(child_area)){
345 
346             // Get the area that needs to be redrawn
347             Rectangle<int32_t> rectangle = area\&.intersection(child_area);
348 
349             // Translate the area so that it is relative to the child
350             rectangle\&.left -= child_area\&.left;
351             rectangle\&.top -= child_area\&.top;
352 
353             // Draw the child
354             (*child_widget)->draw(gc, rectangle);
355 
356             // Draw what is left of the area that needs to be redrawn
357             Vector<Rectangle<int32_t>> rest_draw_area = area\&.subtract(child_area);
358             for(Vector<Rectangle<int32_t>>::iterator rest_area_part = rest_draw_area\&.begin(); rest_area_part != rest_draw_area\&.end(); rest_area_part++)
359                 draw(gc, *rest_area_part, child_widget + 1);
360 
361             // Return as the entire area has now been drawn
362             return;
363         }
364     }
365 
366     // Now draw the widget itself
367     draw_self(gc, area);
368 }
.fi
.PP
References MaxOS::common::Vector< Type >::begin(), MaxOS::gui::Widget::draw(), draw_self(), MaxOS::common::Vector< Type >::end(), MaxOS::common::Rectangle< Type >::intersection(), MaxOS::common::Rectangle< Type >::intersects(), MaxOS::common::Rectangle< Type >::left, m_children, MaxOS::gui::Widget::position(), MaxOS::common::Rectangle< Type >::subtract(), and MaxOS::common::Rectangle< Type >::top\&.
.PP
Referenced by draw(), and MaxOS::gui::Desktop::on_time()\&.
.SS "void CompositeWidget::draw_self (\fBcommon::GraphicsContext\fP * gc, \fBcommon::Rectangle\fP< int32_t > & area)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Draws the widget itself (should be overridden by the derived class) 
.PP
\fBParameters\fP
.RS 4
\fIgc\fP The graphics context to draw to 
.br
\fIarea\fP The area to draw 
.RE
.PP

.PP
Reimplemented in \fBMaxOS::gui::Window\fP, and \fBMaxOS::gui::Desktop\fP\&.
.PP
Definition at line 376 of file widget\&.cpp\&.
.PP
.nf
376                                                                                  {
377 
378 }
.fi
.PP
Referenced by draw()\&.
.SS "\fBperipherals::MouseEventHandler\fP * CompositeWidget::on_mouse_button_pressed (uint32_t x, uint32_t y, uint8_t button)\fC [override]\fP, \fC [virtual]\fP"

.PP
Passes the event to the child that the mouse is over\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate of the mouse 
.br
\fIy\fP The y coordinate of the mouse 
.br
\fIbutton\fP The button that was pressed 
.RE
.PP
\fBReturns\fP
.RS 4
The object that has the mouseEventHandler which handled the event 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::gui::Widget\fP\&.
.PP
Reimplemented in \fBMaxOS::gui::Window\fP\&.
.PP
Definition at line 502 of file widget\&.cpp\&.
.PP
.nf
502                                                                                                              {
503 
504     MouseEventHandler*mouse_event_handler = 0;
505 
506     for(auto&child_widget : m_children){
507 
508         // Pass the event to the child
509         if(child_widget->contains_coordinate(x, y)){
510             mouse_event_handler = child_widget -> on_mouse_button_pressed(x - child_widget->m_position\&.left, y - child_widget->m_position\&.top, button);
511             break;
512         }
513 
514     }
515 
516     return mouse_event_handler;
517 
518 }
.fi
.PP
References m_children, MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.PP
Referenced by MaxOS::gui::Window::on_mouse_button_pressed(), and MaxOS::gui::Desktop::on_mouse_down_event()\&.
.SS "void CompositeWidget::on_mouse_button_released (uint32_t x, uint32_t y, uint8_t button)\fC [override]\fP, \fC [virtual]\fP"

.PP
Passes the event to the child that the mouse is over\&. (Event handling should be done by the derived class) 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate of the mouse 
.br
\fIy\fP The y coordinate of the mouse 
.br
\fIbutton\fP The button that was released 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::gui::Widget\fP\&.
.PP
Definition at line 527 of file widget\&.cpp\&.
.PP
.nf
527                                                                                      {
528 
529     // Loop through the m_children
530     for(auto&child_widget : m_children){
531 
532         // Pass the event to the child
533         if(child_widget->contains_coordinate(x, y)){
534             child_widget->on_mouse_button_released(x - child_widget->m_position\&.left, y - child_widget->m_position\&.top, button);
535             break;
536         }
537     }
538 }
.fi
.PP
References m_children, MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.PP
Referenced by MaxOS::gui::Desktop::on_mouse_up_event()\&.
.SS "void CompositeWidget::on_mouse_enter_widget (uint32_t toX, uint32_t toY)\fC [override]\fP, \fC [virtual]\fP"

.PP
Passes the event to the child that the mouse is over\&. (Event handling should be done by the derived class) 
.PP
\fBParameters\fP
.RS 4
\fItoX\fP The x coordinate of the mouse 
.br
\fItoY\fP The y coordinate of the mouse 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::gui::Widget\fP\&.
.PP
Definition at line 398 of file widget\&.cpp\&.
.PP
.nf
398                                                                       {
399 
400     for(auto&child_widget : m_children){
401 
402         // Check if the mouse is in the child
403         Rectangle<int32_t> child_area = child_widget->position();
404         if(child_area\&.contains(toX, toY)){
405 
406             // Get the position of the mouse relative to the child
407             uint32_t child_x = toX - child_area\&.left;
408             uint32_t child_y = toY - child_area\&.top;
409 
410             // Call the child's on_mouse_enter_widget function
411             child_widget->on_mouse_enter_widget(child_x, child_y);
412 
413             // Break as the event has been handled
414             break;
415         }
416     }
417 
418 }
.fi
.PP
References MaxOS::common::Rectangle< Type >::contains(), MaxOS::common::Rectangle< Type >::left, m_children, and MaxOS::common::Rectangle< Type >::top\&.
.PP
Referenced by MaxOS::gui::Desktop::add_child()\&.
.SS "void CompositeWidget::on_mouse_leave_widget (uint32_t fromX, uint32_t fromY)\fC [override]\fP, \fC [virtual]\fP"

.PP
Passes the event to the child that the mouse is over\&. (Event handling should be done by the derived class) 
.PP
\fBParameters\fP
.RS 4
\fIfromX\fP The x coordinate of the mouse 
.br
\fIfromY\fP The y coordinate of the mouse 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::gui::Widget\fP\&.
.PP
Definition at line 425 of file widget\&.cpp\&.
.PP
.nf
425                                                                           {
426 
427     for(auto&child_widget : m_children){
428 
429         // Check if the mouse is in the child
430         Rectangle<int32_t> child_area = child_widget->position();
431         if(child_area\&.contains(fromX, fromY)){
432 
433             // Get the position of the mouse relative to the child
434             uint32_t child_x = fromX - child_area\&.left;
435             uint32_t child_y = fromY - child_area\&.top;
436 
437             // Call the child's on_mouse_leave_widget function
438             child_widget->on_mouse_leave_widget(child_x, child_y);
439 
440             // Event has been handled
441             break;
442         }
443     }
444 }
.fi
.PP
References MaxOS::common::Rectangle< Type >::contains(), MaxOS::common::Rectangle< Type >::left, m_children, and MaxOS::common::Rectangle< Type >::top\&.
.PP
Referenced by MaxOS::gui::Desktop::add_child()\&.
.SS "void CompositeWidget::on_mouse_move_widget (uint32_t fromX, uint32_t fromY, uint32_t toX, uint32_t toY)\fC [override]\fP, \fC [virtual]\fP"

.PP
Passes the event to the child that the mouse is over, also generates a leave/enter event for children\&. 
.PP
\fBParameters\fP
.RS 4
\fIfromX\fP The x coordinate of the mouse 
.br
\fIfromY\fP The y coordinate of the mouse 
.br
\fItoX\fP The x coordinate of the mouse 
.br
\fItoY\fP The y coordinate of the mouse 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::gui::Widget\fP\&.
.PP
Definition at line 454 of file widget\&.cpp\&.
.PP
.nf
454                                                                                                      {
455 
456     Widget* left_child = nullptr;
457     Widget* entered_child = nullptr;
458 
459     for(auto&child_widget : m_children){
460 
461         // Check if the mouse is in the child
462         Rectangle<int32_t> child_area = child_widget->position();
463         bool mouse_in_from = child_area\&.contains(fromX, fromY);
464         bool mouse_in_to = child_area\&.contains(toX, toY);
465 
466         // If the mouse started in the child
467         if(mouse_in_from){
468 
469             // The mouse moved out of the child
470             if(!mouse_in_to){
471                 left_child = child_widget;
472                 continue;
473             }
474 
475             // Mouse still in the child
476             child_widget->on_mouse_move_widget(fromX, fromY, toX, toY);
477 
478         }else{
479 
480             // Mouse moved into the child
481             if(mouse_in_to)
482                 entered_child = child_widget;
483         }
484 
485         // Pass the events to the child
486         if(left_child != nullptr)
487           left_child->on_mouse_leave_widget(fromX, fromY);
488 
489         if(entered_child != nullptr)
490           entered_child->on_mouse_enter_widget(toX, toY);
491     }
492 }
.fi
.PP
References MaxOS::common::Rectangle< Type >::contains(), m_children, MaxOS::gui::Widget::on_mouse_enter_widget(), MaxOS::gui::Widget::on_mouse_leave_widget(), and MaxOS::gui::Widget::on_mouse_move_widget()\&.
.PP
Referenced by MaxOS::gui::Desktop::on_mouse_move_event()\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBcommon::Vector\fP<\fBWidget\fP*> MaxOS::gui::CompositeWidget::m_children\fC [protected]\fP"

.PP
Definition at line 88 of file widget\&.h\&.
.PP
Referenced by add_child(), MaxOS::gui::Desktop::bring_to_front(), draw(), on_mouse_button_pressed(), on_mouse_button_released(), on_mouse_enter_widget(), on_mouse_leave_widget(), and on_mouse_move_widget()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
