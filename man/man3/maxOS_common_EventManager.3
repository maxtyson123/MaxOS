.TH "maxOS::common::EventManager< EventType >" 3 "Fri Jan 5 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
maxOS::common::EventManager< EventType > \- Manages the m_handlers for a type of event, raises events and calls the m_handlers\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <eventHandler\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBEventManager\fP ()"
.br
.ti -1c
.RI "\fB~EventManager\fP ()"
.br
.ti -1c
.RI "void \fBconnect_event_handler\fP (\fBEventHandler\fP< EventType > *handler)"
.br
.RI "Connect an event handler to the event manager if it is not already connected\&. "
.ti -1c
.RI "void \fBdisconnect_event_handler\fP (\fBEventHandler\fP< EventType > *handler)"
.br
.RI "Disconnect an event handler from the event manager if it is connected\&. "
.ti -1c
.RI "\fBVector\fP< \fBEvent\fP< EventType > * > \fBraise_event\fP (\fBEvent\fP< EventType > *event)"
.br
.RI "Calls the on_event function of all the event m_handlers connected to the event manager and returns a list of the results\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBVector\fP< \fBEventHandler\fP< EventType > * > \fBm_handlers\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename EventType>
.br
class maxOS::common::EventManager< EventType >"
Manages the m_handlers for a type of event, raises events and calls the m_handlers\&. 


.PP
\fBTemplate Parameters\fP
.RS 4
\fIEventType\fP The type of event 
.RE
.PP

.PP
Definition at line 56 of file eventHandler\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename EventType > \fBmaxOS::common::EventManager\fP< EventType >::\fBEventManager\fP"

.PP
Definition at line 99 of file eventHandler\&.h\&.
.PP
.nf
99                                                                            {
100 
101         }
.fi
.SS "template<typename EventType > \fBmaxOS::common::EventManager\fP< EventType >::~\fBEventManager\fP"

.PP
Definition at line 103 of file eventHandler\&.h\&.
.PP
.nf
103                                                                             {
104 
105         }
.fi
.SH "Member Function Documentation"
.PP 
.SS "template<typename EventType > void \fBmaxOS::common::EventManager\fP< EventType >::connect_event_handler (\fBEventHandler\fP< EventType > * handler)"

.PP
Connect an event handler to the event manager if it is not already connected\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIEventType\fP The type of event 
.RE
.PP
\fBParameters\fP
.RS 4
\fIhandler\fP The event handler to connect 
.RE
.PP

.PP
Definition at line 114 of file eventHandler\&.h\&.
.PP
.nf
114                                                                                                                          {
115             // If the handler is already connected, return
116             if(m_handlers\&.find(handler) != m_handlers\&.end()) {
117                 return;
118             }
119 
120             m_handlers\&.push_back(handler);
121 
122         }
.fi
.PP
Referenced by maxOS::net::TransmissionControlProtocolHandler::Bind(), and maxOS::net::EthernetFrameHandler::EthernetFrameHandler()\&.
.SS "template<typename EventType > void \fBmaxOS::common::EventManager\fP< EventType >::disconnect_event_handler (\fBEventHandler\fP< EventType > * handler)"

.PP
Disconnect an event handler from the event manager if it is connected\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIEventType\fP The type of event 
.RE
.PP
\fBParameters\fP
.RS 4
\fIhandler\fP The event handler to disconnect 
.RE
.PP

.PP
Definition at line 130 of file eventHandler\&.h\&.
.PP
.nf
130                                                                                                                             {
131             // If the handler is not connected, return
132             if(m_handlers\&.find(handler) == m_handlers\&.end()) {
133                 return;
134             }
135 
136             m_handlers\&.erase(handler);
137         }
.fi
.SS "template<typename EventType > \fBVector\fP< \fBEvent\fP< EventType > * > \fBmaxOS::common::EventManager\fP< EventType >::raise_event (\fBEvent\fP< EventType > * event)"

.PP
Calls the on_event function of all the event m_handlers connected to the event manager and returns a list of the results\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIEventType\fP The type of event 
.RE
.PP
\fBParameters\fP
.RS 4
\fIevent\fP The event to raise 
.RE
.PP
\fBReturns\fP
.RS 4
A list of the results of the event m_handlers 
.RE
.PP

.PP
Definition at line 146 of file eventHandler\&.h\&.
.PP
.nf
146                                                                                                                             {
147 
148 
149             // Store a list of the results of the event handlers
150             Vector<Event<EventType>*> results;
151             for(auto& handler : m_handlers) {
152                 results\&.push_back(handler->on_event(event));
153             }
154             return results;
155         }
.fi
.SH "Member Data Documentation"
.PP 
.SS "template<typename EventType > \fBVector\fP<\fBEventHandler\fP<EventType>*> \fBmaxOS::common::EventManager\fP< EventType >::m_handlers\fC [protected]\fP"

.PP
Definition at line 59 of file eventHandler\&.h\&.
.PP
Referenced by maxOS::net::UserDatagramProtocolHandler::Bind()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
