.TH "MaxOS::drivers::video::VideoElectronicsStandardsAssociation" 3 "Mon Jan 15 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaxOS::drivers::video::VideoElectronicsStandardsAssociation \- \fBDriver\fP for the VESA video controller, handles the rendering of pixels to the screen using VESA\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vesa\&.h>\fP
.PP
Inherits \fBMaxOS::drivers::video::VideoDriver\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVideoElectronicsStandardsAssociation\fP (\fBmultiboot_tag_framebuffer\fP *framebuffer_info)"
.br
.ti -1c
.RI "\fB~VideoElectronicsStandardsAssociation\fP ()"
.br
.ti -1c
.RI "bool \fBsupports_mode\fP (uint32_t width, uint32_t height, uint32_t) final"
.br
.RI "Checks if the VESA driver supports the given mode\&. "
.ti -1c
.RI "\fBstring\fP \fBget_vendor_name\fP () final"
.br
.RI "Renders a pixel on the screen in 16 bit mode\&. "
.ti -1c
.RI "\fBstring\fP \fBget_device_name\fP () final"
.br
.RI "Gets the colour of a pixel on the screen in 16 bit mode\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "bool \fBinternal_set_mode\fP (uint32_t width, uint32_t height, uint32_t) final"
.br
.RI "Sets the mode of the VESA driver\&. "
.ti -1c
.RI "void \fBrender_pixel_32_bit\fP (uint32_t x, uint32_t y, uint32_t colour) final"
.br
.RI "Renders a pixel on the screen in 32 bit mode\&. "
.ti -1c
.RI "uint32_t \fBget_rendered_pixel_32_bit\fP (uint32_t x, uint32_t y) final"
.br
.RI "Gets the colour of a pixel on the screen in 32 bit mode\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBmultiboot_tag_framebuffer\fP * \fBm_framebuffer_info\fP"
.br
.ti -1c
.RI "uint64_t * \fBm_framebuffer_address\fP"
.br
.ti -1c
.RI "uint8_t \fBm_bpp\fP"
.br
.ti -1c
.RI "uint16_t \fBm_pitch\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
\fBDriver\fP for the VESA video controller, handles the rendering of pixels to the screen using VESA\&. 
.PP
Definition at line 26 of file vesa\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "VideoElectronicsStandardsAssociation::VideoElectronicsStandardsAssociation (\fBmultiboot_tag_framebuffer\fP * framebuffer_info)"

.PP
Definition at line 13 of file vesa\&.cpp\&.
.PP
.nf
14 : VideoDriver(),
15   m_framebuffer_info(framebuffer_info),
16   m_framebuffer_address((uint64_t *)framebuffer_info->common\&.framebuffer_addr),
17   m_bpp(framebuffer_info->common\&.framebuffer_bpp),
18   m_pitch(framebuffer_info->common\&.framebuffer_pitch)
19 {
20 }
.fi
.SS "VideoElectronicsStandardsAssociation::~VideoElectronicsStandardsAssociation ()"

.PP
Definition at line 22 of file vesa\&.cpp\&.
.PP
.nf
22                                                                            {
23 
24 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "\fBstring\fP VideoElectronicsStandardsAssociation::get_device_name ()\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the colour of a pixel on the screen in 16 bit mode\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate of the pixel 
.br
\fIy\fP The y coordinate of the pixel 
.RE
.PP
\fBReturns\fP
.RS 4
The 16bit colour of the pixel 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::Driver\fP\&.
.PP
Definition at line 116 of file vesa\&.cpp\&.
.PP
.nf
116                                                              {
117     return "VESA compatible graphics card";
118 }
.fi
.SS "uint32_t VideoElectronicsStandardsAssociation::get_rendered_pixel_32_bit (uint32_t x, uint32_t y)\fC [final]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Gets the colour of a pixel on the screen in 32 bit mode\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate of the pixel 
.br
\fIy\fP The y coordinate of the pixel 
.RE
.PP
\fBReturns\fP
.RS 4
The 32bit colour of the pixel 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::common::GraphicsContext\fP\&.
.PP
Definition at line 89 of file vesa\&.cpp\&.
.PP
.nf
89                                                                                                {
90 
91     // Get the address of the pixel
92     uint32_t*pixel_address = (uint32_t*)((uint8_t *)m_framebuffer_address + m_pitch * (y) + m_bpp * (x) / 8);
93 
94     // Return the pixel
95     return *pixel_address;
96 }
.fi
.PP
References m_bpp, m_framebuffer_address, m_pitch, MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.SS "\fBstring\fP VideoElectronicsStandardsAssociation::get_vendor_name ()\fC [final]\fP, \fC [virtual]\fP"

.PP
Renders a pixel on the screen in 16 bit mode\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate of the pixel 
.br
\fIy\fP The y coordinate of the pixel 
.br
\fIcolour\fP The 16bit colour of the pixel 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::Driver\fP\&.
.PP
Definition at line 105 of file vesa\&.cpp\&.
.PP
.nf
105                                                              {
106     return "NEC Home Electronics";  // Creator of the VESA standard
107 }
.fi
.SS "bool VideoElectronicsStandardsAssociation::internal_set_mode (uint32_t width, uint32_t height, uint32_t color_depth)\fC [final]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Sets the mode of the VESA driver\&. 
.PP
\fBParameters\fP
.RS 4
\fIwidth\fP Width of the screen 
.br
\fIheight\fP Height of the screen 
.br
\fIcolor_depth\fP Color depth of the screen 
.RE
.PP
\fBReturns\fP
.RS 4
True if the mode was set successfully, false otherwise 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::video::VideoDriver\fP\&.
.PP
Definition at line 40 of file vesa\&.cpp\&.
.PP
.nf
40                                                                                                                   {
41 
42     // Best mode is set by the bootloader
43     return true;
44 
45 
46 }
.fi
.SS "void VideoElectronicsStandardsAssociation::render_pixel_32_bit (uint32_t x, uint32_t y, uint32_t colour)\fC [final]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Renders a pixel on the screen in 32 bit mode\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate of the pixel 
.br
\fIy\fP The y coordinate of the pixel 
.br
\fIcolour\fP The 32bit colour of the pixel 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::common::GraphicsContext\fP\&.
.PP
Definition at line 72 of file vesa\&.cpp\&.
.PP
.nf
72                                                                                                       {
73 
74     // Get the address of the pixel
75     uint32_t*pixel_address = (uint32_t*)((uint8_t *)m_framebuffer_address + m_pitch * (y) + m_bpp * (x) / 8);
76 
77     // Set the pixel
78     *pixel_address = colour;
79 
80 }
.fi
.PP
References m_bpp, m_framebuffer_address, m_pitch, MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.SS "bool VideoElectronicsStandardsAssociation::supports_mode (uint32_t width, uint32_t height, uint32_t color_depth)\fC [final]\fP, \fC [virtual]\fP"

.PP
Checks if the VESA driver supports the given mode\&. 
.PP
\fBParameters\fP
.RS 4
\fIwidth\fP The m_width of the screen 
.br
\fIheight\fP The m_height of the screen 
.br
\fIcolor_depth\fP The color depth of the screen 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::video::VideoDriver\fP\&.
.PP
Definition at line 56 of file vesa\&.cpp\&.
.PP
.nf
56                                                                                                               {
57 
58     // Check if the mode is supported
59     if(width == (uint32_t)m_framebuffer_info->common\&.framebuffer_width && height == (uint32_t)m_framebuffer_info->common\&.framebuffer_height && color_depth == (uint32_t)m_framebuffer_info->common\&.framebuffer_bpp) {
60         return true;
61     }
62     return false;
63 }
.fi
.PP
References multiboot_tag_framebuffer::common, multiboot_tag_framebuffer_common::framebuffer_bpp, multiboot_tag_framebuffer_common::framebuffer_height, multiboot_tag_framebuffer_common::framebuffer_width, and m_framebuffer_info\&.
.SH "Member Data Documentation"
.PP 
.SS "uint8_t MaxOS::drivers::video::VideoElectronicsStandardsAssociation::m_bpp\fC [protected]\fP"

.PP
Definition at line 40 of file vesa\&.h\&.
.PP
Referenced by get_rendered_pixel_32_bit(), and render_pixel_32_bit()\&.
.SS "uint64_t* MaxOS::drivers::video::VideoElectronicsStandardsAssociation::m_framebuffer_address\fC [protected]\fP"

.PP
Definition at line 39 of file vesa\&.h\&.
.PP
Referenced by get_rendered_pixel_32_bit(), and render_pixel_32_bit()\&.
.SS "\fBmultiboot_tag_framebuffer\fP* MaxOS::drivers::video::VideoElectronicsStandardsAssociation::m_framebuffer_info\fC [protected]\fP"

.PP
Definition at line 37 of file vesa\&.h\&.
.PP
Referenced by supports_mode()\&.
.SS "uint16_t MaxOS::drivers::video::VideoElectronicsStandardsAssociation::m_pitch\fC [protected]\fP"

.PP
Definition at line 41 of file vesa\&.h\&.
.PP
Referenced by get_rendered_pixel_32_bit(), and render_pixel_32_bit()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
