.TH "MaxOS::drivers::console::VESABootConsole" 3 "Sat Mar 29 2025" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaxOS::drivers::console::VESABootConsole \- \fBDriver\fP for the VESA \fBConsole\fP during boot, handles the printing of characters and strings to the screen using VESA\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vesaboot\&.h>\fP
.PP
Inherits \fBMaxOS::drivers::Driver\fP, and \fBMaxOS::drivers::console::Console\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVESABootConsole\fP (\fBcommon::GraphicsContext\fP *)"
.br
.ti -1c
.RI "\fB~VESABootConsole\fP ()"
.br
.ti -1c
.RI "uint16_t \fBwidth\fP () final"
.br
.RI "Gets the width of the console\&. "
.ti -1c
.RI "uint16_t \fBheight\fP () final"
.br
.RI "Gets the height of the console\&. "
.ti -1c
.RI "void \fBput_character\fP (uint16_t x, uint16_t y, char) final"
.br
.RI "Places a character at the specified location\&. "
.ti -1c
.RI "void \fBset_foreground_color\fP (uint16_t x, uint16_t y, \fBcommon::ConsoleColour\fP) final"
.br
.RI "Sets the foreground color at the specified location\&. "
.ti -1c
.RI "void \fBset_background_color\fP (uint16_t x, uint16_t y, \fBcommon::ConsoleColour\fP) final"
.br
.RI "Sets the background color at the specified location\&. "
.ti -1c
.RI "void \fBscroll_up\fP (uint16_t left, uint16_t top, uint16_t \fBwidth\fP, uint16_t \fBheight\fP, \fBcommon::ConsoleColour\fP foreground, \fBcommon::ConsoleColour\fP background, char fill) final"
.br
.RI "Scrolls the console up by 1 line\&. "
.ti -1c
.RI "char \fBget_character\fP (uint16_t x, uint16_t y) final"
.br
.RI "Gets the character at the specified location\&. "
.ti -1c
.RI "\fBcommon::ConsoleColour\fP \fBget_foreground_color\fP (uint16_t x, uint16_t y) final"
.br
.RI "Gets the foreground color at the specified location\&. "
.ti -1c
.RI "\fBcommon::ConsoleColour\fP \fBget_background_color\fP (uint16_t x, uint16_t y) final"
.br
.RI "Gets the background color at the specified location\&. "
.ti -1c
.RI "void \fBprint_logo\fP ()"
.br
.RI "Prints the logo to the center of the screen\&. "
.ti -1c
.RI "void \fBprint_logo_kernel_panic\fP ()"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
\fBDriver\fP for the VESA \fBConsole\fP during boot, handles the printing of characters and strings to the screen using VESA\&. 
.PP
Definition at line 28 of file vesaboot\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "VESABootConsole::VESABootConsole (\fBcommon::GraphicsContext\fP * graphics_context)"

.PP
Definition at line 19 of file vesaboot\&.cpp\&.
.PP
.nf
20 : Driver(),
21   Console(),
22   m_graphics_context(graphics_context),
23   m_font((uint8_t*)AMIGA_FONT)
24 {
25 
26     // Malloc the video memory
27     m_video_memory = (uint16_t*)MemoryManager::kmalloc(width() * height() * sizeof(uint16_t));
28 }
.fi
.SS "VESABootConsole::~VESABootConsole ()"

.PP
Definition at line 30 of file vesaboot\&.cpp\&.
.PP
.nf
31 {
32 
33 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "\fBConsoleColour\fP VESABootConsole::get_background_color (uint16_t x, uint16_t y)\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the background color at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate
.RE
.PP
\fBReturns\fP
.RS 4
The background color at the specified location or black if the coordinates are out of bounds 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 224 of file vesaboot\&.cpp\&.
.PP
.nf
224                                                                           {
225 
226     // If the coordinates are out of bounds, return
227     if(x >= width() || y >= height())
228         return ConsoleColour::Black;
229 
230     // Calculate the offset
231     int offset = (y* width() + x);
232 
233     // Return the background color at the offset, by masking the background color with the current background color (bits 12-15)
234     return (ConsoleColour)((m_video_memory[offset] & 0xF000) >> 12);
235 }
.fi
.PP
References MaxOS::common::Black, height(), width(), MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.PP
Referenced by put_character()\&.
.SS "char VESABootConsole::get_character (uint16_t x, uint16_t y)\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the character at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate 
.RE
.PP
\fBReturns\fP
.RS 4
The character at the specified location or a space if the coordinates are out of bounds 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 184 of file vesaboot\&.cpp\&.
.PP
.nf
184                                                           {
185 
186     // If the coordinates are out of bounds, return
187     if(x >= width() || y >= height())
188         return ' ';
189 
190     // Calculate the offset
191     int offset = (y* width() + x);
192 
193     // Return the character at the offset, by masking the character with the current character (last 8 bits)
194     return (char)(m_video_memory[offset] & 0x00FF);
195 }
.fi
.PP
References height(), width(), MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.SS "\fBConsoleColour\fP VESABootConsole::get_foreground_color (uint16_t x, uint16_t y)\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the foreground color at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate 
.RE
.PP
\fBReturns\fP
.RS 4
The foreground color at the specified location or white if the coordinates are out of bounds 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 204 of file vesaboot\&.cpp\&.
.PP
.nf
204                                                                           {
205 
206     // If the coordinates are out of bounds, return
207     if(x >= width() || y >= height())
208         return ConsoleColour::White;
209 
210     // Calculate the offset
211     int offset = (y* width() + x);
212 
213     // Return the foreground color at the offset, by masking the foreground color with the current foreground color (bits 8-11)
214     return (ConsoleColour)((m_video_memory[offset] & 0x0F00) >> 8);
215 }
.fi
.PP
References height(), MaxOS::common::White, width(), MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.PP
Referenced by put_character()\&.
.SS "uint16_t VESABootConsole::height ()\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the height of the console\&. 
.PP
\fBReturns\fP
.RS 4
The height of the console in characters 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 50 of file vesaboot\&.cpp\&.
.PP
.nf
51 {
52     return m_graphics_context->get_height() / CHAR_HEIGHT;      // 8 pixels per character
53 }
.fi
.PP
References CHAR_HEIGHT, and MaxOS::common::GraphicsContext::get_height()\&.
.PP
Referenced by get_background_color(), get_character(), get_foreground_color(), kernelMain(), put_character(), scroll_up(), set_background_color(), and set_foreground_color()\&.
.SS "void VESABootConsole::print_logo ()"

.PP
Prints the logo to the center of the screen\&. 
.PP
Definition at line 240 of file vesaboot\&.cpp\&.
.PP
.nf
240                                  {
241 
242       // Load the logo
243       const char* logo = header_data;
244 
245       // Find the center of the screen
246       uint32_t center_x = m_graphics_context->get_width()/2;
247       uint32_t center_y = m_graphics_context->get_height()/2 + 20;
248 
249       // Draw the logo
250       for (uint32_t logoY = 0; logoY < logo_height; ++logoY) {
251         for (uint32_t logoX = 0; logoX < logo_width; ++logoX) {
252 
253           // Store the pixel in the logo
254           uint8_t pixel[3] = {0};
255 
256           // Get the pixel from the logo
257           LOGO_HEADER_PIXEL(logo, pixel);
258 
259           // Draw the pixel
260           m_graphics_context->put_pixel(center_x - logo_width / 2 + logoX,
261                                         center_y - logo_height / 2 + logoY,
262                                     common::Colour(pixel[0], pixel[1], pixel[2]));
263         }
264       }
265 }
.fi
.PP
Referenced by kernelMain()\&.
.SS "void VESABootConsole::print_logo_kernel_panic ()"

.PP
Definition at line 327 of file vesaboot\&.cpp\&.
.PP
.nf
327                                               {
328 
329   // Load the logo
330   const char* logo = header_data_kp;
331 
332   // Find the bottom right of the screen
333   uint32_t right_x = m_graphics_context->get_width() - kp_width - 10;
334   uint32_t bottom_y = m_graphics_context->get_height() - kp_height - 10;
335 
336   // Draw the logo
337   for (uint32_t logoY = 0; logoY < kp_height; ++logoY) {
338     for (uint32_t logoX = 0; logoX < kp_width; ++logoX) {
339 
340       // Store the pixel in the logo
341       uint8_t pixel[3] = {0};
342 
343       // Get the pixel from the logo
344       LOGO_HEADER_PIXEL(logo, pixel);
345 
346       // Draw the pixel
347       m_graphics_context->put_pixel(right_x + logoX, bottom_y + logoY, common::Colour(pixel[0], pixel[1], pixel[2]));
348     }
349   }
350 
351 }
.fi
.PP
Referenced by put_character()\&.
.SS "void VESABootConsole::put_character (uint16_t x, uint16_t y, char c)\fC [final]\fP, \fC [virtual]\fP"

.PP
Places a character at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate 
.br
\fIc\fP The character to place 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 61 of file vesaboot\&.cpp\&.
.PP
.nf
61                                                                   {
62 
63     // If the escaped code is \l and we are panicking, print the kernel panic logo
64     if (c == '\067' && CPU::is_panicking) {
65       print_logo_kernel_panic();
66       return;
67     }
68 
69     // Parse any ansi codes
70     if (c == '\033') {
71 
72       // Store the character
73       ansi_code_length = 0;
74       ansi_code[ansi_code_length++] = c;
75 
76       // Do not draw the escape character
77       return;
78 
79     } else if (ansi_code_length < 8) {
80 
81       // Add the character to the ANSI code
82       ansi_code[ansi_code_length++] = c;
83 
84       // If the ANSI code is complete
85       if (c == 'm') {
86         ansi_code[ansi_code_length] = '\0';
87         ansi_code_length = -1;
88 
89         if(strcmp("\033[0m", ansi_code)) {
90           m_foreground_color = ConsoleColour::Unititialised;
91           m_background_color = ConsoleColour::Unititialised;
92           return;
93         }
94 
95         // Get the colour from the ANSI code
96         Colour* colour = new Colour(ansi_code);
97 
98         // Set the colour
99         bool foreground = ansi_code[4] == '3';
100         if (foreground)
101           m_foreground_color = colour->to_console_colour();
102         else
103           m_background_color = colour->to_console_colour();
104 
105         // Delete the colour
106         delete colour;
107 
108       }
109 
110       // Do not draw the escape character
111       return;
112     }
113 
114     // If the coordinates are out of bounds, return
115     if(x >= width() || y >= height())
116         return;
117 
118     // Calculate the offset
119     int offset = (y* width() + x);
120 
121     // Set the character at the offset, by masking the character with the current character (last 8 bits)
122     m_video_memory[offset] = (m_video_memory[offset] & 0xFF00) | (uint16_t)c;
123 
124     // Convert the char into a string
125     char s[] = " ";
126     s[0] = c;
127 
128     Colour foreground = m_foreground_color == ConsoleColour::Unititialised ? get_foreground_color(x, y) : Colour(m_foreground_color);
129     Colour background = m_background_color == ConsoleColour::Unititialised ? get_background_color(x, y) : Colour(m_background_color);
130 
131     // Use the m_font to draw the character
132     m_font\&.draw_text(x * 8, y * CHAR_HEIGHT, foreground, background, m_graphics_context, s);
133 
134 }
.fi
.PP
References MaxOS::drivers::peripherals::c, CHAR_HEIGHT, MaxOS::gui::Font::draw_text(), get_background_color(), get_foreground_color(), height(), print_logo_kernel_panic(), MaxOS::drivers::peripherals::s, strcmp(), MaxOS::common::Colour::to_console_colour(), MaxOS::common::Unititialised, width(), MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.SS "void VESABootConsole::scroll_up (uint16_t left, uint16_t top, uint16_t width, uint16_t height, \fBcommon::ConsoleColour\fP foreground, \fBcommon::ConsoleColour\fP background, char fill)\fC [final]\fP, \fC [virtual]\fP"

.PP
Scrolls the console up by 1 line\&. 
.PP
Reimplemented from \fBMaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 271 of file vesaboot\&.cpp\&.
.PP
.nf
274                                                                            {
275 
276 
277   // Get the frambuffer info
278   uint64_t* framebuffer_address = (uint64_t*)m_graphics_context->get_framebuffer_address();
279   uint64_t  framebuffer_width   = m_graphics_context->get_width();
280   uint64_t  framebuffer_height  = m_graphics_context->get_height();
281   uint64_t  framebuffer_bpp     = m_graphics_context->get_color_depth();
282   uint64_t  framebuffer_pitch   = framebuffer_width * (framebuffer_bpp / 8);
283   uint64_t  framebuffer_size    = framebuffer_height * framebuffer_pitch;
284 
285 
286   // Location of 1 pixel m_pitch * (y) + m_bpp * (x) / 8
287 //  _kprintf("Framebuffer: bpp=%d, pitch=%d, size=%d\n", framebuffer_bpp, framebuffer_pitch, framebuffer_size);
288 
289   // Calculate the number of pixels per line
290   uint64_t amount_to_scroll = (CHAR_HEIGHT * framebuffer_pitch) / 8;
291   uint64_t amount_to_copy =  framebuffer_size - (8 * amount_to_scroll);
292 
293 
294   // Move the entire framebuffer up by 1 line
295   memmove((void*)framebuffer_address, (void*)(framebuffer_address +  amount_to_scroll), amount_to_copy);
296 
297   // Decide the colour of the pixel
298   ConsoleColour to_set_foreground = CPU::is_panicking ? ConsoleColour::White : foreground;
299   ConsoleColour to_set_background = CPU::is_panicking ? ConsoleColour::Red : background;
300   Colour fill_colour = Colour(to_set_background);
301 
302   // Clear the last line (set all pixels to the fill character)
303   uint16_t     y = top + height - 1;
304   for(uint16_t x = left; x < left+width; x++) {
305 
306     // Set the pixel
307     set_foreground_color(x, y, to_set_foreground);
308     set_background_color(x, y, to_set_background);
309   }
310 
311   // Get that start and num elements
312   uint8_t* start = (uint8_t*)(framebuffer_address + (CHAR_HEIGHT * (this->height() - 1) * framebuffer_pitch) / 8);
313   size_t num_elements = (8 * amount_to_scroll) / sizeof(uint32_t);
314 
315   // Cast the start pointer to a uint32_t pointer\&.
316   uint32_t* dest = (uint32_t*)(start);
317 
318   // Fill the range with the color
319   uint32_t fill_value = m_graphics_context ->colour_to_int(to_set_background);
320   for (size_t i = 0; i < num_elements; ++i) {
321     dest[i] = fill_value; // Use your desired 32-bit value\&.
322   }
323 
324 }
.fi
.PP
References CHAR_HEIGHT, MaxOS::common::GraphicsContext::colour_to_int(), MaxOS::common::GraphicsContext::get_color_depth(), MaxOS::common::GraphicsContext::get_framebuffer_address(), MaxOS::common::GraphicsContext::get_height(), MaxOS::common::GraphicsContext::get_width(), height(), MaxOS::drivers::peripherals::i, memmove(), MaxOS::common::Red, set_background_color(), set_foreground_color(), MaxOS::common::White, width(), MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.SS "void VESABootConsole::set_background_color (uint16_t x, uint16_t y, \fBcommon::ConsoleColour\fP background)\fC [final]\fP, \fC [virtual]\fP"

.PP
Sets the background color at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate 
.br
\fIbackground\fP The background color 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 163 of file vesaboot\&.cpp\&.
.PP
.nf
163                                                                                            {
164 
165     // If the coordinates are out of bounds, return
166     if(x >= width() || y >= height())
167         return;
168 
169     // Calculate the offset
170     int offset = (y* width() + x);
171 
172     // Set the background color at the offset, by masking the background color with the current background color (bits 12-15)
173     m_video_memory[offset] = (m_video_memory[offset] & 0x0FFF) | ((uint16_t)background << 12);
174 
175 }
.fi
.PP
References height(), width(), MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.PP
Referenced by scroll_up()\&.
.SS "void VESABootConsole::set_foreground_color (uint16_t x, uint16_t y, \fBcommon::ConsoleColour\fP foreground)\fC [final]\fP, \fC [virtual]\fP"

.PP
Sets the foreground color at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate 
.br
\fIforeground\fP The foreground color 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 143 of file vesaboot\&.cpp\&.
.PP
.nf
143                                                                                            {
144 
145     // If the coordinates are out of bounds, return
146     if(x >= width() || y >= height())
147         return;
148 
149     // Calculate the offset
150     int offset = (y* width() + x);
151 
152     // Set the foreground color at the offset, by masking the foreground color with the current foreground color (bits 8-11)
153     m_video_memory[offset] = (m_video_memory[offset] & 0xF0FF) | ((uint16_t)foreground << 8);
154 }
.fi
.PP
References height(), width(), MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.PP
Referenced by scroll_up()\&.
.SS "uint16_t VESABootConsole::width ()\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the width of the console\&. 
.PP
\fBReturns\fP
.RS 4
The width of the console in characters 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 40 of file vesaboot\&.cpp\&.
.PP
.nf
41 {
42     return m_graphics_context->get_width() / 8;       // 8 pixels per character
43 }
.fi
.PP
References MaxOS::common::GraphicsContext::get_width()\&.
.PP
Referenced by get_background_color(), get_character(), get_foreground_color(), kernelMain(), put_character(), scroll_up(), set_background_color(), and set_foreground_color()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
