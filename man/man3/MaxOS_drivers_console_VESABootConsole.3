.TH "MaxOS::drivers::console::VESABootConsole" 3 "Tue Feb 25 2025" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaxOS::drivers::console::VESABootConsole \- \fBDriver\fP for the VESA \fBConsole\fP during boot, handles the printing of characters and strings to the screen using VESA\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vesaboot\&.h>\fP
.PP
Inherits \fBMaxOS::drivers::Driver\fP, and \fBMaxOS::drivers::console::Console\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVESABootConsole\fP (\fBcommon::GraphicsContext\fP *)"
.br
.ti -1c
.RI "\fB~VESABootConsole\fP ()"
.br
.ti -1c
.RI "uint16_t \fBwidth\fP () final"
.br
.RI "Gets the width of the console\&. "
.ti -1c
.RI "uint16_t \fBheight\fP () final"
.br
.RI "Gets the height of the console\&. "
.ti -1c
.RI "void \fBput_character\fP (uint16_t x, uint16_t y, char) final"
.br
.RI "Places a character at the specified location\&. "
.ti -1c
.RI "void \fBset_foreground_color\fP (uint16_t x, uint16_t y, \fBcommon::ConsoleColour\fP) final"
.br
.RI "Sets the foreground color at the specified location\&. "
.ti -1c
.RI "void \fBset_background_color\fP (uint16_t x, uint16_t y, \fBcommon::ConsoleColour\fP) final"
.br
.RI "Sets the background color at the specified location\&. "
.ti -1c
.RI "char \fBget_character\fP (uint16_t x, uint16_t y) final"
.br
.RI "Gets the character at the specified location\&. "
.ti -1c
.RI "\fBcommon::ConsoleColour\fP \fBget_foreground_color\fP (uint16_t x, uint16_t y) final"
.br
.RI "Gets the foreground color at the specified location\&. "
.ti -1c
.RI "\fBcommon::ConsoleColour\fP \fBget_background_color\fP (uint16_t x, uint16_t y) final"
.br
.RI "Gets the background color at the specified location\&. "
.ti -1c
.RI "void \fBprint_logo\fP ()"
.br
.RI "Prints the logo to the center of the screen\&. "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
\fBDriver\fP for the VESA \fBConsole\fP during boot, handles the printing of characters and strings to the screen using VESA\&. 
.PP
Definition at line 25 of file vesaboot\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "VESABootConsole::VESABootConsole (\fBcommon::GraphicsContext\fP * graphics_context)"

.PP
Definition at line 15 of file vesaboot\&.cpp\&.
.PP
.nf
16 : Driver(),
17   Console(),
18   m_graphics_context(graphics_context),
19   m_font((uint8_t*)AMIGA_FONT)
20 {
21 
22     // Malloc the video memory
23     m_video_memory = (uint16_t*)MemoryManager::s_active_memory_manager->malloc(width() * height() * sizeof(uint16_t));
24 }
.fi
.SS "VESABootConsole::~VESABootConsole ()"

.PP
Definition at line 26 of file vesaboot\&.cpp\&.
.PP
.nf
27 {
28 
29 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "\fBConsoleColour\fP VESABootConsole::get_background_color (uint16_t x, uint16_t y)\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the background color at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate
.RE
.PP
\fBReturns\fP
.RS 4
The background color at the specified location or black if the coordinates are out of bounds 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 216 of file vesaboot\&.cpp\&.
.PP
.nf
216                                                                           {
217 
218     // If the coordinates are out of bounds, return
219     if(x >= width() || y >= height())
220         return ConsoleColour::Black;
221 
222     // Calculate the offset
223     int offset = (y* width() + x);
224 
225     // Return the background color at the offset, by masking the background color with the current background color (bits 12-15)
226     return (ConsoleColour)((m_video_memory[offset] & 0xF000) >> 12);
227 }
.fi
.PP
References MaxOS::common::Black, height(), width(), MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.PP
Referenced by put_character()\&.
.SS "char VESABootConsole::get_character (uint16_t x, uint16_t y)\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the character at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate 
.RE
.PP
\fBReturns\fP
.RS 4
The character at the specified location or a space if the coordinates are out of bounds 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 176 of file vesaboot\&.cpp\&.
.PP
.nf
176                                                           {
177 
178     // If the coordinates are out of bounds, return
179     if(x >= width() || y >= height())
180         return ' ';
181 
182     // Calculate the offset
183     int offset = (y* width() + x);
184 
185     // Return the character at the offset, by masking the character with the current character (last 8 bits)
186     return (char)(m_video_memory[offset] & 0x00FF);
187 }
.fi
.PP
References height(), width(), MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.SS "\fBConsoleColour\fP VESABootConsole::get_foreground_color (uint16_t x, uint16_t y)\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the foreground color at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate 
.RE
.PP
\fBReturns\fP
.RS 4
The foreground color at the specified location or white if the coordinates are out of bounds 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 196 of file vesaboot\&.cpp\&.
.PP
.nf
196                                                                           {
197 
198     // If the coordinates are out of bounds, return
199     if(x >= width() || y >= height())
200         return ConsoleColour::White;
201 
202     // Calculate the offset
203     int offset = (y* width() + x);
204 
205     // Return the foreground color at the offset, by masking the foreground color with the current foreground color (bits 8-11)
206     return (ConsoleColour)((m_video_memory[offset] & 0x0F00) >> 8);
207 }
.fi
.PP
References height(), MaxOS::common::White, width(), MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.PP
Referenced by put_character()\&.
.SS "uint16_t VESABootConsole::height ()\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the height of the console\&. 
.PP
\fBReturns\fP
.RS 4
The height of the console in characters 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 46 of file vesaboot\&.cpp\&.
.PP
.nf
47 {
48     return m_graphics_context->get_height() / 9;      // 9 pixels per character
49 }
.fi
.PP
References MaxOS::common::GraphicsContext::get_height()\&.
.PP
Referenced by get_background_color(), get_character(), get_foreground_color(), kernelMain(), put_character(), set_background_color(), and set_foreground_color()\&.
.SS "void VESABootConsole::print_logo ()"

.PP
Prints the logo to the center of the screen\&. 
.PP
Definition at line 232 of file vesaboot\&.cpp\&.
.PP
.nf
232                                  {
233 
234       // Load the logo
235       const char* logo = header_data;
236 
237       // Find the center of the screen
238       uint32_t center_x = m_graphics_context->get_width()/2;
239       uint32_t center_y = m_graphics_context->get_height()/2 + 20;
240 
241       // Draw the logo
242       for (uint32_t logoY = 0; logoY < logo_height; ++logoY) {
243         for (uint32_t logoX = 0; logoX < logo_width; ++logoX) {
244 
245           // Store the pixel in the logo
246           uint8_t pixel[3] = {0};
247 
248           // Get the pixel from the logo
249           LOGO_HEADER_PIXEL(logo, pixel);
250 
251           // Draw the pixel
252           m_graphics_context->put_pixel(center_x - logo_width / 2 + logoX,
253                                         center_y - logo_height / 2 + logoY,
254                                     common::Colour(pixel[0], pixel[1], pixel[2]));
255         }
256       }
257 }
.fi
.PP
Referenced by kernelMain()\&.
.SS "void VESABootConsole::put_character (uint16_t x, uint16_t y, char c)\fC [final]\fP, \fC [virtual]\fP"

.PP
Places a character at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate 
.br
\fIc\fP The character to place 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 57 of file vesaboot\&.cpp\&.
.PP
.nf
57                                                                   {
58 
59 
60     // Parse any ansi codes
61     if (c == '\033') {
62 
63       // Store the character
64       ansi_code_length = 0;
65       ansi_code[ansi_code_length++] = c;
66 
67       // Do not draw the escape character
68       return;
69 
70     } else if (ansi_code_length != -1 && ansi_code_length < 8) {
71 
72       // Add the character to the ANSI code
73       ansi_code[ansi_code_length++] = c;
74 
75       // If the ANSI code is complete
76       if (c == 'm') {
77         ansi_code[ansi_code_length] = '\0';
78         ansi_code_length = -1;
79 
80         if(strcmp("\033[0m", ansi_code)) {
81           m_foreground_color = ConsoleColour::Unititialised;
82           m_background_color = ConsoleColour::Unititialised;
83           return;
84         }
85 
86         // Get the colour from the ANSI code
87         Colour* colour = new Colour(ansi_code);
88 
89         // Set the colour
90         bool foreground = ansi_code[4] == '3';
91         if (foreground)
92           m_foreground_color = colour->to_console_colour();
93         else
94           m_background_color = colour->to_console_colour();
95 
96         // Delete the colour
97         delete colour;
98 
99       }
100 
101       // Do not draw the escape character
102       return;
103     }
104 
105     // If the coordinates are out of bounds, return
106     if(x >= width() || y >= height())
107         return;
108 
109     // Calculate the offset
110     int offset = (y* width() + x);
111 
112     // Set the character at the offset, by masking the character with the current character (last 8 bits)
113     m_video_memory[offset] = (m_video_memory[offset] & 0xFF00) | (uint16_t)c;
114 
115     // Convert the char into a string
116     char s[] = " ";
117     s[0] = c;
118 
119 
120     Colour foreground = m_foreground_color == ConsoleColour::Unititialised ? get_foreground_color(x, y) : Colour(m_foreground_color);
121     Colour background = m_background_color == ConsoleColour::Unititialised ? get_background_color(x, y) : Colour(m_background_color);
122 
123     // Use the m_font to draw the character
124     m_font\&.draw_text(x * 8, y * 9, foreground, background, m_graphics_context, s);
125 
126 }
.fi
.PP
References MaxOS::drivers::peripherals::c, MaxOS::gui::Font::draw_text(), get_background_color(), get_foreground_color(), height(), MaxOS::drivers::peripherals::s, strcmp(), MaxOS::common::Colour::to_console_colour(), MaxOS::common::Unititialised, width(), MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.SS "void VESABootConsole::set_background_color (uint16_t x, uint16_t y, \fBcommon::ConsoleColour\fP background)\fC [final]\fP, \fC [virtual]\fP"

.PP
Sets the background color at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate 
.br
\fIbackground\fP The background color 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 155 of file vesaboot\&.cpp\&.
.PP
.nf
155                                                                                            {
156 
157     // If the coordinates are out of bounds, return
158     if(x >= width() || y >= height())
159         return;
160 
161     // Calculate the offset
162     int offset = (y* width() + x);
163 
164     // Set the background color at the offset, by masking the background color with the current background color (bits 12-15)
165     m_video_memory[offset] = (m_video_memory[offset] & 0x0FFF) | ((uint16_t)background << 12);
166 
167 }
.fi
.PP
References height(), width(), MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.SS "void VESABootConsole::set_foreground_color (uint16_t x, uint16_t y, \fBcommon::ConsoleColour\fP foreground)\fC [final]\fP, \fC [virtual]\fP"

.PP
Sets the foreground color at the specified location\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate 
.br
\fIforeground\fP The foreground color 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 135 of file vesaboot\&.cpp\&.
.PP
.nf
135                                                                                            {
136 
137     // If the coordinates are out of bounds, return
138     if(x >= width() || y >= height())
139         return;
140 
141     // Calculate the offset
142     int offset = (y* width() + x);
143 
144     // Set the foreground color at the offset, by masking the foreground color with the current foreground color (bits 8-11)
145     m_video_memory[offset] = (m_video_memory[offset] & 0xF0FF) | ((uint16_t)foreground << 8);
146 }
.fi
.PP
References height(), width(), MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.SS "uint16_t VESABootConsole::width ()\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the width of the console\&. 
.PP
\fBReturns\fP
.RS 4
The width of the console in characters 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::drivers::console::Console\fP\&.
.PP
Definition at line 36 of file vesaboot\&.cpp\&.
.PP
.nf
37 {
38     return m_graphics_context->get_width() / 8;       // 8 pixels per character
39 }
.fi
.PP
References MaxOS::common::GraphicsContext::get_width()\&.
.PP
Referenced by get_background_color(), get_character(), get_foreground_color(), kernelMain(), put_character(), set_background_color(), and set_foreground_color()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
