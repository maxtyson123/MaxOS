.TH "MaxOS::system::CPU" 3 "Mon Jan 29 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaxOS::system::CPU
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <cpu\&.h>\fP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBhalt\fP ()"
.br
.ti -1c
.RI "static void \fBget_status\fP (cpu_status_t *\fBstatus\fP)"
.br
.ti -1c
.RI "static void \fBset_status\fP (cpu_status_t *\fBstatus\fP)"
.br
.ti -1c
.RI "static uint64_t \fBread_msr\fP (uint32_t msr)"
.br
.ti -1c
.RI "static void \fBwrite_msr\fP (uint32_t msr, uint64_t value)"
.br
.ti -1c
.RI "static void \fBcpuid\fP (uint32_t leaf, uint32_t *\fBeax\fP, uint32_t *\fBebx\fP, uint32_t *\fBecx\fP, uint32_t *\fBedx\fP)"
.br
.ti -1c
.RI "static void \fBstack_trace\fP (size_t)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 48 of file cpu\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void MaxOS::system::CPU::cpuid (uint32_t leaf, uint32_t * eax, uint32_t * ebx, uint32_t * ecx, uint32_t * edx)\fC [static]\fP"

.PP
Definition at line 71 of file cpu\&.cpp\&.
.PP
.nf
71                                                                                                     {
72 
73   // Call the cpuid instruction
74   __get_cpuid(leaf, eax, ebx, ecx, edx);
75 }
.fi
.PP
References eax, ebx, ecx, and edx\&.
.SS "void MaxOS::system::CPU::get_status (cpu_status_t * status)\fC [static]\fP"

.PP
Definition at line 11 of file cpu\&.cpp\&.
.PP
.nf
11                                                                {
12 
13     // Get the registers
14     asm volatile("mov %%r15, %0" : "=r" (status->r15));
15     asm volatile("mov %%r14, %0" : "=r" (status->r14));
16     asm volatile("mov %%r13, %0" : "=r" (status->r13));
17     asm volatile("mov %%r12, %0" : "=r" (status->r12));
18     asm volatile("mov %%r11, %0" : "=r" (status->r11));
19     asm volatile("mov %%r10, %0" : "=r" (status->r10));
20     asm volatile("mov %%r9, %0" : "=r" (status->r9));
21     asm volatile("mov %%r8, %0" : "=r" (status->r8));
22     asm volatile("mov %%rdi, %0" : "=r" (status->rdi));
23     asm volatile("mov %%rsi, %0" : "=r" (status->rsi));
24     asm volatile("mov %%rbp, %0" : "=r" (status->rbp));
25     asm volatile("mov %%rdx, %0" : "=r" (status->rdx));
26     asm volatile("mov %%rcx, %0" : "=r" (status->rcx));
27     asm volatile("mov %%rbx, %0" : "=r" (status->rbx));
28     asm volatile("mov %%rax, %0" : "=r" (status->rax));
29 
30 }
.fi
.PP
References status\&.
.SS "void MaxOS::system::CPU::halt ()\fC [static]\fP"

.PP
Definition at line 7 of file cpu\&.cpp\&.
.PP
.nf
7                           {
8   asm volatile("hlt");
9 }
.fi
.PP
Referenced by kernelMain()\&.
.SS "uint64_t MaxOS::system::CPU::read_msr (uint32_t msr)\fC [static]\fP"

.PP
Definition at line 52 of file cpu\&.cpp\&.
.PP
.nf
52                                               {
53 
54   // Low and high parts of the MSR
55   uint32_t low, high;
56 
57   // Read the MSR
58   asm volatile("rdmsr" : "=a" (low), "=d" (high) : "c" (msr));
59 
60   // Return the value
61   return (uint64_t) low | ((uint64_t) high << 32);
62 
63 }
.fi
.SS "void MaxOS::system::CPU::set_status (cpu_status_t * status)\fC [static]\fP"

.PP
Definition at line 31 of file cpu\&.cpp\&.
.PP
.nf
31                                                                {
32 
33   // Set the registers
34   asm volatile("mov %0, %%r15" : : "r" (status->r15));
35   asm volatile("mov %0, %%r14" : : "r" (status->r14));
36   asm volatile("mov %0, %%r13" : : "r" (status->r13));
37   asm volatile("mov %0, %%r12" : : "r" (status->r12));
38   asm volatile("mov %0, %%r11" : : "r" (status->r11));
39   asm volatile("mov %0, %%r10" : : "r" (status->r10));
40   asm volatile("mov %0, %%r9" : : "r" (status->r9));
41   asm volatile("mov %0, %%r8" : : "r" (status->r8));
42   asm volatile("mov %0, %%rdi" : : "r" (status->rdi));
43   asm volatile("mov %0, %%rsi" : : "r" (status->rsi));
44   asm volatile("mov %0, %%rbp" : : "r" (status->rbp));
45   asm volatile("mov %0, %%rdx" : : "r" (status->rdx));
46   asm volatile("mov %0, %%rcx" : : "r" (status->rcx));
47   asm volatile("mov %0, %%rbx" : : "r" (status->rbx));
48   asm volatile("mov %0, %%rax" : : "r" (status->rax));
49 
50 }
.fi
.PP
References status\&.
.SS "void MaxOS::system::CPU::stack_trace (size_t level)\fC [static]\fP"

.PP
Definition at line 77 of file cpu\&.cpp\&.
.PP
.nf
77                                              {
78 
79     // Get the first stack frame
80     StackFrame* frame = __builtin_frame_address(0);
81     size_t current_level = 0;
82 
83     // Loop through the frames logging
84     while (current_level < level && frame != nullptr){
85 
86         // Print the frame
87         _kprintf("(%d);\t at 0x%x\n", current_level, frame->rip);
88 
89         // Next frame
90         frame = frame -> next;
91         current_level++;
92 
93     }
94 }
.fi
.PP
References _kprintf(), and MaxOS::system::StackFrame::rip\&.
.SS "void MaxOS::system::CPU::write_msr (uint32_t msr, uint64_t value)\fC [static]\fP"

.PP
Definition at line 65 of file cpu\&.cpp\&.
.PP
.nf
65                                                            {
66 
67   // Write the MSR
68   asm volatile("wrmsr" : : "a" ((uint32_t) value), "d" ((uint32_t) (value >> 32)), "c" (msr));
69 
70 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
