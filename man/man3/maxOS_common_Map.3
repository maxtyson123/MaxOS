.TH "maxOS::common::Map< Key, Value >" 3 "Fri Jan 5 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
maxOS::common::Map< Key, Value > \- A list of key-value pairs\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <map\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBVector\fP< \fBPair\fP< Key, Value > >::\fBiterator\fP \fBiterator\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMap\fP ()"
.br
.ti -1c
.RI "\fB~Map\fP ()"
.br
.ti -1c
.RI "Value & \fBoperator[]\fP (Key)"
.br
.RI "Overloads the [] operator to return the value of the key\&. "
.ti -1c
.RI "\fBiterator\fP \fBbegin\fP ()"
.br
.RI "Returns the beginning of the map\&. "
.ti -1c
.RI "\fBiterator\fP \fBend\fP ()"
.br
.RI "Returns the end of the map\&. "
.ti -1c
.RI "\fBiterator\fP \fBfind\fP (Key)"
.br
.RI "Finds an element in the map based on the key\&. "
.ti -1c
.RI "bool \fBempty\fP ()"
.br
.RI "Returns whether the map is empty\&. "
.ti -1c
.RI "void \fBclear\fP ()"
.br
.RI "Removes all elements from the map\&. "
.ti -1c
.RI "void \fBinsert\fP (Key, Value)"
.br
.RI "Updates the value of an element, or adds a new element if it does not exist\&. "
.ti -1c
.RI "void \fBerase\fP (Key)"
.br
.RI "Removes an element from the map\&. "
.ti -1c
.RI "void \fBiterate\fP (\fBMapIterationHandler\fP< Key, Value > *handler)"
.br
.RI "Iterates through the map and calls the handler\&. "
.ti -1c
.RI "void \fBiterate\fP (void callback(Key &, Value &))"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBVector\fP< \fBPair\fP< Key, Value > > \fBm_elements\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class Key, class Value>
.br
class maxOS::common::Map< Key, Value >"
A list of key-value pairs\&. 


.PP
\fBTemplate Parameters\fP
.RS 4
\fIKey\fP The key type 
.br
\fIValue\fP The value type 
.RE
.PP

.PP
Definition at line 39 of file map\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<class Key , class Value > typedef \fBVector\fP<\fBPair\fP<Key, Value> >::\fBiterator\fP \fBmaxOS::common::Map\fP< Key, Value >::\fBiterator\fP"

.PP
Definition at line 45 of file map\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class Key , class Value > \fBmaxOS::common::Map\fP< Key, Value >::\fBMap\fP"

.PP
Definition at line 94 of file map\&.h\&.
.PP
.nf
94                                                               {
95 
96         }
.fi
.SS "template<class Key , class Value > \fBmaxOS::common::Map\fP< Key, Value >::~\fBMap\fP"

.PP
Definition at line 98 of file map\&.h\&.
.PP
.nf
98                                                                {
99 
100         }
.fi
.SH "Member Function Documentation"
.PP 
.SS "template<class Key , class Value > \fBMap\fP< Key, Value >::\fBiterator\fP \fBmaxOS::common::Map\fP< Key, Value >::begin"

.PP
Returns the beginning of the map\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIKey\fP The key type 
.br
\fIValue\fP The value type 
.RE
.PP
\fBReturns\fP
.RS 4
The m_first_memory_chunk element in the map 
.RE
.PP

.PP
Definition at line 123 of file map\&.h\&.
.PP
.nf
123                                                                                                  {
124             return m_elements\&.begin();
125         }
.fi
.SS "template<class Key , class Value > void \fBmaxOS::common::Map\fP< Key, Value >::clear"

.PP
Removes all elements from the map\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIKey\fP The key type 
.br
\fIValue\fP The value type 
.RE
.PP

.PP
Definition at line 180 of file map\&.h\&.
.PP
.nf
180                                                                      {
181           m_elements\&.clear();
182         }
.fi
.SS "template<class Key , class Value > bool \fBmaxOS::common::Map\fP< Key, Value >::empty"

.PP
Returns whether the map is empty\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIKey\fP The key type 
.br
\fIValue\fP The value type 
.RE
.PP
\fBReturns\fP
.RS 4
Whether the map is empty 
.RE
.PP

.PP
Definition at line 170 of file map\&.h\&.
.PP
.nf
170                                                                      {
171             return m_elements\&.empty();
172         }
.fi
.SS "template<class Key , class Value > \fBMap\fP< Key, Value >::\fBiterator\fP \fBmaxOS::common::Map\fP< Key, Value >::end"

.PP
Returns the end of the map\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIKey\fP The key type 
.br
\fIValue\fP The value type 
.RE
.PP
\fBReturns\fP
.RS 4
The last element in the map 
.RE
.PP

.PP
Definition at line 134 of file map\&.h\&.
.PP
.nf
134                                                                                                {
135             return m_elements\&.end();
136         }
.fi
.PP
Referenced by maxOS::net::AddressResolutionProtocol::Resolve()\&.
.SS "template<class Key , class Value > void \fBmaxOS::common::Map\fP< Key, Value >::erase (Key key)"

.PP
Removes an element from the map\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIKey\fP The key type 
.br
\fIValue\fP The value type 
.RE
.PP
\fBParameters\fP
.RS 4
\fIkey\fP The key of the element to remove 
.RE
.PP

.PP
Definition at line 213 of file map\&.h\&.
.PP
.nf
213                                                                             {
214 
215             // Find the element
216             iterator it = find(key);
217 
218             // If the element is found then remove it
219             if (it != end()) {
220                 m_elements\&.erase(it);
221             }
222 
223         }
.fi
.SS "template<class Key , class Value > \fBMap\fP< Key, Value >::\fBiterator\fP \fBmaxOS::common::Map\fP< Key, Value >::find (Key element)"

.PP
Finds an element in the map based on the key\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIKey\fP The key type 
.br
\fIValue\fP The value type 
.RE
.PP
\fBParameters\fP
.RS 4
\fIelement\fP The key to search for 
.RE
.PP
\fBReturns\fP
.RS 4
The iterator of the element, or the end iterator if not found 
.RE
.PP

.PP
Definition at line 146 of file map\&.h\&.
.PP
.nf
146                                                                                                            {
147 
148             // Loop through the elements
149             for (iterator it = begin(); it != end(); it++) {
150 
151                 // If the key of the current element is equal to the key we are looking for
152                 if (it -> first == element) {
153                     // Return the iterator
154                     return it;
155                 }
156             }
157 
158             // If it is not found, return the end iterator
159             return end();
160 
161         }
.fi
.PP
Referenced by maxOS::net::AddressResolutionProtocol::Resolve()\&.
.SS "template<class Key , class Value > void \fBmaxOS::common::Map\fP< Key, Value >::insert (Key key, Value value)"

.PP
Updates the value of an element, or adds a new element if it does not exist\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIKey\fP The key type 
.br
\fIValue\fP The value type 
.RE
.PP
\fBParameters\fP
.RS 4
\fIkey\fP The key of the new element 
.br
\fIvalue\fP The value of the new element 
.RE
.PP

.PP
Definition at line 192 of file map\&.h\&.
.PP
.nf
192                                                                                           {
193 
194             // Find the element
195             iterator it = find(key);
196 
197             // If the element is found then update the value
198             if (it != end()) {
199                 it -> second = value;
200             } else {
201                 // Otherwise, add a new element
202                 m_elements\&.push_back(Pair<Key, Value>(key, value));
203             }
204         }
.fi
.PP
Referenced by maxOS::net::AddressResolutionProtocol::handleEthernetFramePayload(), and maxOS::net::AddressResolutionProtocol::Store()\&.
.SS "template<class Key , class Value > void \fBmaxOS::common::Map\fP< Key, Value >::iterate (\fBMapIterationHandler\fP< Key, Value > * handler)"

.PP
Iterates through the map and calls the handler\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIKey\fP The key type 
.br
\fIValue\fP The value type 
.RE
.PP
\fBParameters\fP
.RS 4
\fIhandler\fP The handler to call 
.RE
.PP

.PP
Definition at line 232 of file map\&.h\&.
.PP
.nf
232                                                                                                                {
233 
234             // Loop through the elements
235             for(auto& it : m_elements) {
236 
237                 // Call the handler
238                 handler->on_read(it\&.first, it\&.second);
239             }
240 
241             // Call the handler
242             handler->on_end_of_stream();
243 
244         }
.fi
.SS "template<class Key , class Value > void \fBmaxOS::common::Map\fP< Key, Value >::iterate (void  callbackKey &, Value &)"

.SS "template<class Key , class Value > Value & \fBmaxOS::common::Map\fP< Key, Value >::operator[] (Key key)"

.PP
Overloads the [] operator to return the value of the key\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIKey\fP The key type 
.br
\fIValue\fP The value type 
.RE
.PP
\fBParameters\fP
.RS 4
\fIkey\fP The key to search for 
.RE
.PP
\fBReturns\fP
.RS 4
The value of the key 
.RE
.PP

.PP
Definition at line 110 of file map\&.h\&.
.PP
.nf
110                                                                                    {
111 
112             // Return the value of the key (second item in the pair)
113             return find(key) -> second;
114         }
.fi
.SH "Member Data Documentation"
.PP 
.SS "template<class Key , class Value > \fBVector\fP<\fBPair\fP<Key, Value> > \fBmaxOS::common::Map\fP< Key, Value >::m_elements\fC [protected]\fP"

.PP
Definition at line 42 of file map\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
