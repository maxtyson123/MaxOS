.TH "/home/runner/work/MaxOS/MaxOS/kernel/src/kernel.cpp" 3 "Sun Oct 13 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/runner/work/MaxOS/MaxOS/kernel/src/kernel.cpp
.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br
\fC#include <common/version\&.h>\fP
.br
\fC#include <common/kprint\&.h>\fP
.br
\fC#include <hardwarecommunication/interrupts\&.h>\fP
.br
\fC#include <hardwarecommunication/pci\&.h>\fP
.br
\fC#include <hardwarecommunication/acpi\&.h>\fP
.br
\fC#include <hardwarecommunication/apic\&.h>\fP
.br
\fC#include <drivers/disk/ata\&.h>\fP
.br
\fC#include <drivers/console/console\&.h>\fP
.br
\fC#include <drivers/console/serial\&.h>\fP
.br
\fC#include <drivers/console/textmode\&.h>\fP
.br
\fC#include <drivers/console/vesaboot\&.h>\fP
.br
\fC#include <drivers/driver\&.h>\fP
.br
\fC#include <drivers/ethernet/amd_am79c973\&.h>\fP
.br
\fC#include <drivers/peripherals/keyboard\&.h>\fP
.br
\fC#include <drivers/peripherals/mouse\&.h>\fP
.br
\fC#include <drivers/video/vesa\&.h>\fP
.br
\fC#include <drivers/video/video\&.h>\fP
.br
\fC#include <gui/desktop\&.h>\fP
.br
\fC#include <gui/window\&.h>\fP
.br
\fC#include <gui/widgets/text\&.h>\fP
.br
\fC#include <gui/widgets/button\&.h>\fP
.br
\fC#include <gui/widgets/inputbox\&.h>\fP
.br
\fC#include <net/ethernetframe\&.h>\fP
.br
\fC#include <net/arp\&.h>\fP
.br
\fC#include <net/ipv4\&.h>\fP
.br
\fC#include <net/icmp\&.h>\fP
.br
\fC#include <net/udp\&.h>\fP
.br
\fC#include <net/tcp\&.h>\fP
.br
\fC#include <system/process\&.h>\fP
.br
\fC#include <system/cpu\&.h>\fP
.br
\fC#include <system/syscalls\&.h>\fP
.br
\fC#include <memory/memorymanagement\&.h>\fP
.br
\fC#include <system/multithreading\&.h>\fP
.br
\fC#include <memory/physical\&.h>\fP
.br
\fC#include <memory/virtual\&.h>\fP
.br
\fC#include <filesystem/msdospart\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBGUI\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fBconstructor\fP) ()"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBcallConstructors\fP ()"
.br
.ti -1c
.RI "bool \fBcheck_multiboot_flag\fP (uint32_t \fBflags\fP, uint32_t bit)"
.br
.ti -1c
.RI "void \fBprint_boot_header\fP (\fBConsole\fP *console)"
.br
.ti -1c
.RI "void \fBkernelMain\fP (unsigned long addr, unsigned long magic)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBconstructor\fP \fBstart_ctors\fP"
.br
.ti -1c
.RI "\fBconstructor\fP \fBend_ctors\fP"
.br
.ti -1c
.RI "volatile uint64_t \fBp4_table\fP [512]"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define GUI"

.SH "Typedef Documentation"
.PP 
.SS "typedef void(* constructor) ()"

.PP
Definition at line 70 of file kernel\&.cpp\&.
.SH "Function Documentation"
.PP 
.SS "void callConstructors ()"

.PP
Definition at line 75 of file kernel\&.cpp\&.
.PP
.nf
76 {
77     for(constructor* i = &start_ctors; i != &end_ctors; i++)        //Iterate over all constructors
78         (*i)();                                                     //Call the constructor
79 }
.fi
.PP
References end_ctors, MaxOS::drivers::peripherals::i, and start_ctors\&.
.SS "bool check_multiboot_flag (uint32_t flags, uint32_t bit)"

.PP
Definition at line 82 of file kernel\&.cpp\&.
.PP
.nf
83 {
84     return (flags & (1 << bit)) > 0;
85 }
.fi
.PP
References flags\&.
.SS "void kernelMain (unsigned long addr, unsigned long magic)"

.PP
Definition at line 110 of file kernel\&.cpp\&.
.PP
.nf
111 {
112 
113     // Initialise the serial console
114     SerialConsole serialConsole;
115 
116     // Make the multiboot header
117     Multiboot multiboot(addr);
118 
119     _kprintf("-= MaxOS booted =-\n");
120 
121     InterruptManager interrupts(0x20, 0);
122     _kprintf("-= IDT set up =-\n");
123 
124     uint32_t mbi_size = *(uint32_t *) (addr + MemoryManager::s_higher_half_kernel_offset);
125     PhysicalMemoryManager pmm(addr + mbi_size, &multiboot, p4_table);
126     _kprintf("-= Physical Memory Manager set up =-\n");
127 
128     VirtualMemoryManager vmm(true);
129     _kprintf("-= Virtual Memory Manager set up =-\n");
130 
131 
132     // Initialise the memory manager
133     MemoryManager memoryManager(&vmm);
134     _kprintf("-= Memory Manager set up =-\n");
135 
136     // Now entered the gui space
137     _kprintf("__ Basic System Setup [DONE] __\n");
138 
139     while (true) {
140       system::CPU::halt();
141     }
142 
143 
144     // TODO: 64 bit architecture rewrite
145     //  - Convert old codebase to higher half
146     //  - APIC and ACPI
147     //  - Rewrite read me
148 
149     // Initialise the VESA Driver
150     VideoElectronicsStandardsAssociation vesa(multiboot\&.get_framebuffer());
151     VideoDriver* videoDriver = (VideoDriver*)&vesa;
152     videoDriver->set_mode((int)multiboot\&.get_framebuffer()->common\&.framebuffer_width,
153                           (int)multiboot\&.get_framebuffer()->common\&.framebuffer_height,
154                           (int)multiboot\&.get_framebuffer()->common\&.framebuffer_bpp);
155 
156     // Initialise Console
157     VESABootConsole console(&vesa);
158     console\&.clear();
159     console\&.print_logo();
160 
161 
162 
163     // Create a stream for the console
164     ConsoleArea mainConsoleArea(&console, 0, 1, console\&.width(), console\&.height(), ConsoleColour::DarkGrey, ConsoleColour::Black);
165     ConsoleStream cout(&mainConsoleArea);
166 
167     if(magic == MULTIBOOT2_BOOTLOADER_MAGIC)
168         cout << "Multiboot2 Bootloader Detected\n";
169 
170     return;
171 
172     // Print the header
173     print_boot_header(&console);
174 
175     // Print the build info
176     cout << "BUILD INFO: " << VERSION_NAME << " on " << BUILD_DATE\&.year << "-" << BUILD_DATE\&.month << "-" << BUILD_DATE\&.day << " at " << BUILD_DATE\&.hour << ":" << BUILD_DATE\&.minute << ":" << BUILD_DATE\&.second << " " << " (commit " << GIT_REVISION << " on " << GIT_BRANCH << " by " << GIT_AUTHOR << ")\n";
177 
178     // Where the areas should start
179     cout\&.set_cursor(cout\&.m_cursor_x, cout\&.m_cursor_y + 1); //Move the cursor down one (so the header is not overwritten
180     uint32_t areaStart = cout\&.m_cursor_y;
181 
182     // Make the system setup stream
183     ConsoleArea systemSetupHeader(&console, 0, areaStart, console\&.width(), 1, ConsoleColour::LightGrey, ConsoleColour::Black);
184     ConsoleStream systemSetupHeaderStream(&systemSetupHeader);
185     systemSetupHeaderStream << "Setting up system";
186 
187     // Stuff done earlier
188     cout << "-- Set Up Paging\n";
189     cout << "-- Set Up Interrupt Manager\n";
190     cout << "-- Set Up Physical Memory Management\n";
191     cout << "-- Set Up Virtual Memory Management\n";
192     cout << "-- Set Up Memory Management (Kernel)\n";
193     cout << "-- Set Up VESA Driver\n";
194     systemSetupHeaderStream << "\&.\&.\&.\&.\&.\&.";
195 
196     ThreadManager threadManager;
197     cout << "-- Set Up Thread Management\n";
198     systemSetupHeaderStream << "\&.";
199 
200     SyscallHandler syscalls(&interrupts, 0x80);                               //Instantiate the function
201     cout << "-- Set Up System Calls\n";
202     systemSetupHeaderStream << "\&.";
203 
204     cout << "\n";
205     systemSetupHeaderStream << "[ DONE ]";
206 
207     // Make the device setup stream
208     ConsoleArea deviceSetupHeader(&console, 0, cout\&.m_cursor_y, console\&.width(), 1, ConsoleColour::LightGrey, ConsoleColour::Black);
209     ConsoleStream deviceSetupHeaderStream(&deviceSetupHeader);
210     deviceSetupHeaderStream << "Setting up devices";
211     
212     DriverManager driverManager;
213 
214     //TODO: ACPI
215     AdvancedConfigurationAndPowerInterface acpi(&multiboot);
216     cout << "-- Set Up ACPI\n";
217     deviceSetupHeaderStream << "\&.";
218 
219     //TODO: APIC
220     AdvancedProgrammableInterruptController apic(&acpi);
221     cout << "-- Set Up APIC\n";
222     deviceSetupHeaderStream << "\&.";
223 
224     // Keyboard
225     KeyboardDriver keyboard(&interrupts);
226     KeyboardInterpreterEN_US keyboardInterpreter;
227     keyboard\&.connect_input_stream_event_handler(&keyboardInterpreter);
228     driverManager\&.add_driver(&keyboard);
229     cout << "-- Set Up Keyboard\n";
230     deviceSetupHeaderStream << "\&.";
231 
232     // Mouse
233     MouseDriver mouse(&interrupts);
234     driverManager\&.add_driver(&mouse);
235     cout << "-- Set Up Mouse\n";
236     deviceSetupHeaderStream << "\&.";
237 
238     // Clock
239     Clock kernelClock(&interrupts, 1);
240     driverManager\&.add_driver(&kernelClock);
241     cout << "-- Set Up Clock\n";
242     deviceSetupHeaderStream << "\&.";
243 
244     // Driver Selectors
245     Vector<DriverSelector*> driverSelectors;
246 
247     // Make the stream on the side for the PCI
248     ConsoleArea pciConsoleArea(&console, console\&.width() - 45, areaStart+1, 45, console\&.height()/2, ConsoleColour::DarkGrey, ConsoleColour::Black);
249     ConsoleStream pciConsoleStream(&pciConsoleArea);
250     console\&.put_string(console\&.width() - 45, areaStart, "                 PCI Devices                 ", ConsoleColour::LightGrey, ConsoleColour::Black);
251     
252     //PCI
253     PeripheralComponentInterconnectController PCIController(&pciConsoleStream);
254     driverSelectors\&.push_back(&PCIController);
255     cout << "-- Set Up PCI\n";
256     deviceSetupHeaderStream << "\&.";
257 
258     //USB
259     //UniversalSerialBusController USBController(&nullStream);
260     //driverSelectors\&.pushBack(&USBController);
261     //cout << "-- Set Up USB\n";
262     //deviceSetupHeaderStream << "\&.";
263 
264     // Find the drivers
265     cout << "-- Finding Drivers";
266     for(Vector<DriverSelector*>::iterator selector = driverSelectors\&.begin(); selector != driverSelectors\&.end(); selector++)
267     {
268         cout << "\&.";
269         (*selector)->select_drivers(&driverManager, &interrupts);
270     }
271     cout << " Found\n";
272     deviceSetupHeaderStream << "\&.";
273 
274     cout << "\n";
275     deviceSetupHeaderStream << "[ DONE ]";
276 
277     // Make the activation stream
278     ConsoleArea activationHeader(&console, 0, cout\&.m_cursor_y, console\&.width(), 1, ConsoleColour::LightGrey, ConsoleColour::Black);
279     ConsoleStream activationHeaderStream(&activationHeader);
280     activationHeaderStream << "Initializing Hardware";
281 
282     // Resetting devices
283     cout << "-- Resetting Devices";
284     uint32_t resetWaitTime = 0;
285     for(Vector<Driver*>::iterator driver = driverManager\&.drivers\&.begin(); driver != driverManager\&.drivers\&.end(); driver++)
286     {
287         cout << "\&.";
288         uint32_t waitTime = (*driver)->reset();
289 
290         // If the wait time is longer than the current longest wait time, set it as the new longest wait time
291         if(waitTime > resetWaitTime)
292             resetWaitTime = waitTime;
293     }
294     cout << " Reset\n";
295     activationHeaderStream << "\&.";
296 
297     // Interrupts
298     interrupts\&.activate();
299     kernelClock\&.delay(resetWaitTime);                                            //Wait for the devices to reset (has to be done after interrupts are activated otherwise the clock interrupt wont trigger)
300     cout << "-- Activated Interrupts\n";
301     activationHeaderStream << "\&.";
302 
303     // Initialise the drivers
304     cout << "-- Initializing Devices";
305     for(Vector<Driver*>::iterator driver = driverManager\&.drivers\&.begin(); driver != driverManager\&.drivers\&.end(); driver++)
306     {
307         cout << "\&.";
308         (*driver)->initialise();
309     }
310     cout << " Initialised\n";
311     activationHeaderStream << "\&.";
312 
313     // activate the drivers
314     cout << "-- Activating Devices";
315     for(Vector<Driver*>::iterator driver = driverManager\&.drivers\&.begin(); driver != driverManager\&.drivers\&.end(); driver++)
316     {
317         cout << "\&.";
318         (*driver)->activate();
319     }
320     cout << " Activated\n";
321     activationHeaderStream << "\&.";
322 
323     cout << "\n";
324     activationHeaderStream << "[ DONE ]";
325 
326     // Make the network setup stream (TODO: Move to user space)
327     ConsoleArea networkSetupHeader(&console, 0, cout\&.m_cursor_y, console\&.width(), 1, ConsoleColour::LightGrey, ConsoleColour::Black);
328     ConsoleStream networkSetupHeaderStream(&networkSetupHeader);
329     networkSetupHeaderStream << "Setting up network";
330 
331     // Make the stream on the side for the network
332     ConsoleArea networkConsoleArea(&console, console\&.width() - 40, 2 + console\&.height()/2, 45,
333         console\&.height()/2, ConsoleColour::DarkGrey, ConsoleColour::Black);
334     ConsoleStream networkConsoleStream(&networkConsoleArea);
335     console\&.put_string(console\&.width() - 40, 1 + console\&.height() / 2,
336                        "                 Network                    ",
337                        ConsoleColour::LightGrey, ConsoleColour::Black);
338 
339     // Get the driver
340     EthernetDriver* ethernetDriver = (EthernetDriver*)driverManager\&.drivers[4];
341     ethernetDriver->m_driver_message_stream = &networkConsoleStream;
342     cout << "Got Ethernet Driver: " << ethernetDriver->get_device_name() << "\n";
343     networkSetupHeaderStream << "\&.";
344 
345     // Ethernet Frame Handler
346     EthernetFrameHandler ethernetFrameHandler(ethernetDriver, &networkConsoleStream);
347     cout << "-- Set Up Ethernet Frame Handler\n";
348     networkSetupHeaderStream << "\&.";
349 
350     // IPv4 (using qemu's default network settings)
351     SubnetMask subnetMask = InternetProtocolHandler::CreateSubnetMask(255, 255, 255, 0);
352     InternetProtocolAddress defaultGateway = InternetProtocolHandler::CreateInternetProtocolAddress(10, 0, 2, 2);
353     InternetProtocolAddress ipAddress = InternetProtocolHandler::CreateInternetProtocolAddress(10, 0, 2, 15);
354     InternetProtocolHandler internetProtocolHandler(&ethernetFrameHandler, ipAddress, defaultGateway, subnetMask, &networkConsoleStream);
355     cout << "-- Set Up IPv4\n";
356     networkSetupHeaderStream << "\&.";
357 
358     // ARP
359     AddressResolutionProtocol arp(&ethernetFrameHandler, &internetProtocolHandler, &networkConsoleStream);
360     cout << "-- Set Up ARP\n";
361     networkSetupHeaderStream << "\&.";
362 
363     // ICMP
364     InternetControlMessageProtocol icmp(&internetProtocolHandler, &networkConsoleStream);
365     cout << "-- Set Up ICMP\n";
366     networkSetupHeaderStream << "\&.";
367 
368     // TCP
369     TransmissionControlProtocolHandler tcp(&internetProtocolHandler, &networkConsoleStream);
370     cout << "-- Set Up TCP\n";
371     networkSetupHeaderStream << "\&.";
372 
373     // UDP
374     UserDatagramProtocolHandler udp(&internetProtocolHandler, &networkConsoleStream);
375     cout << "-- Set Up UDP\n";
376     networkSetupHeaderStream << "\&.";
377     cout << "\n";
378     networkSetupHeaderStream << "[ DONE ]";
379 
380 #define GUI
381 #ifdef GUI
382     Desktop desktop(videoDriver);
383     mouse\&.connect_event_handler(&desktop);
384     keyboardInterpreter\&.connect_event_handler(&desktop);
385     kernelClock\&.connect_event_handler(&desktop);
386 
387     Window testWindow(150,10, 200, 150, "Test Window");
388     widgets::InputBox testInputBox(10, 10, 150, 20, "test");
389 
390     class InputBoxStream : public widgets::InputBoxEventHandler
391     {
392         ConsoleStream* stream;
393         public:
394         InputBoxStream(ConsoleStream* stream)
395         {
396             this->stream = stream;
397         }
398         ~InputBoxStream()
399         {
400             this->stream = nullptr;
401         }
402 
403         void on_input_box_text_changed(string newText)
404         {
405             *stream << "Input Box Changed: " << newText << "\n";
406         }
407     };
408     InputBoxStream inputBoxStream(&cout);
409     testInputBox\&.connect_event_handler(&inputBoxStream);
410     testWindow\&.add_child(&testInputBox);
411     desktop\&.add_child(&testWindow);
412 
413     Window testWindow2(350,100, 200, 150, "Test Window 2");
414     desktop\&.add_child(&testWindow2);
415 
416 #endif
417 
418     // Wait
419     while (true);
420 
421 }
.fi
.PP
References _kprintf, MaxOS::hardwarecommunication::InterruptManager::activate(), MaxOS::gui::Desktop::add_child(), MaxOS::gui::Window::add_child(), MaxOS::drivers::DriverManager::add_driver(), MaxOS::common::Vector< Type >::begin(), MaxOS::drivers::console::Black, MaxOS::drivers::console::Console::clear(), multiboot_tag_framebuffer::common, MaxOS::common::EventManager< EventType >::connect_event_handler(), MaxOS::common::GenericInputStream::connect_input_stream_event_handler(), MaxOS::drivers::console::DarkGrey, MaxOS::drivers::clock::Clock::delay(), MaxOS::drivers::DriverManager::drivers, MaxOS::common::Vector< Type >::end(), multiboot_tag_framebuffer_common::framebuffer_bpp, multiboot_tag_framebuffer_common::framebuffer_height, multiboot_tag_framebuffer_common::framebuffer_width, MaxOS::drivers::Driver::get_device_name(), MaxOS::system::Multiboot::get_framebuffer(), MaxOS::system::CPU::halt(), MaxOS::drivers::console::VESABootConsole::height(), MaxOS::drivers::console::LightGrey, MaxOS::drivers::console::ConsoleStream::m_cursor_x, MaxOS::drivers::console::ConsoleStream::m_cursor_y, MaxOS::drivers::Driver::m_driver_message_stream, MULTIBOOT2_BOOTLOADER_MAGIC, p4_table, print_boot_header(), MaxOS::drivers::console::VESABootConsole::print_logo(), MaxOS::common::Vector< Type >::push_back(), MaxOS::drivers::console::Console::put_string(), MaxOS::drivers::console::ConsoleStream::set_cursor(), MaxOS::drivers::video::VideoDriver::set_mode(), and MaxOS::drivers::console::VESABootConsole::width()\&.
.SS "void print_boot_header (\fBConsole\fP * console)"

.PP
Definition at line 87 of file kernel\&.cpp\&.
.PP
.nf
87                                         {
88 
89   // Make the header
90   ConsoleArea consoleHeader(console, 0, 0, console -> width(), 1, ConsoleColour::Blue, ConsoleColour::LightGrey);
91   ConsoleStream headerStream(&consoleHeader);
92 
93   // Calculate the header
94   string header = string("MaxOS v") + string(VERSION_STRING) + " [build " + string(BUILD_NUMBER) + "]";
95   int headerPadding = (console -> width() - header\&.length()) / 2;
96 
97   // Print the headers
98   for(int i = 0; i < headerPadding; i++)
99         headerStream << " ";
100 
101   headerStream << header;
102 
103   for (int i1 = 0; i1 < headerPadding; ++i1) {
104         headerStream << " ";
105   }
106 
107 }
.fi
.PP
References MaxOS::drivers::console::Blue, header, MaxOS::drivers::peripherals::i, MaxOS::hardwarecommunication::ACPISDTHeader::length, and MaxOS::drivers::console::LightGrey\&.
.PP
Referenced by kernelMain()\&.
.SH "Variable Documentation"
.PP 
.SS "\fBconstructor\fP end_ctors"

.PP
Definition at line 74 of file kernel\&.cpp\&.
.PP
Referenced by callConstructors()\&.
.SS "volatile uint64_t p4_table[512]"

.PP
Referenced by kernelMain()\&.
.SS "\fBconstructor\fP start_ctors"

.PP
Definition at line 73 of file kernel\&.cpp\&.
.PP
Referenced by callConstructors()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
