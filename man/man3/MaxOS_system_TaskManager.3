.TH "MaxOS::system::TaskManager" 3 "Sun Oct 13 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaxOS::system::TaskManager \- Manages the scheduling of m_tasks\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <multitasking\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTaskManager\fP ()"
.br
.RI "\fBTASK MANAGER\fP "
.ti -1c
.RI "\fB~TaskManager\fP ()"
.br
.ti -1c
.RI "bool \fBadd_task\fP (\fBTask\fP *task)"
.br
.RI "Adds a task to the task manager\&. "
.ti -1c
.RI "\fBCPUState\fP * \fBschedule\fP (\fBCPUState\fP *cpuState)"
.br
.RI "Switches to the next task\&. "
.in -1c
.SH "Detailed Description"
.PP 
Manages the scheduling of m_tasks\&. 
.PP
Definition at line 61 of file multitasking\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "TaskManager::TaskManager ()"

.PP
\fBTASK MANAGER\fP 
.PP
Definition at line 41 of file multitasking\&.cpp\&.
.PP
.nf
41                          {
42 
43 }
.fi
.SS "TaskManager::~TaskManager ()"

.PP
Definition at line 45 of file multitasking\&.cpp\&.
.PP
.nf
45                           {
46 
47 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "bool TaskManager::add_task (\fBTask\fP * task)"

.PP
Adds a task to the task manager\&. 
.PP
\fBParameters\fP
.RS 4
\fItask\fP The task to add 
.RE
.PP

.PP
Definition at line 54 of file multitasking\&.cpp\&.
.PP
.nf
54                                      {
55 
56     m_tasks\&.push_back(task);
57     return true;
58 
59 }
.fi
.SS "\fBCPUState\fP * TaskManager::schedule (\fBCPUState\fP * cpuState)"

.PP
Switches to the next task\&. 
.PP
\fBParameters\fP
.RS 4
\fIcpuState\fP The current \fBCPU\fP state 
.RE
.PP
\fBReturns\fP
.RS 4
The new \fBCPU\fP state 
.RE
.PP

.PP
Definition at line 67 of file multitasking\&.cpp\&.
.PP
.nf
67                                                   {
68 
69     // If there's no tasks then don't schedule
70     if(m_tasks\&.size() <= 0)
71         return cpuState;
72 
73     // If there is a task running, save its state
74     if(m_current_task >= 0)
75       m_tasks[m_current_task] ->m_cpu_state = cpuState;
76 
77     // Switch to the next task (and loop back to the start if needed)
78     if((uint32_t )++m_current_task >= m_tasks\&.size())
79       m_current_task %= m_tasks\&.size();
80 
81     // Start the next task
82     return m_tasks[m_current_task] ->m_cpu_state;
83 
84 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
