.TH "/home/runner/work/MaxOS/MaxOS/kernel/include/memory/memorymanagement.h" 3 "Tue Feb 25 2025" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/runner/work/MaxOS/MaxOS/kernel/include/memory/memorymanagement.h
.SH SYNOPSIS
.br
.PP
\fC#include <stddef\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <system/multiboot\&.h>\fP
.br
\fC#include <memory/virtual\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBMaxOS::memory::MemoryChunk\fP"
.br
.RI "Stores information about a memory chunk in the memory manager linked list\&. "
.ti -1c
.RI "class \fBMaxOS::memory::MemoryManager\fP"
.br
.RI "Handles memory allocation and deallocation\&. "
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBMaxOS\fP"
.br
.ti -1c
.RI " \fBMaxOS::memory\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void * \fBoperator new\fP (size_t \fBsize\fP)  throw ()"
.br
.ti -1c
.RI "void * \fBoperator new[]\fP (size_t \fBsize\fP)  throw ()"
.br
.ti -1c
.RI "void * \fBoperator new\fP (size_t \fBsize\fP, void *pointer)"
.br
.ti -1c
.RI "void * \fBoperator new[]\fP (size_t \fBsize\fP, void *pointer)"
.br
.ti -1c
.RI "void \fBoperator delete\fP (void *pointer)"
.br
.ti -1c
.RI "void \fBoperator delete[]\fP (void *pointer)"
.br
.ti -1c
.RI "void \fBoperator delete\fP (void *pointer, size_t \fBsize\fP)"
.br
.ti -1c
.RI "void \fBoperator delete[]\fP (void *pointer, size_t \fBsize\fP)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void operator delete (void * pointer)"

.PP
Definition at line 322 of file memorymanagement\&.cpp\&.
.PP
.nf
322                                    {
323 
324     // Use the memory manager to free the memory
325     if(MaxOS::memory::MemoryManager::s_active_memory_manager != 0)
326         return MaxOS::memory::MemoryManager::s_active_memory_manager-> free(pointer);
327 
328 }
.fi
.PP
References MaxOS::memory::MemoryManager::s_active_memory_manager\&.
.SS "void operator delete (void * pointer, size_t size)"

.PP
Definition at line 339 of file memorymanagement\&.cpp\&.
.PP
.nf
339                                            {
340 
341     // Use the memory manager to free the memory
342     if(MaxOS::memory::MemoryManager::s_active_memory_manager != 0)
343         return MaxOS::memory::MemoryManager::s_active_memory_manager-> free(pointer);
344 
345 }
.fi
.PP
References MaxOS::memory::MemoryManager::s_active_memory_manager\&.
.SS "void operator delete[] (void * pointer)"

.PP
Definition at line 330 of file memorymanagement\&.cpp\&.
.PP
.nf
330                                      {
331 
332     // Use the memory manager to free the memory
333     if(MaxOS::memory::MemoryManager::s_active_memory_manager != 0)
334         return MaxOS::memory::MemoryManager::s_active_memory_manager-> free(pointer);
335 
336 }
.fi
.PP
References MaxOS::memory::MemoryManager::s_active_memory_manager\&.
.SS "void operator delete[] (void * pointer, size_t size)"

.PP
Definition at line 347 of file memorymanagement\&.cpp\&.
.PP
.nf
347                                              {
348 
349     // Use the memory manager to free the memory
350     if(MaxOS::memory::MemoryManager::s_active_memory_manager != 0)
351         return MaxOS::memory::MemoryManager::s_active_memory_manager-> free(pointer);
352 
353 }
.fi
.PP
References MaxOS::memory::MemoryManager::s_active_memory_manager\&.
.SS "void* operator new (size_t size)"

.PP
Definition at line 291 of file memorymanagement\&.cpp\&.
.PP
.nf
291                                        {
292 
293     // Use the memory manager to allocate the memory
294     if(MaxOS::memory::MemoryManager::s_active_memory_manager != 0)
295         return MaxOS::memory::MemoryManager::s_active_memory_manager-> malloc(size);
296 
297     return 0;
298 
299 }
.fi
.PP
References MaxOS::memory::MemoryManager::s_active_memory_manager, and size\&.
.SS "void* operator new (size_t size, void * pointer)"

.PP
Definition at line 311 of file memorymanagement\&.cpp\&.
.PP
.nf
311                                          {
312 
313     return pointer;
314 
315 }
.fi
.SS "void* operator new[] (size_t size)"

.PP
Definition at line 301 of file memorymanagement\&.cpp\&.
.PP
.nf
301                                          {
302 
303     // Use the memory manager to allocate the memory
304     if(MaxOS::memory::MemoryManager::s_active_memory_manager != 0)
305         return MaxOS::memory::MemoryManager::s_active_memory_manager-> malloc(size);
306 
307     return 0;
308 
309 }
.fi
.PP
References MaxOS::memory::MemoryManager::s_active_memory_manager, and size\&.
.SS "void* operator new[] (size_t size, void * pointer)"

.PP
Definition at line 316 of file memorymanagement\&.cpp\&.
.PP
.nf
316                                            {
317 
318     return pointer;
319 
320 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
