.TH "/home/runner/work/MaxOS/MaxOS/kernel/include/memory/memorymanagement.h" 3 "Mon Jan 8 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/runner/work/MaxOS/MaxOS/kernel/include/memory/memorymanagement.h
.SH SYNOPSIS
.br
.PP
\fC#include <stddef\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <system/multiboot\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBmaxOS::memory::MemoryChunk\fP"
.br
.RI "Stores information about a memory chunk in the memory manager linked list\&. "
.ti -1c
.RI "class \fBmaxOS::memory::MemoryManager\fP"
.br
.RI "Handles memory allocation and deallocation\&. "
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBmaxOS\fP"
.br
.ti -1c
.RI " \fBmaxOS::memory\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void * \fBoperator new\fP (size_t \fBsize\fP)  throw ()"
.br
.ti -1c
.RI "void * \fBoperator new[]\fP (size_t \fBsize\fP)  throw ()"
.br
.ti -1c
.RI "void * \fBoperator new\fP (size_t \fBsize\fP, void *pointer)"
.br
.ti -1c
.RI "void * \fBoperator new[]\fP (size_t \fBsize\fP, void *pointer)"
.br
.ti -1c
.RI "void \fBoperator delete\fP (void *pointer)"
.br
.ti -1c
.RI "void \fBoperator delete[]\fP (void *pointer)"
.br
.ti -1c
.RI "void \fBoperator delete\fP (void *pointer, size_t \fBsize\fP)"
.br
.ti -1c
.RI "void \fBoperator delete[]\fP (void *pointer, size_t \fBsize\fP)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void operator delete (void * pointer)"

.PP
Definition at line 184 of file memorymanagement\&.cpp\&.
.PP
.nf
184                                    {
185 
186     // Use the memory manager to free the memory
187     if(maxOS::memory::MemoryManager::s_active_memory_manager != 0)
188         return maxOS::memory::MemoryManager::s_active_memory_manager-> free(pointer);
189 
190 }
.fi
.PP
References maxOS::memory::MemoryManager::s_active_memory_manager\&.
.SS "void operator delete (void * pointer, size_t size)"

.PP
Definition at line 201 of file memorymanagement\&.cpp\&.
.PP
.nf
201                                            {
202 
203     // Use the memory manager to free the memory
204     if(maxOS::memory::MemoryManager::s_active_memory_manager != 0)
205         return maxOS::memory::MemoryManager::s_active_memory_manager-> free(pointer);
206 
207 }
.fi
.PP
References maxOS::memory::MemoryManager::s_active_memory_manager\&.
.SS "void operator delete[] (void * pointer)"

.PP
Definition at line 192 of file memorymanagement\&.cpp\&.
.PP
.nf
192                                      {
193 
194     // Use the memory manager to free the memory
195     if(maxOS::memory::MemoryManager::s_active_memory_manager != 0)
196         return maxOS::memory::MemoryManager::s_active_memory_manager-> free(pointer);
197 
198 }
.fi
.PP
References maxOS::memory::MemoryManager::s_active_memory_manager\&.
.SS "void operator delete[] (void * pointer, size_t size)"

.PP
Definition at line 209 of file memorymanagement\&.cpp\&.
.PP
.nf
209                                              {
210 
211     // Use the memory manager to free the memory
212     if(maxOS::memory::MemoryManager::s_active_memory_manager != 0)
213         return maxOS::memory::MemoryManager::s_active_memory_manager-> free(pointer);
214 
215 }
.fi
.PP
References maxOS::memory::MemoryManager::s_active_memory_manager\&.
.SS "void* operator new (size_t size)"

.PP
Definition at line 153 of file memorymanagement\&.cpp\&.
.PP
.nf
153                                        {
154 
155     // Use the memory manager to allocate the memory
156     if(maxOS::memory::MemoryManager::s_active_memory_manager != 0)
157         return maxOS::memory::MemoryManager::s_active_memory_manager-> malloc(size);
158 
159     return 0;
160 
161 }
.fi
.PP
References maxOS::memory::MemoryManager::s_active_memory_manager, and size\&.
.SS "void* operator new (size_t size, void * pointer)"

.PP
Definition at line 173 of file memorymanagement\&.cpp\&.
.PP
.nf
173                                          {
174 
175     return pointer;
176 
177 }
.fi
.SS "void* operator new[] (size_t size)"

.PP
Definition at line 163 of file memorymanagement\&.cpp\&.
.PP
.nf
163                                          {
164 
165     // Use the memory manager to allocate the memory
166     if(maxOS::memory::MemoryManager::s_active_memory_manager != 0)
167         return maxOS::memory::MemoryManager::s_active_memory_manager-> malloc(size);
168 
169     return 0;
170 
171 }
.fi
.PP
References maxOS::memory::MemoryManager::s_active_memory_manager, and size\&.
.SS "void* operator new[] (size_t size, void * pointer)"

.PP
Definition at line 178 of file memorymanagement\&.cpp\&.
.PP
.nf
178                                            {
179 
180     return pointer;
181 
182 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
