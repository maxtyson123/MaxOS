.TH "/home/runner/work/MaxOS/MaxOS/kernel/include/common/kprint.h" 3 "Tue Feb 25 2025" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/runner/work/MaxOS/MaxOS/kernel/include/common/kprint.h
.SH SYNOPSIS
.br
.PP
\fC#include <drivers/console/serial\&.h>\fP
.br
\fC#include <system/cpu\&.h>\fP
.br
\fC#include <stdarg\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB_kprintf\fP(format, \&.\&.\&.)   \fB_kprintf_internal\fP(0, __FILE__, __LINE__, __FUNCTION__, format, ##__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fB_kpanicf\fP(format, \&.\&.\&.)   \fB_kprintf_internal\fP(2, __FILE__, __LINE__, __FUNCTION__, format, ##__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBASSERT\fP(condition,  format, \&.\&.\&.)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fB_kprintf_internal\fP (uint8_t \fBtype\fP, const char *file, int line, const char *func, const char *format,\&.\&.\&.)"
.br
.RI "Prints a formatted string to the serial output\&. "
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define _kpanicf(format,  \&.\&.\&.)   \fB_kprintf_internal\fP(2, __FILE__, __LINE__, __FUNCTION__, format, ##__VA_ARGS__)"

.PP
Definition at line 17 of file kprint\&.h\&.
.SS "#define _kprintf(format,  \&.\&.\&.)   \fB_kprintf_internal\fP(0, __FILE__, __LINE__, __FUNCTION__, format, ##__VA_ARGS__)"

.PP
Definition at line 14 of file kprint\&.h\&.
.SS "#define ASSERT(condition, format,  \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
    if(!(condition)) \
        _kprintf_internal(3, __FILE__, __LINE__, __FUNCTION__, format, ##__VA_ARGS__);
.fi
.PP
Definition at line 20 of file kprint\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void _kprintf_internal (uint8_t type, const char * file, int line, const char * func, const char * format,  \&.\&.\&.)"

.PP
Prints a formatted string to the serial output\&. ARGUMENTS:
.IP "\(bu" 2
d for decimal
.IP "\(bu" 2
x for hex
.IP "\(bu" 2
u for unsigned decimal
.IP "\(bu" 2
s for string
.PP
.PP
\fBParameters\fP
.RS 4
\fIformat\fP The formatted string 
.br
\fI\&.\&.\&.\fP The data to pass into the string 
.RE
.PP

.PP
Definition at line 157 of file kprint\&.cpp\&.
.PP
.nf
158 {
159   // Create a pointer to the data
160   va_list parameters;
161   va_start(parameters, format);
162 
163   // Print the header
164   if(*format != '\h')
165     pre_kprintf(file, line,func, type);
166   else
167     format++;
168 
169 
170   // Loop through the format string
171   for (; *format != '\0'; format++)
172   {
173 
174     // If it is not a %, print the character
175     if (*format != '%')
176     {
177       putchar(*format);
178       continue;
179     }
180 
181     // Move to the next character
182     format++;
183 
184     switch (*format)
185     {
186       case 'd':
187       {
188         // Print a decimal
189         int number = va_arg (parameters, int);
190         char* str = itoa(10, number);
191         for (int i = 0; i < strlen(str); i++)
192           putchar(str[i]);
193         break;
194       }
195       case 'x':
196       {
197         // Print a hex
198         uint64_t  number = va_arg (parameters, uint64_t );
199         char* str = itoa(16, number);
200         for (int i = 0; i < strlen(str); i++)
201           putchar(str[i]);
202         break;
203       }
204       case 's':
205       {
206         // Print a string
207         char* str = va_arg (parameters, char*);
208         for (int i = 0; i < strlen(str); i++)
209           putchar(str[i]);
210         break;
211       }
212     }
213   }
214 
215 
216   // If it is type 3 panic
217   if(type == 3)
218      CPU::PANIC("Check the serial output for more information");
219 
220 }
.fi
.PP
References pre_kprintf(), and type\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
