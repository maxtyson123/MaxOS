.TH "/home/runner/work/MaxOS/MaxOS/kernel/include/common/kprint.h" 3 "Sat Mar 29 2025" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/runner/work/MaxOS/MaxOS/kernel/include/common/kprint.h
.SH SYNOPSIS
.br
.PP
\fC#include <drivers/console/serial\&.h>\fP
.br
\fC#include <system/cpu\&.h>\fP
.br
\fC#include <stdarg\&.h>\fP
.br
\fC#include <common/spinlock\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB_kprintf\fP(format, \&.\&.\&.)   \fB_kprintf_internal\fP(0, __FILE__, __LINE__, __FUNCTION__, format, ##__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fB_kpanicf\fP(format, \&.\&.\&.)   \fB_kprintf_internal\fP(2, __FILE__, __LINE__, __FUNCTION__, format, ##__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBASSERT\fP(condition,  format, \&.\&.\&.)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fB_kprintf_internal\fP (uint8_t \fBtype\fP, const char *file, int line, const char *func, const char *format,\&.\&.\&.)"
.br
.RI "Prints a formatted string to the serial output\&. "
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define _kpanicf(format,  \&.\&.\&.)   \fB_kprintf_internal\fP(2, __FILE__, __LINE__, __FUNCTION__, format, ##__VA_ARGS__)"

.PP
Definition at line 17 of file kprint\&.h\&.
.SS "#define _kprintf(format,  \&.\&.\&.)   \fB_kprintf_internal\fP(0, __FILE__, __LINE__, __FUNCTION__, format, ##__VA_ARGS__)"

.PP
Definition at line 14 of file kprint\&.h\&.
.SS "#define ASSERT(condition, format,  \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
    if(!(condition)) \
        _kprintf_internal(3, __FILE__, __LINE__, __FUNCTION__, format, ##__VA_ARGS__);
.fi
.PP
Definition at line 20 of file kprint\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void _kprintf_internal (uint8_t type, const char * file, int line, const char * func, const char * format,  \&.\&.\&.)"

.PP
Prints a formatted string to the serial output\&. ARGUMENTS:
.IP "\(bu" 2
d for decimal
.IP "\(bu" 2
x for hex
.IP "\(bu" 2
u for unsigned decimal
.IP "\(bu" 2
s for string
.PP
.PP
\fBParameters\fP
.RS 4
\fIformat\fP The formatted string 
.br
\fI\&.\&.\&.\fP The data to pass into the string 
.RE
.PP

.PP
Definition at line 170 of file kprint\&.cpp\&.
.PP
.nf
171 {
172 
173   // wait for the lock
174   kprintf_lock\&.lock();
175 
176   // Create a pointer to the data
177   va_list parameters;
178   va_start(parameters, format);
179 
180   // Print the header if the first two are not %h
181   if(*format != '%' && *(format + 1) != 'h')
182     pre_kprintf(file, line,func, type);
183 
184 
185   // Loop through the format string
186   for (; *format != '\0'; format++)
187   {
188 
189     // If it is not a %, print the character
190     if (*format != '%')
191     {
192       putchar(*format, type == 2);
193       continue;
194     }
195 
196     // Move to the next character
197     format++;
198 
199     switch (*format)
200     {
201       case 'd':
202       {
203         // Print a decimal
204         int number = va_arg (parameters, int);
205         char* str = itoa(10, number);
206         for (int i = 0; i < strlen(str); i++)
207           putchar(str[i], type == 2);
208         break;
209       }
210       case 'x':
211       {
212         // Print a hex
213         uint64_t  number = va_arg (parameters, uint64_t );
214         char* str = itoa(16, number);
215         for (int i = 0; i < strlen(str); i++)
216           putchar(str[i], type == 2);
217         break;
218       }
219       case 's':
220       {
221         // Print a string
222         char* str = va_arg (parameters, char*);
223         for (int i = 0; i < strlen(str); i++)
224           putchar(str[i], type == 2);
225         break;
226       }
227     }
228   }
229 
230   kprintf_lock\&.unlock();
231 
232   // If it is type 3 panic
233   if(type == 3)
234      CPU::PANIC("Check the serial output for more information");
235 }
.fi
.PP
References kprintf_lock, MaxOS::common::Spinlock::lock(), pre_kprintf(), and type\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
