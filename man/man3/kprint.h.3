.TH "/home/runner/work/MaxOS/MaxOS/kernel/include/common/kprint.h" 3 "Sun Oct 13 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/runner/work/MaxOS/MaxOS/kernel/include/common/kprint.h
.SH SYNOPSIS
.br
.PP
\fC#include <drivers/console/serial\&.h>\fP
.br
\fC#include <stdarg\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB_kprintf\fP(format, \&.\&.\&.)   \fB_kprintf_internal\fP(0, __FILE__, __LINE__, __FUNCTION__, format, ##__VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBASSERT\fP(condition,  format, \&.\&.\&.)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fB_kprintf_internal\fP (uint8_t \fBtype\fP, const char *file, int line, const char *func, const char *format,\&.\&.\&.)"
.br
.RI "Prints a formatted string to the serial output\&. "
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define _kprintf(format,  \&.\&.\&.)   \fB_kprintf_internal\fP(0, __FILE__, __LINE__, __FUNCTION__, format, ##__VA_ARGS__)"

.PP
Definition at line 12 of file kprint\&.h\&.
.SS "#define ASSERT(condition, format,  \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
    if(!(condition)) { \
        _kprintf_internal(3, __FILE__, __LINE__, __FUNCTION__, format, ##__VA_ARGS__); \
        while(1); \
    }
.fi
.PP
Definition at line 15 of file kprint\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void _kprintf_internal (uint8_t type, const char * file, int line, const char * func, const char * format,  \&.\&.\&.)"

.PP
Prints a formatted string to the serial output\&. ARGUMENTS:
.IP "\(bu" 2
d for decimal
.IP "\(bu" 2
x for hex
.IP "\(bu" 2
u for unsigned decimal
.IP "\(bu" 2
s for string
.PP
.PP
\fBParameters\fP
.RS 4
\fIformat\fP The formatted string 
.br
\fI\&.\&.\&.\fP The data to pass into the string 
.RE
.PP

.PP
Definition at line 155 of file kprint\&.cpp\&.
.PP
.nf
156 {
157 
158   // Print the header
159   pre_kprintf(file, line,func, type);
160 
161   // Create a pointer to the data
162   va_list parameters;
163   va_start(parameters, format);
164 
165   // Loop through the format string
166   for (; *format != '\0'; format++)
167   {
168 
169     // If it is not a %, print the character
170     if (*format != '%')
171     {
172       putchar(*format);
173       continue;
174     }
175 
176     // Move to the next character
177     format++;
178 
179     switch (*format)
180     {
181       case 'd':
182       {
183         // Print a decimal
184         int number = va_arg (parameters, int);
185         char* str = itoa(10, number);
186         for (int i = 0; i < strlen(str); i++)
187           putchar(str[i]);
188         break;
189       }
190       case 'x':
191       {
192         // Print a hex
193         uint64_t  number = va_arg (parameters, uint64_t );
194         char* str = itoa(16, number);
195         for (int i = 0; i < strlen(str); i++)
196           putchar(str[i]);
197         break;
198       }
199       case 's':
200       {
201         // Print a string
202         char* str = va_arg (parameters, char*);
203         for (int i = 0; i < strlen(str); i++)
204           putchar(str[i]);
205         break;
206       }
207     }
208   }
209 }
.fi
.PP
References pre_kprintf(), and type\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
