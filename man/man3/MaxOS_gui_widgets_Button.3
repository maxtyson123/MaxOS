.TH "MaxOS::gui::widgets::Button" 3 "Tue Feb 25 2025" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaxOS::gui::widgets::Button \- A button widget, can be clicked\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <button\&.h>\fP
.PP
Inherits \fBMaxOS::gui::Widget\fP, and \fBMaxOS::common::EventManager< ButtonEvents >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBButton\fP (int32_t left, int32_t top, uint32_t width, uint32_t height, \fBstring\fP \fBtext\fP)"
.br
.ti -1c
.RI "\fB~Button\fP ()"
.br
.ti -1c
.RI "void \fBdraw\fP (\fBcommon::GraphicsContext\fP *gc, \fBcommon::Rectangle\fP< int32_t > &area) override"
.br
.RI "Draws the button\&. "
.ti -1c
.RI "\fBdrivers::peripherals::MouseEventHandler\fP * \fBon_mouse_button_pressed\fP (uint32_t x, uint32_t y, uint8_t button) override"
.br
.RI "Handles the mouse button pressed event\&. "
.ti -1c
.RI "void \fBon_mouse_button_released\fP (uint32_t x, uint32_t y, uint8_t button) override"
.br
.RI "Handles the mouse button released event\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBcommon::Colour\fP \fBbackground_colour\fP"
.br
.ti -1c
.RI "\fBcommon::Colour\fP \fBforeground_colour\fP"
.br
.ti -1c
.RI "\fBcommon::Colour\fP \fBborder_colour\fP"
.br
.ti -1c
.RI "\fBgui::Font\fP \fBfont\fP"
.br
.ti -1c
.RI "\fBstring\fP \fBtext\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A button widget, can be clicked\&. 
.PP
Definition at line 71 of file button\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Button::Button (int32_t left, int32_t top, uint32_t width, uint32_t height, \fBstring\fP text)"

.PP
Definition at line 70 of file button\&.cpp\&.
.PP
.nf
71 : Widget(left, top, width, height),
72   background_colour(Colour(0xFF, 0xFF, 0xFF)),
73   foreground_colour(Colour(0x00, 0x00, 0x00)),
74   border_colour(Colour(0x57, 0x57, 0x57)),
75   font((uint8_t*)AMIGA_FONT),
76   text(text)
77 {
78 
79 }
.fi
.SS "Button::~Button ()"

.PP
Definition at line 81 of file button\&.cpp\&.
.PP
.nf
81                 {
82 
83 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void Button::draw (\fBcommon::GraphicsContext\fP * gc, \fBcommon::Rectangle\fP< int32_t > & area)\fC [override]\fP, \fC [virtual]\fP"

.PP
Draws the button\&. 
.PP
\fBParameters\fP
.RS 4
\fIgc\fP The graphics context to draw to 
.br
\fIarea\fP The area to draw to 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::gui::Widget\fP\&.
.PP
Definition at line 91 of file button\&.cpp\&.
.PP
.nf
91                                                                {
92 
93     // Default Draw Operation
94     Widget::draw(gc, area);
95 
96     // Get the absolute m_position of the button
97     Coordinates buttonCoordinates = absolute_coordinates(Coordinates(0, 0));
98     Rectangle<int32_t> buttonPosition = position();
99 
100     // Get the x and y m_position of the button
101     int32_t x = buttonCoordinates\&.first;
102     int32_t y = buttonCoordinates\&.second;
103 
104     // Draw the background for the button
105     gc->fill_rectangle(x + area\&.left, y + area\&.top, x + area\&.left + area\&.width,
106                        y + area\&.top + area\&.height, background_colour);
107 
108     // Draw the border  (TODO: Make a border class?? Window uses it too)
109 
110     // Top Border
111     if(area\&.intersects(Rectangle<int32_t>(0,0,buttonPosition\&.width,1))){
112 
113         // Start in the top left corner of the button and end in the top right corner
114         gc->draw_line(x + area\&.left, y, x + area\&.left + area\&.width - 1, y,
115                       border_colour);
116     }
117 
118     // Left Border
119     if(area\&.intersects(Rectangle<int32_t>(0,0,1,buttonPosition\&.height))){
120 
121         // Start in the top left corner and end in the bottom left corner
122         gc->draw_line(x, y + area\&.top, x, y + area\&.top + area\&.height - 1,
123                       border_colour);
124     }
125 
126     // Right Border
127     if(area\&.intersects(Rectangle<int32_t>(0,buttonPosition\&.height - 1,buttonPosition\&.width,1))){
128 
129         // Start in the top right corner and end in the bottom right corner
130         gc->draw_line(x + area\&.left, y + buttonPosition\&.height - 1,
131                       x + area\&.left + area\&.width - 1,
132                       y + buttonPosition\&.height - 1, border_colour);
133     }
134 
135     // Bottom Border
136     if(area\&.intersects(Rectangle<int32_t>(buttonPosition\&.width - 1,0,1,buttonPosition\&.height))){
137 
138         // Start in the bottom left corner and end in the bottom right corner
139         gc->draw_line(x + buttonPosition\&.width - 1, y + area\&.top,
140                       x + buttonPosition\&.width - 1,
141                       y + area\&.top + area\&.height - 1, border_colour);
142     }
143 
144     // Draw the text
145     common::Rectangle<int32_t> textArea(area\&.left - 1, area\&.top - 1, area\&.width, area\&.height);
146     font\&.draw_text(x + 1, y + 1, foreground_colour, background_colour, gc, text,
147                    textArea);
148 
149 }
.fi
.PP
References MaxOS::gui::Widget::absolute_coordinates(), background_colour, border_colour, MaxOS::gui::Widget::draw(), MaxOS::common::GraphicsContext::draw_line(), MaxOS::gui::Font::draw_text(), MaxOS::common::GraphicsContext::fill_rectangle(), MaxOS::common::Pair< First, Second >::first, font, foreground_colour, MaxOS::common::Rectangle< Type >::height, MaxOS::common::Rectangle< Type >::intersects(), MaxOS::common::Rectangle< Type >::left, MaxOS::gui::Widget::position(), MaxOS::common::Pair< First, Second >::second, text, MaxOS::common::Rectangle< Type >::top, MaxOS::common::Rectangle< Type >::width, MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.SS "\fBMouseEventHandler\fP * Button::on_mouse_button_pressed (uint32_t x, uint32_t y, uint8_t button)\fC [override]\fP, \fC [virtual]\fP"

.PP
Handles the mouse button pressed event\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x m_position of the mouse 
.br
\fIy\fP The y m_position of the mouse 
.br
\fIbutton\fP The button that was pressed 
.RE
.PP
\fBReturns\fP
.RS 4
The mouse event handler 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::gui::Widget\fP\&.
.PP
Definition at line 159 of file button\&.cpp\&.
.PP
.nf
159                                                                                          {
160 
161     // Raise the event
162     raise_event(new ButtonPressedEvent(this));
163 
164     // Change the button colour
165     background_colour = Colour(0x57, 0x57, 0x57);
166     Widget::invalidate();
167 
168     // Pass the event on (that it was handled)
169     return Widget::on_mouse_button_pressed(x, y, button);
170 }
.fi
.PP
References background_colour, MaxOS::gui::Widget::invalidate(), MaxOS::gui::Widget::on_mouse_button_pressed(), MaxOS::common::EventManager< ButtonEvents >::raise_event(), MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.SS "void Button::on_mouse_button_released (uint32_t x, uint32_t y, uint8_t button)\fC [override]\fP, \fC [virtual]\fP"

.PP
Handles the mouse button released event\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x m_position of the mouse 
.br
\fIy\fP The y m_position of the mouse 
.br
\fIbutton\fP The button that was released 
.RE
.PP

.PP
Reimplemented from \fBMaxOS::gui::Widget\fP\&.
.PP
Definition at line 179 of file button\&.cpp\&.
.PP
.nf
179                                                                             {
180 
181     // Raise the button released event
182     raise_event(new ButtonReleasedEvent(this));
183 
184     // Change the button colour
185     background_colour = Colour(0xFF, 0xFF, 0xFF);
186     Widget::invalidate();
187 
188     // Pass the event on (that it was handled)
189     Widget::on_mouse_button_released(x, y, button);
190 }
.fi
.PP
References background_colour, MaxOS::gui::Widget::invalidate(), MaxOS::gui::Widget::on_mouse_button_released(), MaxOS::common::EventManager< ButtonEvents >::raise_event(), MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBcommon::Colour\fP MaxOS::gui::widgets::Button::background_colour"

.PP
Definition at line 83 of file button\&.h\&.
.PP
Referenced by draw(), on_mouse_button_pressed(), and on_mouse_button_released()\&.
.SS "\fBcommon::Colour\fP MaxOS::gui::widgets::Button::border_colour"

.PP
Definition at line 85 of file button\&.h\&.
.PP
Referenced by draw()\&.
.SS "\fBgui::Font\fP MaxOS::gui::widgets::Button::font"

.PP
Definition at line 86 of file button\&.h\&.
.PP
Referenced by draw()\&.
.SS "\fBcommon::Colour\fP MaxOS::gui::widgets::Button::foreground_colour"

.PP
Definition at line 84 of file button\&.h\&.
.PP
Referenced by draw()\&.
.SS "\fBstring\fP MaxOS::gui::widgets::Button::text"

.PP
Definition at line 87 of file button\&.h\&.
.PP
Referenced by draw()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
