.TH "MaxOS::drivers::Driver" 3 "Tue Feb 25 2025" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaxOS::drivers::Driver \- base class for all drivers, handles the activation, deactivation, initialisation and reset of the driver as well as error messages and identifying the device  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <driver\&.h>\fP
.PP
Inherited by \fBMaxOS::drivers::clock::Clock\fP, \fBMaxOS::drivers::console::TextModeConsole\fP, \fBMaxOS::drivers::console::VESABootConsole\fP, \fBMaxOS::drivers::disk::AdvancedTechnologyAttachment\fP, \fBMaxOS::drivers::ethernet::EthernetDriver\fP, \fBMaxOS::drivers::peripherals::KeyboardDriver\fP, \fBMaxOS::drivers::peripherals::MouseDriver\fP, \fBMaxOS::drivers::SerialConsole\fP, and \fBMaxOS::drivers::video::VideoDriver\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDriver\fP (\fBcommon::OutputStream\fP *driverMessageStream=0)"
.br
.ti -1c
.RI "\fB~Driver\fP ()"
.br
.ti -1c
.RI "void \fBerror_message\fP (\fBstring\fP message)"
.br
.RI "write a message to the driver message stream if it is not null "
.ti -1c
.RI "void \fBerror_message\fP (char char_to_write)"
.br
.RI "write a character to the driver message stream if it is not null "
.ti -1c
.RI "void \fBerror_message\fP (int int_to_write)"
.br
.RI "write an integer to the driver message stream if it is not null "
.ti -1c
.RI "void \fBerror_message\fP (uint32_t hex_to_write)"
.br
.RI "write a hex to the driver message stream if it is not null "
.ti -1c
.RI "virtual void \fBactivate\fP ()"
.br
.RI "activate the driver "
.ti -1c
.RI "virtual void \fBdeactivate\fP ()"
.br
.RI "deactivate the driver "
.ti -1c
.RI "virtual void \fBinitialise\fP ()"
.br
.RI "Initialise the driver\&. "
.ti -1c
.RI "virtual uint32_t \fBreset\fP ()"
.br
.RI "Reset the driver\&. "
.ti -1c
.RI "virtual \fBstring\fP \fBget_vendor_name\fP ()"
.br
.RI "Get the vendor name of the driver\&. "
.ti -1c
.RI "virtual \fBstring\fP \fBget_device_name\fP ()"
.br
.RI "Get the device name of the driver\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBcommon::OutputStream\fP * \fBm_driver_message_stream\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
base class for all drivers, handles the activation, deactivation, initialisation and reset of the driver as well as error messages and identifying the device 
.PP
Definition at line 24 of file driver\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Driver::Driver (\fBcommon::OutputStream\fP * driverMessageStream = \fC0\fP)"

.PP
Definition at line 11 of file driver\&.cpp\&.
.PP
.nf
12 : m_driver_message_stream(driverMessageStream) {
13 
14 };
.fi
.SS "Driver::~Driver ()"

.PP
Definition at line 16 of file driver\&.cpp\&.
.PP
.nf
16                {
17     this ->m_driver_message_stream = 0;
18 };
.fi
.SH "Member Function Documentation"
.PP 
.SS "void Driver::activate ()\fC [virtual]\fP"

.PP
activate the driver 
.PP
Reimplemented in \fBMaxOS::drivers::clock::Clock\fP, \fBMaxOS::drivers::peripherals::KeyboardDriver\fP, \fBMaxOS::drivers::peripherals::MouseDriver\fP, \fBMaxOS::drivers::disk::AdvancedTechnologyAttachment\fP, \fBMaxOS::drivers::ethernet::intel_i217\fP, and \fBMaxOS::drivers::ethernet::amd_am79c973\fP\&.
.PP
Definition at line 23 of file driver\&.cpp\&.
.PP
.nf
23                      {
24 
25 }
.fi
.PP
Referenced by MaxOS::drivers::disk::AdvancedTechnologyAttachment::activate()\&.
.SS "void Driver::deactivate ()\fC [virtual]\fP"

.PP
deactivate the driver 
.PP
Reimplemented in \fBMaxOS::drivers::ethernet::intel_i217\fP, and \fBMaxOS::drivers::ethernet::amd_am79c973\fP\&.
.PP
Definition at line 30 of file driver\&.cpp\&.
.PP
.nf
30                        {
31 
32 }
.fi
.PP
Referenced by MaxOS::drivers::ethernet::intel_i217::deactivate()\&.
.SS "void Driver::error_message (char char_to_write)"

.PP
write a character to the driver message stream if it is not null 
.PP
\fBParameters\fP
.RS 4
\fIchar_to_write\fP The character to write 
.RE
.PP

.PP
Definition at line 68 of file driver\&.cpp\&.
.PP
.nf
68                                              {
69 
70     // If there is a driver message stream write the character to it
71     if(m_driver_message_stream != 0)
72       m_driver_message_stream-> write_char(char_to_write);
73 
74 }
.fi
.PP
References m_driver_message_stream\&.
.SS "void Driver::error_message (int int_to_write)"

.PP
write an integer to the driver message stream if it is not null 
.PP
\fBParameters\fP
.RS 4
\fIint_to_write\fP The integer to write 
.RE
.PP

.PP
Definition at line 82 of file driver\&.cpp\&.
.PP
.nf
82                                            {
83 
84     // If there is a driver message stream write the integer to it
85     if(m_driver_message_stream != 0)
86             m_driver_message_stream-> write_int(int_to_write);
87 }
.fi
.PP
References m_driver_message_stream\&.
.SS "void Driver::error_message (\fBstring\fP message)"

.PP
write a message to the driver message stream if it is not null 
.PP
\fBParameters\fP
.RS 4
\fImessage\fP The message to write 
.RE
.PP

.PP
Definition at line 55 of file driver\&.cpp\&.
.PP
.nf
55                                          {
56 
57     // If there is a driver message stream write the message to it
58     if(m_driver_message_stream != 0)
59         m_driver_message_stream-> write(message);
60 
61 }
.fi
.PP
References m_driver_message_stream, and write\&.
.PP
Referenced by MaxOS::drivers::ethernet::amd_am79c973::handle_interrupt(), and MaxOS::drivers::ethernet::intel_i217::intel_i217()\&.
.SS "void Driver::error_message (uint32_t hex_to_write)"

.PP
write a hex to the driver message stream if it is not null 
.PP
\fBParameters\fP
.RS 4
\fIhex_to_write\fP The hex to write 
.RE
.PP

.PP
Definition at line 94 of file driver\&.cpp\&.
.PP
.nf
94                                                 {
95 
96     // If there is a driver message stream write the hex to it
97     if(m_driver_message_stream != 0)
98       m_driver_message_stream->write_hex(hex_to_write);
99 
100 }
.fi
.PP
References m_driver_message_stream, and MaxOS::common::OutputStream::write_hex()\&.
.SS "\fBstring\fP Driver::get_device_name ()\fC [virtual]\fP"

.PP
Get the device name of the driver\&. 
.PP
\fBReturns\fP
.RS 4
The device name of the driver 
.RE
.PP

.PP
Reimplemented in \fBMaxOS::drivers::peripherals::KeyboardDriver\fP, \fBMaxOS::drivers::clock::Clock\fP, \fBMaxOS::drivers::peripherals::MouseDriver\fP, \fBMaxOS::drivers::video::VideoElectronicsStandardsAssociation\fP, \fBMaxOS::drivers::disk::AdvancedTechnologyAttachment\fP, \fBMaxOS::drivers::video::VideoGraphicsArray\fP, \fBMaxOS::drivers::ethernet::intel_i217\fP, and \fBMaxOS::drivers::ethernet::amd_am79c973\fP\&.
.PP
Definition at line 117 of file driver\&.cpp\&.
.PP
.nf
118 {
119     return "Unknown Driver";
120 }
.fi
.PP
Referenced by MaxOS::hardwarecommunication::PeripheralComponentInterconnectController::select_drivers()\&.
.SS "\fBstring\fP Driver::get_vendor_name ()\fC [virtual]\fP"

.PP
Get the vendor name of the driver\&. 
.PP
\fBReturns\fP
.RS 4
The vendor name of the driver 
.RE
.PP

.PP
Reimplemented in \fBMaxOS::drivers::clock::Clock\fP, \fBMaxOS::drivers::disk::AdvancedTechnologyAttachment\fP, \fBMaxOS::drivers::video::VideoElectronicsStandardsAssociation\fP, \fBMaxOS::drivers::video::VideoGraphicsArray\fP, \fBMaxOS::drivers::ethernet::intel_i217\fP, and \fBMaxOS::drivers::ethernet::amd_am79c973\fP\&.
.PP
Definition at line 107 of file driver\&.cpp\&.
.PP
.nf
108 {
109     return "Generic";
110 }
.fi
.PP
Referenced by MaxOS::hardwarecommunication::PeripheralComponentInterconnectController::select_drivers()\&.
.SS "void Driver::initialise ()\fC [virtual]\fP"

.PP
Initialise the driver\&. 
.PP
Definition at line 37 of file driver\&.cpp\&.
.PP
.nf
37                         {
38 
39 }
.fi
.SS "uint32_t Driver::reset ()\fC [virtual]\fP"

.PP
Reset the driver\&. 
.PP
\fBReturns\fP
.RS 4
How long in milliseconds it took to reset the driver 
.RE
.PP

.PP
Reimplemented in \fBMaxOS::drivers::ethernet::intel_i217\fP, and \fBMaxOS::drivers::ethernet::amd_am79c973\fP\&.
.PP
Definition at line 46 of file driver\&.cpp\&.
.PP
.nf
46                       {
47     return 0;
48 }
.fi
.PP
Referenced by MaxOS::drivers::ethernet::intel_i217::reset()\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBcommon::OutputStream\fP* MaxOS::drivers::Driver::m_driver_message_stream"

.PP
Definition at line 28 of file driver\&.h\&.
.PP
Referenced by MaxOS::drivers::ethernet::intel_i217::activate(), MaxOS::drivers::ethernet::intel_i217::DoSend(), error_message(), MaxOS::drivers::ethernet::EthernetDriver::FireDataReceived(), MaxOS::drivers::ethernet::intel_i217::GetMediaAccessControlAddress(), MaxOS::drivers::ethernet::intel_i217::handle_interrupt(), and MaxOS::drivers::ethernet::EthernetDriver::Send()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
