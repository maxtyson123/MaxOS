.TH "MaxOS::gui::Widget" 3 "Sat Mar 29 2025" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaxOS::gui::Widget \- A graphical object that can be drawn on the screen\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <widget\&.h>\fP
.PP
Inherits \fBMaxOS::drivers::peripherals::KeyboardEventHandler\fP\&.
.PP
Inherited by \fBMaxOS::gui::CompositeWidget\fP, \fBMaxOS::gui::widgets::Button\fP, \fBMaxOS::gui::widgets::InputBox\fP, and \fBMaxOS::gui::widgets::Text\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBWidget\fP ()"
.br
.RI "\fBDEFAULT WIDGET\fP "
.ti -1c
.RI "\fBWidget\fP (int32_t left, int32_t top, uint32_t width, uint32_t height)"
.br
.ti -1c
.RI "\fB~Widget\fP ()"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBcommon::GraphicsContext\fP *gc, \fBcommon::Rectangle\fP< int32_t > &area)"
.br
.RI "Draw the widget on the screen\&. "
.ti -1c
.RI "void \fBinvalidate\fP ()"
.br
.RI "Invalidates the entire widget\&. This forces the widget to be redrawn on the next screen update\&. "
.ti -1c
.RI "virtual void \fBinvalidate\fP (\fBcommon::Rectangle\fP< int32_t > &area)"
.br
.RI "Invalidates a specific area of the widget\&. This forces that part of the screen to be redrawn on the next screen update\&. "
.ti -1c
.RI "virtual void \fBadd_child\fP (\fBWidget\fP *child)"
.br
.RI "Set the parent of a widget to this widget, making it into a child\&. "
.ti -1c
.RI "virtual \fBcommon::Coordinates\fP \fBabsolute_coordinates\fP (\fBcommon::Coordinates\fP coordinates)"
.br
.ti -1c
.RI "virtual bool \fBcontains_coordinate\fP (uint32_t x, uint32_t y)"
.br
.RI "Check if the widget contains a specific coordinate\&. "
.ti -1c
.RI "\fBcommon::Rectangle\fP< int32_t > \fBposition\fP ()"
.br
.RI "Get the position of the widget\&. "
.ti -1c
.RI "void \fBmove\fP (int32_t left, int32_t top)"
.br
.RI "Set the position of the widget, and invalidate the old and new positions so they are redrawn\&. "
.ti -1c
.RI "void \fBresize\fP (int32_t width, int32_t height)"
.br
.RI "Set the size of the widget, and invalidate the old and new positions so they are redrawn\&. "
.ti -1c
.RI "void \fBfocus\fP ()"
.br
.RI "Set the current focused widget to be this widget\&. "
.ti -1c
.RI "virtual void \fBon_focus\fP ()"
.br
.RI "Handles the event when the widget is focussed\&. "
.ti -1c
.RI "virtual void \fBon_focus_lost\fP ()"
.br
.RI "Handles the event when the widget is unfocused\&. "
.ti -1c
.RI "void \fBbring_to_front\fP ()"
.br
.RI "Brings this widget to the front of the screen\&. "
.ti -1c
.RI "virtual void \fBon_mouse_enter_widget\fP (uint32_t toX, uint32_t toY)"
.br
.RI "Handles the event when the mouse is moved on to the widget\&. "
.ti -1c
.RI "virtual void \fBon_mouse_leave_widget\fP (uint32_t fromX, uint32_t fromY)"
.br
.RI "Handles the event when the mouse is moved out of the widget\&. "
.ti -1c
.RI "virtual void \fBon_mouse_move_widget\fP (uint32_t fromX, uint32_t fromY, uint32_t toX, uint32_t toY)"
.br
.RI "Handles the event when the mouse is moved over the widget\&. "
.ti -1c
.RI "virtual \fBdrivers::peripherals::MouseEventHandler\fP * \fBon_mouse_button_pressed\fP (uint32_t x, uint32_t y, uint8_t button)"
.br
.RI "Handles the event when the mouse is pressed on the widget\&. "
.ti -1c
.RI "virtual void \fBon_mouse_button_released\fP (uint32_t x, uint32_t y, uint8_t button)"
.br
.RI "Handles the event when the mouse is released on the widget\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBset_focus\fP (\fBWidget\fP *)"
.br
.RI "Sets the widget that is currently focussed\&. "
.ti -1c
.RI "virtual void \fBbring_to_front\fP (\fBWidget\fP *)"
.br
.RI "Brings a specific widget to the front of the screen\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBWidget\fP * \fBm_parent\fP { nullptr }"
.br
.ti -1c
.RI "bool \fBm_valid\fP { false }"
.br
.ti -1c
.RI "uint32_t \fBm_min_width\fP { 5 }"
.br
.ti -1c
.RI "uint32_t \fBm_min_height\fP { 5 }"
.br
.ti -1c
.RI "uint32_t \fBm_max_width\fP { 0x8FFFFFFF }"
.br
.ti -1c
.RI "uint32_t \fBm_max_height\fP { 0x8FFFFFFF }"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<int Left, int Top, int Width, int Height> class \fBWidgetMoverResizer\fP"
.br
.ti -1c
.RI "class \fBCompositeWidget\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A graphical object that can be drawn on the screen\&. 
.PP
Definition at line 25 of file widget\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Widget::Widget ()"

.PP
\fBDEFAULT WIDGET\fP 
.PP
Definition at line 13 of file widget\&.cpp\&.
.PP
.nf
14 : KeyboardEventHandler()
15 {
16 
17 }
.fi
.SS "Widget::Widget (int32_t left, int32_t top, uint32_t width, uint32_t height)"

.PP
Definition at line 21 of file widget\&.cpp\&.
.PP
.nf
22 : KeyboardEventHandler(),
23   m_position(left, top, width, height)
24 {
25 
26 }
.fi
.SS "Widget::~Widget ()"

.PP
Definition at line 29 of file widget\&.cpp\&.
.PP
.nf
29                {
30 
31 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "\fBCoordinates\fP Widget::absolute_coordinates (\fBcommon::Coordinates\fP coordinates)\fC [virtual]\fP"

.PP
Definition at line 83 of file widget\&.cpp\&.
.PP
.nf
83                                                                       {
84 
85     // Return the parents absolute coordinates
86     if(m_parent != 0)
87         return m_parent->absolute_coordinates(Coordinates(coordinates\&.first + m_position\&.left, coordinates\&.second + m_position\&.top));
88 
89     // If the widget has no m_parent, return the coordinates of the widget
90     return Coordinates(coordinates\&.first + m_position\&.left, coordinates\&.second + m_position\&.top);
91 
92 }
.fi
.PP
References absolute_coordinates(), MaxOS::common::Pair< First, Second >::first, MaxOS::common::Rectangle< Type >::left, m_parent, MaxOS::common::Pair< First, Second >::second, and MaxOS::common::Rectangle< Type >::top\&.
.PP
Referenced by absolute_coordinates(), MaxOS::gui::widgets::Text::draw(), MaxOS::gui::widgets::InputBox::draw(), MaxOS::gui::widgets::Button::draw(), MaxOS::gui::Window::draw_self(), and invalidate()\&.
.SS "void Widget::add_child (\fBWidget\fP * child)\fC [virtual]\fP"

.PP
Set the parent of a widget to this widget, making it into a child\&. 
.PP
\fBParameters\fP
.RS 4
\fIchild\fP The child to add 
.RE
.PP

.PP
Reimplemented in \fBMaxOS::gui::CompositeWidget\fP, \fBMaxOS::gui::Window\fP, and \fBMaxOS::gui::Desktop\fP\&.
.PP
Definition at line 76 of file widget\&.cpp\&.
.PP
.nf
76                                     {
77 
78     // Parent the child to this widget
79     child ->m_parent = this;
80 
81 }
.fi
.PP
References m_parent\&.
.PP
Referenced by MaxOS::gui::CompositeWidget::add_child()\&.
.SS "void Widget::bring_to_front ()"

.PP
Brings this widget to the front of the screen\&. 
.PP
Definition at line 211 of file widget\&.cpp\&.
.PP
.nf
211                             {
212 
213     // Bring this widget to the front of the screen
214     bring_to_front(this);
215 
216 }
.fi
.PP
Referenced by MaxOS::gui::Window::on_mouse_button_pressed(), and on_mouse_button_pressed()\&.
.SS "void Widget::bring_to_front (\fBWidget\fP * widget)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Brings a specific widget to the front of the screen\&. 
.PP
\fBParameters\fP
.RS 4
\fIwidget\fP The widget to bring to the front 
.RE
.PP

.PP
Reimplemented in \fBMaxOS::gui::Desktop\fP\&.
.PP
Definition at line 223 of file widget\&.cpp\&.
.PP
.nf
223                                           {
224 
225     // Bring the parent to the front of the screen
226     if(m_parent != 0)
227        m_parent->bring_to_front(widget);
228 
229 }
.fi
.PP
References bring_to_front(), and m_parent\&.
.PP
Referenced by bring_to_front()\&.
.SS "bool Widget::contains_coordinate (uint32_t x, uint32_t y)\fC [virtual]\fP"

.PP
Check if the widget contains a specific coordinate\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate 
.RE
.PP
\fBReturns\fP
.RS 4
True if the widget contains the coordinate, false if it does not 
.RE
.PP

.PP
Definition at line 101 of file widget\&.cpp\&.
.PP
.nf
101                                                        {
102 
103     // Check if the coordinates are within the bounds of the widget
104     return m_position\&.contains(x,y);
105 }
.fi
.PP
References MaxOS::common::Rectangle< Type >::contains(), MaxOS::drivers::peripherals::x, and MaxOS::drivers::peripherals::y\&.
.PP
Referenced by MaxOS::gui::Desktop::add_child()\&.
.SS "void Widget::draw (\fBcommon::GraphicsContext\fP * gc, \fBcommon::Rectangle\fP< int32_t > & area)\fC [virtual]\fP"

.PP
Draw the widget on the screen\&. 
.PP
\fBParameters\fP
.RS 4
\fIgc\fP The graphics context to draw the widgets pixels on 
.br
\fIarea\fP The area of the widget to draw 
.RE
.PP

.PP
Reimplemented in \fBMaxOS::gui::CompositeWidget\fP, \fBMaxOS::gui::widgets::Button\fP, \fBMaxOS::gui::widgets::InputBox\fP, and \fBMaxOS::gui::widgets::Text\fP\&.
.PP
Definition at line 39 of file widget\&.cpp\&.
.PP
.nf
39                                                        {
40 
41 }
.fi
.PP
Referenced by MaxOS::gui::widgets::Text::draw(), MaxOS::gui::widgets::InputBox::draw(), MaxOS::gui::widgets::Button::draw(), and MaxOS::gui::CompositeWidget::draw()\&.
.SS "void Widget::focus ()"

.PP
Set the current focused widget to be this widget\&. 
.PP
Definition at line 176 of file widget\&.cpp\&.
.PP
.nf
176                    {
177 
178     // Set the focus the widget to this widget
179     set_focus(this);
180 }
.fi
.PP
References set_focus()\&.
.PP
Referenced by on_mouse_button_pressed()\&.
.SS "void Widget::invalidate ()"

.PP
Invalidates the entire widget\&. This forces the widget to be redrawn on the next screen update\&. 
.PP
Definition at line 46 of file widget\&.cpp\&.
.PP
.nf
46                         {
47 
48     // Convert the relative coordinates to absolute coordinates
49     Coordinates coordinates = absolute_coordinates(Coordinates(0, 0));
50 
51     // Create a rectangle with the absolute coordinates and the size of the widget
52     Rectangle<int32_t> invalidArea = Rectangle<int32_t>(coordinates\&.first, coordinates\&.second, m_position\&.width, m_position\&.height);
53 
54     // Invalidate the area
55     invalidate(invalidArea);
56 
57 }
.fi
.PP
References absolute_coordinates(), MaxOS::common::Pair< First, Second >::first, MaxOS::common::Rectangle< Type >::height, MaxOS::common::Pair< First, Second >::second, and MaxOS::common::Rectangle< Type >::width\&.
.PP
Referenced by MaxOS::gui::Desktop::Desktop(), MaxOS::gui::Desktop::internal_invalidate(), invalidate(), move(), MaxOS::gui::widgets::InputBox::on_focus(), MaxOS::gui::widgets::InputBox::on_focus_lost(), MaxOS::gui::widgets::InputBox::on_key_down(), MaxOS::gui::widgets::Button::on_mouse_button_pressed(), MaxOS::gui::widgets::Button::on_mouse_button_released(), resize(), MaxOS::gui::widgets::Text::update_text(), and MaxOS::gui::widgets::InputBox::update_text()\&.
.SS "void Widget::invalidate (\fBcommon::Rectangle\fP< int32_t > & area)\fC [virtual]\fP"

.PP
Invalidates a specific area of the widget\&. This forces that part of the screen to be redrawn on the next screen update\&. 
.PP
\fBParameters\fP
.RS 4
\fIarea\fP The area of the widget to invalidate 
.RE
.PP

.PP
Reimplemented in \fBMaxOS::gui::Desktop\fP\&.
.PP
Definition at line 64 of file widget\&.cpp\&.
.PP
.nf
64                                                 {
65 
66     // If the widget has a parent, invalidate the area of the parent
67     if(m_parent != 0)
68         m_parent->invalidate(area);
69 }
.fi
.PP
References invalidate(), and m_parent\&.
.SS "void Widget::move (int32_t left, int32_t top)"

.PP
Set the position of the widget, and invalidate the old and new positions so they are redrawn\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP The new left position of the rectangle 
.br
\fItop\fP The new top position of the rectangle 
.RE
.PP

.PP
Definition at line 122 of file widget\&.cpp\&.
.PP
.nf
122                                            {
123 
124     // Invalidate the old position
125     invalidate();
126 
127     // Set the new position
128     m_position\&.left = left;
129     m_position\&.top = top;
130 
131     // Re draw the widget in the new position
132     invalidate();
133 }
.fi
.PP
References invalidate(), MaxOS::common::Rectangle< Type >::left, and MaxOS::common::Rectangle< Type >::top\&.
.PP
Referenced by MaxOS::gui::Window::add_child()\&.
.SS "void Widget::on_focus ()\fC [virtual]\fP"

.PP
Handles the event when the widget is focussed\&. 
.PP
Reimplemented in \fBMaxOS::gui::widgets::InputBox\fP\&.
.PP
Definition at line 197 of file widget\&.cpp\&.
.PP
.nf
197                       {
198 
199 }
.fi
.PP
Referenced by MaxOS::gui::Desktop::set_focus()\&.
.SS "void Widget::on_focus_lost ()\fC [virtual]\fP"

.PP
Handles the event when the widget is unfocused\&. 
.PP
Reimplemented in \fBMaxOS::gui::widgets::InputBox\fP\&.
.PP
Definition at line 204 of file widget\&.cpp\&.
.PP
.nf
204                            {
205 
206 }
.fi
.PP
Referenced by MaxOS::gui::Desktop::set_focus()\&.
.SS "\fBperipherals::MouseEventHandler\fP * Widget::on_mouse_button_pressed (uint32_t x, uint32_t y, uint8_t button)\fC [virtual]\fP"

.PP
Handles the event when the mouse is pressed on the widget\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate of the mouse when it was pressed 
.br
\fIy\fP The y coordinate of the mouse when it was pressed 
.br
\fIbutton\fP The button that was pressed 
.RE
.PP
\fBReturns\fP
.RS 4
nullptr 
.RE
.PP

.PP
Reimplemented in \fBMaxOS::gui::CompositeWidget\fP, \fBMaxOS::gui::widgets::Button\fP, and \fBMaxOS::gui::Window\fP\&.
.PP
Definition at line 271 of file widget\&.cpp\&.
.PP
.nf
271                                                                                          {
272 
273     // Bring the widget to the front of the screen
274     bring_to_front();
275 
276     // Focus the widget
277     focus();
278 
279     // Return 0 as the event has been handled
280     return 0;
281 }
.fi
.PP
References bring_to_front(), and focus()\&.
.PP
Referenced by MaxOS::gui::widgets::Button::on_mouse_button_pressed()\&.
.SS "void Widget::on_mouse_button_released (uint32_t x, uint32_t y, uint8_t button)\fC [virtual]\fP"

.PP
Handles the event when the mouse is released on the widget\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x coordinate of the mouse when it was released 
.br
\fIy\fP The y coordinate of the mouse when it was released 
.br
\fIbutton\fP The button that was released 
.RE
.PP

.PP
Reimplemented in \fBMaxOS::gui::CompositeWidget\fP, and \fBMaxOS::gui::widgets::Button\fP\&.
.PP
Definition at line 290 of file widget\&.cpp\&.
.PP
.nf
290                                                                  {
291 
292 }
.fi
.PP
Referenced by MaxOS::gui::widgets::Button::on_mouse_button_released()\&.
.SS "void Widget::on_mouse_enter_widget (uint32_t toX, uint32_t toY)\fC [virtual]\fP"

.PP
Handles the event when the mouse is moved on to the widget\&. 
.PP
\fBParameters\fP
.RS 4
\fItoX\fP The x coordinate of the mouse 
.br
\fItoY\fP The y coordinate of the mouse 
.RE
.PP

.PP
Reimplemented in \fBMaxOS::gui::CompositeWidget\fP\&.
.PP
Definition at line 237 of file widget\&.cpp\&.
.PP
.nf
237                                                      {
238 
239 }
.fi
.PP
Referenced by MaxOS::gui::CompositeWidget::on_mouse_move_widget()\&.
.SS "void Widget::on_mouse_leave_widget (uint32_t fromX, uint32_t fromY)\fC [virtual]\fP"

.PP
Handles the event when the mouse is moved out of the widget\&. 
.PP
\fBParameters\fP
.RS 4
\fIfromX\fP The x coordinate of the mouse 
.br
\fIfromY\fP The y coordinate of the mouse 
.RE
.PP

.PP
Reimplemented in \fBMaxOS::gui::CompositeWidget\fP\&.
.PP
Definition at line 247 of file widget\&.cpp\&.
.PP
.nf
247                                                      {
248 
249 }
.fi
.PP
Referenced by MaxOS::gui::CompositeWidget::on_mouse_move_widget()\&.
.SS "void Widget::on_mouse_move_widget (uint32_t fromX, uint32_t fromY, uint32_t toX, uint32_t toY)\fC [virtual]\fP"

.PP
Handles the event when the mouse is moved over the widget\&. 
.PP
\fBParameters\fP
.RS 4
\fIfromX\fP The x original coordinate of the mouse 
.br
\fIfromY\fP The y original coordinate of the mouse 
.br
\fItoX\fP The x new coordinate of the mouse 
.br
\fItoY\fP The y new coordinate of the mouse 
.RE
.PP

.PP
Reimplemented in \fBMaxOS::gui::CompositeWidget\fP\&.
.PP
Definition at line 259 of file widget\&.cpp\&.
.PP
.nf
259                                                                         {
260 
261 }
.fi
.PP
Referenced by MaxOS::gui::CompositeWidget::on_mouse_move_widget()\&.
.SS "\fBRectangle\fP< int32_t > Widget::position ()"

.PP
Get the position of the widget\&. 
.PP
\fBReturns\fP
.RS 4
The position of the widget 
.RE
.PP

.PP
Definition at line 112 of file widget\&.cpp\&.
.PP
.nf
112                                     {
113     return m_position;
114 }
.fi
.PP
Referenced by MaxOS::gui::Window::add_child(), MaxOS::gui::widgets::Text::draw(), MaxOS::gui::widgets::InputBox::draw(), MaxOS::gui::widgets::Button::draw(), MaxOS::gui::CompositeWidget::draw(), MaxOS::gui::Window::draw_self(), MaxOS::gui::Window::on_mouse_button_pressed(), and MaxOS::gui::Desktop::on_mouse_move_event()\&.
.SS "void Widget::resize (int32_t width, int32_t height)"

.PP
Set the size of the widget, and invalidate the old and new positions so they are redrawn\&. 
.PP
\fBParameters\fP
.RS 4
\fIwidth\fP The new m_width of the rectangle 
.br
\fIheight\fP The new m_height of the rectangle 
.RE
.PP

.PP
Definition at line 141 of file widget\&.cpp\&.
.PP
.nf
141                                                  {
142 
143     // Restrict the width and height to the minimum and maximum values
144     if(width < (int)m_min_width) width = m_min_width;
145     if(height < (int)m_min_height) height = m_min_height;
146     if(width > (int)m_max_width) width = m_max_width;
147     if(height > (int)m_max_height) height = m_max_height;
148 
149     // Store the old position, set the new position
150     Rectangle<int32_t> old_position = m_position;
151     m_position\&.width = width;
152     m_position\&.height = height;
153 
154     // Find the areas that need to be redrawn by subtracting the old position from the new position, and vice versa
155     Vector<Rectangle<int32_t>> invalid_areas_old = old_position\&.subtract(m_position);
156     Vector<Rectangle<int32_t>> invalid_areas_new = m_position\&.subtract(old_position);
157 
158     // Right and Bottom require to be fully invalidated TODO: Fix this hack
159     if(m_position\&.width > old_position\&.width || m_position\&.height > old_position\&.height || old_position\&.width > m_position\&.width || old_position\&.height > m_position\&.height){
160         invalidate();
161         return;
162     }
163 
164     //Loop through the areas that need to be redrawn and invalidate them
165     for(uint32_t i = 0; i < invalid_areas_old\&.size(); i++)
166         invalidate(invalid_areas_old[i]);
167 
168     for(uint32_t i = 0; i < invalid_areas_new\&.size(); i++)
169         invalidate(invalid_areas_new[i]);
170 
171 }
.fi
.PP
References MaxOS::common::Rectangle< Type >::height, MaxOS::drivers::peripherals::i, invalidate(), m_max_height, m_max_width, m_min_height, m_min_width, MaxOS::common::Vector< Type >::size(), MaxOS::common::Rectangle< Type >::subtract(), and MaxOS::common::Rectangle< Type >::width\&.
.SS "void Widget::set_focus (\fBWidget\fP * widget)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Sets the widget that is currently focussed\&. 
.PP
\fBParameters\fP
.RS 4
\fIwidget\fP The widget to set as focussed 
.RE
.PP

.PP
Reimplemented in \fBMaxOS::gui::Desktop\fP\&.
.PP
Definition at line 187 of file widget\&.cpp\&.
.PP
.nf
187                                      {
188 
189     // Focus the parent to this widget
190     if(m_parent != 0)
191       m_parent->set_focus(widget);
192 }
.fi
.PP
References m_parent, and set_focus()\&.
.PP
Referenced by focus(), and set_focus()\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBCompositeWidget\fP\fC [friend]\fP"

.PP
Definition at line 27 of file widget\&.h\&.
.SS "template<int Left, int Top, int Width, int Height> friend class \fBWidgetMoverResizer\fP\fC [friend]\fP"

.PP
Definition at line 26 of file widget\&.h\&.
.SH "Member Data Documentation"
.PP 
.SS "uint32_t MaxOS::gui::Widget::m_max_height { 0x8FFFFFFF }\fC [protected]\fP"

.PP
Definition at line 40 of file widget\&.h\&.
.PP
Referenced by resize()\&.
.SS "uint32_t MaxOS::gui::Widget::m_max_width { 0x8FFFFFFF }\fC [protected]\fP"

.PP
Definition at line 39 of file widget\&.h\&.
.PP
Referenced by resize()\&.
.SS "uint32_t MaxOS::gui::Widget::m_min_height { 5 }\fC [protected]\fP"

.PP
Definition at line 37 of file widget\&.h\&.
.PP
Referenced by resize(), and MaxOS::gui::Window::Window()\&.
.SS "uint32_t MaxOS::gui::Widget::m_min_width { 5 }\fC [protected]\fP"

.PP
Definition at line 36 of file widget\&.h\&.
.PP
Referenced by resize(), and MaxOS::gui::Window::Window()\&.
.SS "\fBWidget\fP* MaxOS::gui::Widget::m_parent { nullptr }\fC [protected]\fP"

.PP
Definition at line 33 of file widget\&.h\&.
.PP
Referenced by absolute_coordinates(), add_child(), bring_to_front(), invalidate(), and set_focus()\&.
.SS "bool MaxOS::gui::Widget::m_valid { false }\fC [protected]\fP"

.PP
Definition at line 34 of file widget\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
