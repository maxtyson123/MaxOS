.TH "MaxOS::common::Vector< Type >" 3 "Mon Jan 15 2024" "Version 0.1" "Max OS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaxOS::common::Vector< Type > \- Dynamically stores an array of elements\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vector\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef Type * \fBiterator\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVector\fP ()"
.br
.RI "______________________________________Implementation__________________________________________________ "
.ti -1c
.RI "\fBVector\fP (int Size, Type element)"
.br
.RI "Constructor for \fBVector\fP\&. "
.ti -1c
.RI "\fB~Vector\fP ()"
.br
.ti -1c
.RI "Type & \fBoperator[]\fP (uint32_t index) const"
.br
.RI "Overloads the [] operator to return the element at the index\&. "
.ti -1c
.RI "bool \fBempty\fP () const"
.br
.RI "Checks if the \fBVector\fP is empty\&. "
.ti -1c
.RI "uint32_t \fBsize\fP () const"
.br
.RI "Returns the number of elements in the \fBVector\fP\&. "
.ti -1c
.RI "\fBiterator\fP \fBbegin\fP () const"
.br
.RI "Returns the m_first_memory_chunk element of the \fBVector\fP\&. "
.ti -1c
.RI "\fBiterator\fP \fBend\fP () const"
.br
.RI "Returns the last element of the \fBVector\fP\&. "
.ti -1c
.RI "\fBiterator\fP \fBfind\fP (Type) const"
.br
.RI "Finds an element in the \fBVector\fP and returns the iterator of the element\&. "
.ti -1c
.RI "\fBiterator\fP \fBpush_back\fP (Type)"
.br
.RI "Adds an element to the end of the vector and returns the iterator of the element\&. "
.ti -1c
.RI "void \fBpop_back\fP ()"
.br
.RI "Removes the last element from the \fBVector\fP\&. "
.ti -1c
.RI "\fBiterator\fP \fBpush_front\fP (Type)"
.br
.RI "Adds an element to the front of the \fBVector\fP and returns the iterator of the element\&. "
.ti -1c
.RI "void \fBpop_front\fP ()"
.br
.RI "Removes the m_first_memory_chunk element from the \fBVector\fP\&. "
.ti -1c
.RI "void \fBerase\fP (Type)"
.br
.RI "Removes all elements from the \fBVector\fP that are equal to the element\&. "
.ti -1c
.RI "void \fBerase\fP (\fBiterator\fP position)"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.RI "Removes all elements from the \fBVector\fP\&. "
.ti -1c
.RI "void \fBiterate\fP (\fBVectorIterationHandler\fP< Type > *)"
.br
.RI "Iterates over the \fBVector\fP and calls the OnRead function of the handler for each element\&. "
.ti -1c
.RI "void \fBIterate\fP (void callback(Type &))"
.br
.RI "Iterates over the \fBVector\fP and calls the callback function for each element\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBincrease_size\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "Type * \fBm_elements\fP"
.br
.ti -1c
.RI "uint32_t \fBm_size\fP { 0 }"
.br
.ti -1c
.RI "uint32_t \fBm_capacity\fP { 1 }"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class Type>
.br
class MaxOS::common::Vector< Type >"
Dynamically stores an array of elements\&. 


.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP Type of the \fBVector\fP 
.RE
.PP

.PP
Definition at line 36 of file vector\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<class Type > typedef Type* \fBMaxOS::common::Vector\fP< Type >::\fBiterator\fP"

.PP
Definition at line 46 of file vector\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class Type > \fBMaxOS::common::Vector\fP< Type >::\fBVector\fP"

.PP
______________________________________Implementation__________________________________________________ Constructor for \fBVector\fP
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP Type of the \fBVector\fP 
.RE
.PP

.PP
Definition at line 81 of file vector\&.h\&.
.PP
.nf
81                                                   {
82 
83             // Allocate space for the array
84             m_elements = new Type[m_capacity];
85 
86         }
.fi
.SS "template<class Type > \fBMaxOS::common::Vector\fP< Type >::\fBVector\fP (int size, Type element)"

.PP
Constructor for \fBVector\fP\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP Type of the \fBVector\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIsize\fP Size of the \fBVector\fP 
.br
\fIelement\fP Element to fill the \fBVector\fP with 
.RE
.PP

.PP
Definition at line 95 of file vector\&.h\&.
.PP
.nf
95                                                                         {
96 
97             // Allocate space for the array
98             m_elements = new Type[size];
99 
100             // Push all the elements to the Vector
101             for (int i = 0; i < size; ++i)
102                     push_back(element);
103         }
.fi
.SS "template<class Type > \fBMaxOS::common::Vector\fP< Type >::~\fBVector\fP"

.PP
Definition at line 106 of file vector\&.h\&.
.PP
.nf
106                                                    {
107 
108             // De-allocate the array
109             delete[] m_elements;
110 
111         }
.fi
.SH "Member Function Documentation"
.PP 
.SS "template<class Type > \fBVector\fP< Type >::\fBiterator\fP \fBMaxOS::common::Vector\fP< Type >::begin"

.PP
Returns the m_first_memory_chunk element of the \fBVector\fP\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP Type of the \fBVector\fP 
.RE
.PP
\fBReturns\fP
.RS 4
The m_first_memory_chunk element of the \fBVector\fP 
.RE
.PP

.PP
Definition at line 167 of file vector\&.h\&.
.PP
.nf
167                                                                                     {
168             return &m_elements[0];
169         }
.fi
.PP
Referenced by MaxOS::common::Map< uint16_t, MaxOS::net::EthernetFramePayloadHandler * >::begin(), MaxOS::gui::CompositeWidget::draw(), MaxOS::drivers::ethernet::EthernetDriver::FireDataReceived(), MaxOS::gui::Desktop::internal_invalidate(), and kernelMain()\&.
.SS "template<class Type > void \fBMaxOS::common::Vector\fP< Type >::clear"

.PP
Removes all elements from the \fBVector\fP\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP Type of the \fBVector\fP 
.RE
.PP

.PP
Definition at line 339 of file vector\&.h\&.
.PP
.nf
339                                                       {
340           m_size = 0;
341         }
.fi
.PP
Referenced by MaxOS::common::Map< uint16_t, MaxOS::net::EthernetFramePayloadHandler * >::clear()\&.
.SS "template<class Type > bool \fBMaxOS::common::Vector\fP< Type >::empty"

.PP
Checks if the \fBVector\fP is empty\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP Type of the \fBVector\fP 
.RE
.PP
\fBReturns\fP
.RS 4
True if the \fBVector\fP is empty, false otherwise 
.RE
.PP

.PP
Definition at line 205 of file vector\&.h\&.
.PP
.nf
205                                                            {
206             return begin() == end();
207         }
.fi
.PP
Referenced by MaxOS::common::Map< uint16_t, MaxOS::net::EthernetFramePayloadHandler * >::empty()\&.
.SS "template<class Type > \fBVector\fP< Type >::\fBiterator\fP \fBMaxOS::common::Vector\fP< Type >::end"

.PP
Returns the last element of the \fBVector\fP\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP Type of the \fBVector\fP 
.RE
.PP
\fBReturns\fP
.RS 4
The last element of the \fBVector\fP 
.RE
.PP

.PP
Definition at line 177 of file vector\&.h\&.
.PP
.nf
177                                                                                    {
178             return &m_elements[0] + m_size;
179          }
.fi
.PP
Referenced by MaxOS::gui::CompositeWidget::draw(), MaxOS::common::Map< uint16_t, MaxOS::net::EthernetFramePayloadHandler * >::end(), MaxOS::drivers::ethernet::EthernetDriver::FireDataReceived(), MaxOS::gui::Desktop::internal_invalidate(), and kernelMain()\&.
.SS "template<class Type > void \fBMaxOS::common::Vector\fP< Type >::erase (\fBiterator\fP position)"

.SS "template<class Type > void \fBMaxOS::common::Vector\fP< Type >::erase (Type element)"

.PP
Removes all elements from the \fBVector\fP that are equal to the element\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP Type of the \fBVector\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIelement\fP The element to remove 
.RE
.PP

.PP
Definition at line 290 of file vector\&.h\&.
.PP
.nf
290                                                                   {
291 
292             // Search for the element
293             int hits = 0;
294             for (iterator i = begin(); i != end(); ++i)
295             {
296                 // If it is the element we are looking for
297                 if (*i == element)
298                 {
299                     ++hits;
300                 } else {
301 
302                     // If there are hits move the element to the left
303                     if (hits > 0)
304                         *(i - hits) = *i;
305                 }
306 
307             }
308 
309             // Decrease the size of the Vector
310             m_size -= hits;
311         }
.fi
.PP
Referenced by MaxOS::common::Map< uint16_t, MaxOS::net::EthernetFramePayloadHandler * >::erase()\&.
.SS "template<class Type > \fBVector\fP< Type >::\fBiterator\fP \fBMaxOS::common::Vector\fP< Type >::find (Type element) const"

.PP
Finds an element in the \fBVector\fP and returns the iterator of the element\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP Type of the \fBVector\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIelement\fP The element to find 
.RE
.PP
\fBReturns\fP
.RS 4
The iterator of the element or the end of the \fBVector\fP if the element is not found 
.RE
.PP

.PP
Definition at line 188 of file vector\&.h\&.
.PP
.nf
188                                                                                                {
189 
190             // Find the element
191             for (iterator i = begin(); i != end(); ++i)
192               if (*i == element)
193                       return i;
194 
195             // The element must not be in the Vector
196             return end();
197         }
.fi
.SS "template<class Type > void \fBMaxOS::common::Vector\fP< Type >::increase_size\fC [protected]\fP"

.PP
Definition at line 113 of file vector\&.h\&.
.PP
.nf
113                                                                {
114 
115             // Allocate more space for the array
116             Type* new_elements = new Type[m_capacity * 2];
117 
118             // Copy the elements to the new array
119             for (uint32_t i = 0; i < m_size; ++i)
120               new_elements[i] = m_elements[i];
121 
122             // De-allocate the old array
123             delete[] m_elements;
124 
125             // Set the new array
126             m_elements = new_elements;
127 
128             // Increase the capacity of the Vector
129             m_capacity *= 2;
130 
131         }
.fi
.SS "template<class Type > void \fBMaxOS::common::Vector\fP< Type >::iterate (\fBVectorIterationHandler\fP< Type > * vector_iteration_handler)"

.PP
Iterates over the \fBVector\fP and calls the OnRead function of the handler for each element\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP Type of the \fBVector\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIvector_iteration_handler\fP The handler 
.RE
.PP

.PP
Definition at line 349 of file vector\&.h\&.
.PP
.nf
349                                                                                                               {
350 
351           // Call the OnRead function of the handler for each element
352           for(auto& element : m_elements)
353             vector_iteration_handler->on_read(element);
354 
355           // Call the OnEndOfStream function of the handler
356           vector_iteration_handler->on_end_of_stream();
357         }
.fi
.SS "template<class Type > void \fBMaxOS::common::Vector\fP< Type >::Iterate (void  callbackType &)"

.PP
Iterates over the \fBVector\fP and calls the callback function for each element\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP Type of the \fBVector\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIcallback\fP The callback function 
.RE
.PP

.PP
Definition at line 366 of file vector\&.h\&.
.PP
.nf
366                                                                              {
367 
368            // Call the callback function for each element
369            for(auto& element : m_elements)
370               callback(element);
371         }
.fi
.SS "template<class Type > Type & \fBMaxOS::common::Vector\fP< Type >::operator[] (uint32_t index) const"

.PP
Overloads the [] operator to return the element at the index\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP Type of the \fBVector\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIindex\fP The index of the element 
.RE
.PP
\fBReturns\fP
.RS 4
the element at the index or the end of the \fBVector\fP if the index is out of bounds 
.RE
.PP

.PP
Definition at line 140 of file vector\&.h\&.
.PP
.nf
140                                                                                {
141 
142             // If the index is in the Vector
143             if (index <= m_size)
144                 return m_elements[index];
145 
146             // Return the last element of the Vector
147             return m_elements[m_size - 1];
148 
149         }
.fi
.SS "template<class Type > void \fBMaxOS::common::Vector\fP< Type >::pop_back"

.PP
Removes the last element from the \fBVector\fP\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP Type of the \fBVector\fP 
.RE
.PP

.PP
Definition at line 232 of file vector\&.h\&.
.PP
.nf
232                                                          {
233 
234             // Remove the last element from the Vector
235             if (m_size > 0)
236                     --m_size;
237         }
.fi
.SS "template<class Type > void \fBMaxOS::common::Vector\fP< Type >::pop_front"

.PP
Removes the m_first_memory_chunk element from the \fBVector\fP\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP Type of the \fBVector\fP 
.RE
.PP

.PP
Definition at line 270 of file vector\&.h\&.
.PP
.nf
270                                                           {
271 
272           // Make sure the Vector is not empty
273           if (m_size == 0)
274             return;
275 
276           // Move all elements one index to the left
277           for (iterator i = begin(); i != end(); ++i)
278               *i = *(i + 1);
279 
280           // Decrease the size of the Vector
281           --m_size;
282         }
.fi
.SS "template<class Type > \fBVector\fP< Type >::\fBiterator\fP \fBMaxOS::common::Vector\fP< Type >::push_back (Type element)"

.PP
Adds an element to the end of the vector and returns the iterator of the element\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP Type of the \fBVector\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIelement\fP The element to add 
.RE
.PP
\fBReturns\fP
.RS 4
The iterator of the element, if the \fBVector\fP is full it returns the end of the \fBVector\fP 
.RE
.PP

.PP
Definition at line 217 of file vector\&.h\&.
.PP
.nf
217                                                                                                {
218 
219             // Check if we need to allocate more space for the array
220             if(m_size == m_capacity)
221                 increase_size();
222 
223             // Add the element to the Vector and return the iterator of the element
224             m_elements[m_size++] = element;
225             return end() - 1;
226         }
.fi
.PP
Referenced by MaxOS::common::Map< uint16_t, MaxOS::net::EthernetFramePayloadHandler * >::insert(), kernelMain(), MaxOS::common::EventManager< EthernetDriverEvents >::raise_event(), and MaxOS::common::Rectangle< int32_t >::subtract()\&.
.SS "template<class Type > \fBVector\fP< Type >::\fBiterator\fP \fBMaxOS::common::Vector\fP< Type >::push_front (Type element)"

.PP
Adds an element to the front of the \fBVector\fP and returns the iterator of the element\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP Type of the \fBVector\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIelement\fP The element to add 
.RE
.PP
\fBReturns\fP
.RS 4
The iterator of the element, if the \fBVector\fP is full it returns the end of the \fBVector\fP 
.RE
.PP

.PP
Definition at line 246 of file vector\&.h\&.
.PP
.nf
246                                                                                                 {
247 
248             // Check if we need to allocate more space for the array
249             if(m_size == m_capacity){
250                     increase_size();
251             }
252 
253             // Move all elements one index to the right
254             for (iterator i = end(); i > begin(); --i)
255                 *i = *(i - 1);
256 
257             // Add the element to the front of the Vector
258             m_elements[0] = element;
259             ++m_size;
260 
261             // Return the iterator of the element
262             return begin();
263         }
.fi
.SS "template<class Type > uint32_t \fBMaxOS::common::Vector\fP< Type >::size"

.PP
Returns the number of elements in the \fBVector\fP\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP Type of the \fBVector\fP 
.RE
.PP
\fBReturns\fP
.RS 4
The size of the \fBVector\fP 
.RE
.PP

.PP
Definition at line 157 of file vector\&.h\&.
.PP
.nf
157                                                               {
158             return m_size;
159         }
.fi
.PP
Referenced by MaxOS::gui::Widget::resize()\&.
.SH "Member Data Documentation"
.PP 
.SS "template<class Type > uint32_t \fBMaxOS::common::Vector\fP< Type >::m_capacity { 1 }\fC [protected]\fP"

.PP
Definition at line 41 of file vector\&.h\&.
.SS "template<class Type > Type* \fBMaxOS::common::Vector\fP< Type >::m_elements\fC [protected]\fP"

.PP
Definition at line 39 of file vector\&.h\&.
.SS "template<class Type > uint32_t \fBMaxOS::common::Vector\fP< Type >::m_size { 0 }\fC [protected]\fP"

.PP
Definition at line 40 of file vector\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Max OS from the source code\&.
